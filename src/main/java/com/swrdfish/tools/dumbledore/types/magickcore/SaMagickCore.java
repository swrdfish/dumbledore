package com.swrdfish.tools.dumbledore.types.magickcore;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.util.Arrays;
import java.util.List;


/**
 * JNA Wrapper for library <b>magicktypes</b> <br> This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>, <br> a tool written by <a
 * href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses
 * a few opensource projects.</a>. <br> For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>
 * , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SaMagickCore extends Library {

  public static final String JNA_LIBRARY_NAME = "MagickCore-7.Q16HDRI";
  public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary
      .getInstance(SaMagickCore.JNA_LIBRARY_NAME);
  public static final SaMagickCore INSTANCE = (SaMagickCore) Native
      .loadLibrary(SaMagickCore.JNA_LIBRARY_NAME, SaMagickCore.class);

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:5</i> <br> enum
   * values
   */
  public static interface MapMode {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:1</i>
     */
    public static final int ReadMode = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:2</i>
     */
    public static final int WriteMode = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:3</i>
     */
    public static final int IOMode = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:4</i>
     */
    public static final int PersistMode = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:7</i> <br> enum
   * values
   */
  public static interface CacheType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:1</i>
     */
    public static final int UndefinedCache = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:2</i>
     */
    public static final int DiskCache = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:3</i>
     */
    public static final int DistributedCache = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:4</i>
     */
    public static final int MapCache = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:5</i>
     */
    public static final int MemoryCache = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:6</i>
     */
    public static final int PingCache = 5;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:18</i> <br>
   * enum values
   */
  public static interface VirtualPixelMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:1</i>
     */
    public static final int UndefinedVirtualPixelMethod = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:2</i>
     */
    public static final int BackgroundVirtualPixelMethod = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:3</i>
     */
    public static final int DitherVirtualPixelMethod = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:4</i>
     */
    public static final int EdgeVirtualPixelMethod = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:5</i>
     */
    public static final int MirrorVirtualPixelMethod = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:6</i>
     */
    public static final int RandomVirtualPixelMethod = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:7</i>
     */
    public static final int TileVirtualPixelMethod = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:8</i>
     */
    public static final int TransparentVirtualPixelMethod = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:9</i>
     */
    public static final int MaskVirtualPixelMethod = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:10</i>
     */
    public static final int BlackVirtualPixelMethod = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:11</i>
     */
    public static final int GrayVirtualPixelMethod = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:12</i>
     */
    public static final int WhiteVirtualPixelMethod = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:13</i>
     */
    public static final int HorizontalTileVirtualPixelMethod = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:14</i>
     */
    public static final int VerticalTileVirtualPixelMethod = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:15</i>
     */
    public static final int HorizontalTileEdgeVirtualPixelMethod = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:16</i>
     */
    public static final int VerticalTileEdgeVirtualPixelMethod = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:17</i>
     */
    public static final int CheckerTileVirtualPixelMethod = 16;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:9</i> <br> enum
   * values
   */
  public static interface ComplianceType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:1</i>
     */
    public static final int UndefinedCompliance = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:2</i>
     */
    public static final int NoCompliance = 0x0000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:3</i>
     */
    public static final int CSSCompliance = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:4</i>
     */
    public static final int SVGCompliance = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:5</i>
     */
    public static final int X11Compliance = 0x0002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:6</i>
     */
    public static final int XPMCompliance = 0x0004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:7</i>
     */
    public static final int MVGCompliance = 0x0008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:8</i>
     */
    public static final int AllCompliance = 0x7fffffff;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:35</i> <br>
   * enum values
   */
  public static interface ColorspaceType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:1</i>
     */
    public static final int UndefinedColorspace = 0;
    /**
     * negated linear RGB colorspace <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:2</i>
     */
    public static final int CMYColorspace = 1;
    /**
     * CMY with Black separation <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:3</i>
     */
    public static final int CMYKColorspace = 2;
    /**
     * Single Channel greyscale (non-linear) image <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:4</i>
     */
    public static final int GRAYColorspace = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:5</i>
     */
    public static final int HCLColorspace = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:6</i>
     */
    public static final int HCLpColorspace = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:7</i>
     */
    public static final int HSBColorspace = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:8</i>
     */
    public static final int HSIColorspace = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:9</i>
     */
    public static final int HSLColorspace = 8;
    /**
     * alias for HSB <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:10</i>
     */
    public static final int HSVColorspace = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:11</i>
     */
    public static final int HWBColorspace = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:12</i>
     */
    public static final int LabColorspace = 11;
    /**
     * alias for LCHuv <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:13</i>
     */
    public static final int LCHColorspace = 12;
    /**
     * Cylindrical (Polar) Lab <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:14</i>
     */
    public static final int LCHabColorspace = 13;
    /**
     * Cylindrical (Polar) Luv <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:15</i>
     */
    public static final int LCHuvColorspace = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:16</i>
     */
    public static final int LogColorspace = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:17</i>
     */
    public static final int LMSColorspace = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:18</i>
     */
    public static final int LuvColorspace = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:19</i>
     */
    public static final int OHTAColorspace = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:20</i>
     */
    public static final int Rec601YCbCrColorspace = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:21</i>
     */
    public static final int Rec709YCbCrColorspace = 20;
    /**
     * Linear RGB colorspace <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:22</i>
     */
    public static final int RGBColorspace = 21;
    /**
     * ??? <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:23</i>
     */
    public static final int scRGBColorspace = 22;
    /**
     * Default: non-linear sRGB colorspace <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:24</i>
     */
    public static final int sRGBColorspace = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:25</i>
     */
    public static final int TransparentColorspace = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:26</i>
     */
    public static final int xyYColorspace = 25;
    /**
     * IEEE Color Reference colorspace <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:27</i>
     */
    public static final int XYZColorspace = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:28</i>
     */
    public static final int YCbCrColorspace = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:29</i>
     */
    public static final int YCCColorspace = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:30</i>
     */
    public static final int YDbDrColorspace = 29;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:31</i>
     */
    public static final int YIQColorspace = 30;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:32</i>
     */
    public static final int YPbPrColorspace = 31;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:33</i>
     */
    public static final int YUVColorspace = 32;
    /**
     * Single Channel greyscale (linear) image <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:34</i>
     */
    public static final int LinearGRAYColorspace = 33;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:14</i> <br> enum
   * values
   */
  public static interface MetricType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:1</i>
     */
    public static final int UndefinedErrorMetric = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:2</i>
     */
    public static final int AbsoluteErrorMetric = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:3</i>
     */
    public static final int FuzzErrorMetric = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:4</i>
     */
    public static final int MeanAbsoluteErrorMetric = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:5</i>
     */
    public static final int MeanErrorPerPixelErrorMetric = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:6</i>
     */
    public static final int MeanSquaredErrorMetric = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:7</i>
     */
    public static final int NormalizedCrossCorrelationErrorMetric = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:8</i>
     */
    public static final int PeakAbsoluteErrorMetric = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:9</i>
     */
    public static final int PeakSignalToNoiseRatioErrorMetric = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:10</i>
     */
    public static final int PerceptualHashErrorMetric = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:11</i>
     */
    public static final int RootMeanSquaredErrorMetric = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:12</i>
     */
    public static final int StructuralSimilarityErrorMetric = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:13</i>
     */
    public static final int StructuralDissimilarityErrorMetric = 12;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:73</i> <br>
   * enum values
   */
  public static interface CompositeOperator {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:1</i>
     */
    public static final int UndefinedCompositeOp = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:2</i>
     */
    public static final int AlphaCompositeOp = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:3</i>
     */
    public static final int AtopCompositeOp = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:4</i>
     */
    public static final int BlendCompositeOp = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:5</i>
     */
    public static final int BlurCompositeOp = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:6</i>
     */
    public static final int BumpmapCompositeOp = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:7</i>
     */
    public static final int ChangeMaskCompositeOp = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:8</i>
     */
    public static final int ClearCompositeOp = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:9</i>
     */
    public static final int ColorBurnCompositeOp = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:10</i>
     */
    public static final int ColorDodgeCompositeOp = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:11</i>
     */
    public static final int ColorizeCompositeOp = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:12</i>
     */
    public static final int CopyBlackCompositeOp = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:13</i>
     */
    public static final int CopyBlueCompositeOp = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:14</i>
     */
    public static final int CopyCompositeOp = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:15</i>
     */
    public static final int CopyCyanCompositeOp = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:16</i>
     */
    public static final int CopyGreenCompositeOp = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:17</i>
     */
    public static final int CopyMagentaCompositeOp = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:18</i>
     */
    public static final int CopyAlphaCompositeOp = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:19</i>
     */
    public static final int CopyRedCompositeOp = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:20</i>
     */
    public static final int CopyYellowCompositeOp = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:21</i>
     */
    public static final int DarkenCompositeOp = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:22</i>
     */
    public static final int DarkenIntensityCompositeOp = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:23</i>
     */
    public static final int DifferenceCompositeOp = 22;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:24</i>
     */
    public static final int DisplaceCompositeOp = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:25</i>
     */
    public static final int DissolveCompositeOp = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:26</i>
     */
    public static final int DistortCompositeOp = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:27</i>
     */
    public static final int DivideDstCompositeOp = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:28</i>
     */
    public static final int DivideSrcCompositeOp = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:29</i>
     */
    public static final int DstAtopCompositeOp = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:30</i>
     */
    public static final int DstCompositeOp = 29;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:31</i>
     */
    public static final int DstInCompositeOp = 30;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:32</i>
     */
    public static final int DstOutCompositeOp = 31;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:33</i>
     */
    public static final int DstOverCompositeOp = 32;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:34</i>
     */
    public static final int ExclusionCompositeOp = 33;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:35</i>
     */
    public static final int HardLightCompositeOp = 34;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:36</i>
     */
    public static final int HardMixCompositeOp = 35;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:37</i>
     */
    public static final int HueCompositeOp = 36;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:38</i>
     */
    public static final int InCompositeOp = 37;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:39</i>
     */
    public static final int IntensityCompositeOp = 38;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:40</i>
     */
    public static final int LightenCompositeOp = 39;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:41</i>
     */
    public static final int LightenIntensityCompositeOp = 40;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:42</i>
     */
    public static final int LinearBurnCompositeOp = 41;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:43</i>
     */
    public static final int LinearDodgeCompositeOp = 42;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:44</i>
     */
    public static final int LinearLightCompositeOp = 43;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:45</i>
     */
    public static final int LuminizeCompositeOp = 44;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:46</i>
     */
    public static final int MathematicsCompositeOp = 45;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:47</i>
     */
    public static final int MinusDstCompositeOp = 46;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:48</i>
     */
    public static final int MinusSrcCompositeOp = 47;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:49</i>
     */
    public static final int ModulateCompositeOp = 48;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:50</i>
     */
    public static final int ModulusAddCompositeOp = 49;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:51</i>
     */
    public static final int ModulusSubtractCompositeOp = 50;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:52</i>
     */
    public static final int MultiplyCompositeOp = 51;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:53</i>
     */
    public static final int NoCompositeOp = 52;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:54</i>
     */
    public static final int OutCompositeOp = 53;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:55</i>
     */
    public static final int OverCompositeOp = 54;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:56</i>
     */
    public static final int OverlayCompositeOp = 55;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:57</i>
     */
    public static final int PegtopLightCompositeOp = 56;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:58</i>
     */
    public static final int PinLightCompositeOp = 57;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:59</i>
     */
    public static final int PlusCompositeOp = 58;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:60</i>
     */
    public static final int ReplaceCompositeOp = 59;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:61</i>
     */
    public static final int SaturateCompositeOp = 60;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:62</i>
     */
    public static final int ScreenCompositeOp = 61;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:63</i>
     */
    public static final int SoftLightCompositeOp = 62;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:64</i>
     */
    public static final int SrcAtopCompositeOp = 63;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:65</i>
     */
    public static final int SrcCompositeOp = 64;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:66</i>
     */
    public static final int SrcInCompositeOp = 65;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:67</i>
     */
    public static final int SrcOutCompositeOp = 66;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:68</i>
     */
    public static final int SrcOverCompositeOp = 67;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:69</i>
     */
    public static final int ThresholdCompositeOp = 68;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:70</i>
     */
    public static final int VividLightCompositeOp = 69;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:71</i>
     */
    public static final int XorCompositeOp = 70;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:72</i>
     */
    public static final int StereoCompositeOp = 71;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:23</i> <br> enum
   * values
   */
  public static interface CompressionType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:1</i>
     */
    public static final int UndefinedCompression = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:2</i>
     */
    public static final int B44ACompression = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:3</i>
     */
    public static final int B44Compression = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:4</i>
     */
    public static final int BZipCompression = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:5</i>
     */
    public static final int DXT1Compression = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:6</i>
     */
    public static final int DXT3Compression = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:7</i>
     */
    public static final int DXT5Compression = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:8</i>
     */
    public static final int FaxCompression = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:9</i>
     */
    public static final int Group4Compression = 8;
    /**
     * ISO/IEC std 11544 / ITU-T rec T.82 <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/compress.h:10</i>
     */
    public static final int JBIG1Compression = 9;
    /**
     * ISO/IEC std 14492 / ITU-T rec T.88 <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/compress.h:11</i>
     */
    public static final int JBIG2Compression = 10;
    /**
     * ISO/IEC std 15444-1 <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:12</i>
     */
    public static final int JPEG2000Compression = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:13</i>
     */
    public static final int JPEGCompression = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:14</i>
     */
    public static final int LosslessJPEGCompression = 13;
    /**
     * Lempel-Ziv-Markov chain algorithm <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:15</i>
     */
    public static final int LZMACompression = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:16</i>
     */
    public static final int LZWCompression = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:17</i>
     */
    public static final int NoCompression = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:18</i>
     */
    public static final int PizCompression = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:19</i>
     */
    public static final int Pxr24Compression = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:20</i>
     */
    public static final int RLECompression = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:21</i>
     */
    public static final int ZipCompression = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:22</i>
     */
    public static final int ZipSCompression = 21;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:29</i> <br> enum
   * values
   */
  public static interface DistortMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:9</i>
     */
    public static final int UndefinedDistortion = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:10</i>
     */
    public static final int AffineDistortion = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:11</i>
     */
    public static final int AffineProjectionDistortion = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:12</i>
     */
    public static final int ScaleRotateTranslateDistortion = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:13</i>
     */
    public static final int PerspectiveDistortion = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:14</i>
     */
    public static final int PerspectiveProjectionDistortion = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:15</i>
     */
    public static final int BilinearForwardDistortion = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:16</i>
     */
    public static final int BilinearDistortion = (int) SaMagickCore.DistortMethod.BilinearForwardDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:17</i>
     */
    public static final int BilinearReverseDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 1);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:18</i>
     */
    public static final int PolynomialDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 2);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:19</i>
     */
    public static final int ArcDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 3);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:20</i>
     */
    public static final int PolarDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 4);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:21</i>
     */
    public static final int DePolarDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 5);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:22</i>
     */
    public static final int Cylinder2PlaneDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 6);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:23</i>
     */
    public static final int Plane2CylinderDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 7);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:24</i>
     */
    public static final int BarrelDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 8);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:25</i>
     */
    public static final int BarrelInverseDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 9);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:26</i>
     */
    public static final int ShepardsDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 10);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:27</i>
     */
    public static final int ResizeDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 11);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:28</i>
     */
    public static final int SentinelDistortion = (
        (int) SaMagickCore.DistortMethod.BilinearForwardDistortion + 12);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:39</i> <br> enum
   * values
   */
  public static interface SparseColorMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:31</i>
     */
    public static final int UndefinedColorInterpolate = (int) SaMagickCore.DistortMethod.UndefinedDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:32</i>
     */
    public static final int BarycentricColorInterpolate = (int) SaMagickCore.DistortMethod.AffineDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:33</i>
     */
    public static final int BilinearColorInterpolate = (int) SaMagickCore.DistortMethod.BilinearReverseDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:34</i>
     */
    public static final int PolynomialColorInterpolate = (int) SaMagickCore.DistortMethod.PolynomialDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:35</i>
     */
    public static final int ShepardsColorInterpolate = (int) SaMagickCore.DistortMethod.ShepardsDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:36</i>
     */
    public static final int VoronoiColorInterpolate = (int) SaMagickCore.DistortMethod.SentinelDistortion;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:37</i>
     */
    public static final int InverseColorInterpolate = (
        (int) SaMagickCore.DistortMethod.SentinelDistortion + 1);
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:38</i>
     */
    public static final int ManhattanColorInterpolate = (
        (int) SaMagickCore.DistortMethod.SentinelDistortion + 2);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:5</i> <br> enum
   * values
   */
  public static interface AlignType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:1</i>
     */
    public static final int UndefinedAlign = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:2</i>
     */
    public static final int LeftAlign = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:3</i>
     */
    public static final int CenterAlign = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:4</i>
     */
    public static final int RightAlign = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:11</i> <br> enum
   * values
   */
  public static interface ClipPathUnits {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:7</i>
     */
    public static final int UndefinedPathUnits = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:8</i>
     */
    public static final int UserSpace = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:9</i>
     */
    public static final int UserSpaceOnUse = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:10</i>
     */
    public static final int ObjectBoundingBox = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:18</i> <br> enum
   * values
   */
  public static interface DecorationType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:13</i>
     */
    public static final int UndefinedDecoration = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:14</i>
     */
    public static final int NoDecoration = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:15</i>
     */
    public static final int UnderlineDecoration = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:16</i>
     */
    public static final int OverlineDecoration = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:17</i>
     */
    public static final int LineThroughDecoration = 4;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:23</i> <br> enum
   * values
   */
  public static interface DirectionType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:20</i>
     */
    public static final int UndefinedDirection = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:21</i>
     */
    public static final int RightToLeftDirection = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:22</i>
     */
    public static final int LeftToRightDirection = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:28</i> <br> enum
   * values
   */
  public static interface FillRule {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:25</i>
     */
    public static final int UndefinedRule = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:26</i>
     */
    public static final int EvenOddRule = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:27</i>
     */
    public static final int NonZeroRule = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:33</i> <br> enum
   * values
   */
  public static interface GradientType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:30</i>
     */
    public static final int UndefinedGradient = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:31</i>
     */
    public static final int LinearGradient = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:32</i>
     */
    public static final int RadialGradient = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:39</i> <br> enum
   * values
   */
  public static interface LineCap {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:35</i>
     */
    public static final int UndefinedCap = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:36</i>
     */
    public static final int ButtCap = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:37</i>
     */
    public static final int RoundCap = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:38</i>
     */
    public static final int SquareCap = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:45</i> <br> enum
   * values
   */
  public static interface LineJoin {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:41</i>
     */
    public static final int UndefinedJoin = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:42</i>
     */
    public static final int MiterJoin = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:43</i>
     */
    public static final int RoundJoin = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:44</i>
     */
    public static final int BevelJoin = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:53</i> <br> enum
   * values
   */
  public static interface PaintMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:47</i>
     */
    public static final int UndefinedMethod = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:48</i>
     */
    public static final int PointMethod = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:49</i>
     */
    public static final int ReplaceMethod = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:50</i>
     */
    public static final int FloodfillMethod = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:51</i>
     */
    public static final int FillToBorderMethod = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:52</i>
     */
    public static final int ResetMethod = 5;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:71</i> <br> enum
   * values
   */
  public static interface PrimitiveType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:55</i>
     */
    public static final int UndefinedPrimitive = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:56</i>
     */
    public static final int AlphaPrimitive = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:57</i>
     */
    public static final int ArcPrimitive = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:58</i>
     */
    public static final int BezierPrimitive = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:59</i>
     */
    public static final int CirclePrimitive = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:60</i>
     */
    public static final int ColorPrimitive = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:61</i>
     */
    public static final int EllipsePrimitive = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:62</i>
     */
    public static final int ImagePrimitive = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:63</i>
     */
    public static final int LinePrimitive = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:64</i>
     */
    public static final int PathPrimitive = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:65</i>
     */
    public static final int PointPrimitive = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:66</i>
     */
    public static final int PolygonPrimitive = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:67</i>
     */
    public static final int PolylinePrimitive = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:68</i>
     */
    public static final int RectanglePrimitive = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:69</i>
     */
    public static final int RoundRectanglePrimitive = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:70</i>
     */
    public static final int TextPrimitive = 15;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:75</i> <br> enum
   * values
   */
  public static interface ReferenceType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:73</i>
     */
    public static final int UndefinedReference = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:74</i>
     */
    public static final int GradientReference = 1;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:81</i> <br> enum
   * values
   */
  public static interface SpreadMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:77</i>
     */
    public static final int UndefinedSpread = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:78</i>
     */
    public static final int PadSpread = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:79</i>
     */
    public static final int ReflectSpread = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:80</i>
     */
    public static final int RepeatSpread = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:31</i> <br> enum
   * values
   */
  public static interface PreviewType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:1</i>
     */
    public static final int UndefinedPreview = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:2</i>
     */
    public static final int RotatePreview = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:3</i>
     */
    public static final int ShearPreview = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:4</i>
     */
    public static final int RollPreview = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:5</i>
     */
    public static final int HuePreview = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:6</i>
     */
    public static final int SaturationPreview = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:7</i>
     */
    public static final int BrightnessPreview = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:8</i>
     */
    public static final int GammaPreview = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:9</i>
     */
    public static final int SpiffPreview = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:10</i>
     */
    public static final int DullPreview = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:11</i>
     */
    public static final int GrayscalePreview = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:12</i>
     */
    public static final int QuantizePreview = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:13</i>
     */
    public static final int DespecklePreview = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:14</i>
     */
    public static final int ReduceNoisePreview = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:15</i>
     */
    public static final int AddNoisePreview = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:16</i>
     */
    public static final int SharpenPreview = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:17</i>
     */
    public static final int BlurPreview = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:18</i>
     */
    public static final int ThresholdPreview = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:19</i>
     */
    public static final int EdgeDetectPreview = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:20</i>
     */
    public static final int SpreadPreview = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:21</i>
     */
    public static final int SolarizePreview = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:22</i>
     */
    public static final int ShadePreview = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:23</i>
     */
    public static final int RaisePreview = 22;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:24</i>
     */
    public static final int SegmentPreview = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:25</i>
     */
    public static final int SwirlPreview = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:26</i>
     */
    public static final int ImplodePreview = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:27</i>
     */
    public static final int WavePreview = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:28</i>
     */
    public static final int OilPaintPreview = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:29</i>
     */
    public static final int CharcoalDrawingPreview = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:30</i>
     */
    public static final int JPEGPreview = 29;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:71</i> <br>
   * enum values
   */
  public static interface ExceptionType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:1</i>
     */
    public static final int UndefinedException = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:2</i>
     */
    public static final int WarningException = 300;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:3</i>
     */
    public static final int ResourceLimitWarning = 300;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:4</i>
     */
    public static final int TypeWarning = 305;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:5</i>
     */
    public static final int OptionWarning = 310;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:6</i>
     */
    public static final int DelegateWarning = 315;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:7</i>
     */
    public static final int MissingDelegateWarning = 320;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:8</i>
     */
    public static final int CorruptImageWarning = 325;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:9</i>
     */
    public static final int FileOpenWarning = 330;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:10</i>
     */
    public static final int BlobWarning = 335;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:11</i>
     */
    public static final int StreamWarning = 340;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:12</i>
     */
    public static final int CacheWarning = 345;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:13</i>
     */
    public static final int CoderWarning = 350;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:14</i>
     */
    public static final int FilterWarning = 352;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:15</i>
     */
    public static final int ModuleWarning = 355;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:16</i>
     */
    public static final int DrawWarning = 360;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:17</i>
     */
    public static final int ImageWarning = 365;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:18</i>
     */
    public static final int WandWarning = 370;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:19</i>
     */
    public static final int RandomWarning = 375;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:20</i>
     */
    public static final int XServerWarning = 380;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:21</i>
     */
    public static final int MonitorWarning = 385;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:22</i>
     */
    public static final int RegistryWarning = 390;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:23</i>
     */
    public static final int ConfigureWarning = 395;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:24</i>
     */
    public static final int PolicyWarning = 399;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:25</i>
     */
    public static final int ErrorException = 400;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:26</i>
     */
    public static final int ResourceLimitError = 400;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:27</i>
     */
    public static final int TypeError = 405;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:28</i>
     */
    public static final int OptionError = 410;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:29</i>
     */
    public static final int DelegateError = 415;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:30</i>
     */
    public static final int MissingDelegateError = 420;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:31</i>
     */
    public static final int CorruptImageError = 425;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:32</i>
     */
    public static final int FileOpenError = 430;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:33</i>
     */
    public static final int BlobError = 435;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:34</i>
     */
    public static final int StreamError = 440;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:35</i>
     */
    public static final int CacheError = 445;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:36</i>
     */
    public static final int CoderError = 450;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:37</i>
     */
    public static final int FilterError = 452;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:38</i>
     */
    public static final int ModuleError = 455;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:39</i>
     */
    public static final int DrawError = 460;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:40</i>
     */
    public static final int ImageError = 465;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:41</i>
     */
    public static final int WandError = 470;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:42</i>
     */
    public static final int RandomError = 475;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:43</i>
     */
    public static final int XServerError = 480;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:44</i>
     */
    public static final int MonitorError = 485;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:45</i>
     */
    public static final int RegistryError = 490;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:46</i>
     */
    public static final int ConfigureError = 495;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:47</i>
     */
    public static final int PolicyError = 499;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:48</i>
     */
    public static final int FatalErrorException = 700;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:49</i>
     */
    public static final int ResourceLimitFatalError = 700;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:50</i>
     */
    public static final int TypeFatalError = 705;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:51</i>
     */
    public static final int OptionFatalError = 710;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:52</i>
     */
    public static final int DelegateFatalError = 715;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:53</i>
     */
    public static final int MissingDelegateFatalError = 720;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:54</i>
     */
    public static final int CorruptImageFatalError = 725;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:55</i>
     */
    public static final int FileOpenFatalError = 730;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:56</i>
     */
    public static final int BlobFatalError = 735;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:57</i>
     */
    public static final int StreamFatalError = 740;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:58</i>
     */
    public static final int CacheFatalError = 745;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:59</i>
     */
    public static final int CoderFatalError = 750;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:60</i>
     */
    public static final int FilterFatalError = 752;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:61</i>
     */
    public static final int ModuleFatalError = 755;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:62</i>
     */
    public static final int DrawFatalError = 760;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:63</i>
     */
    public static final int ImageFatalError = 765;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:64</i>
     */
    public static final int WandFatalError = 770;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:65</i>
     */
    public static final int RandomFatalError = 775;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:66</i>
     */
    public static final int XServerFatalError = 780;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:67</i>
     */
    public static final int MonitorFatalError = 785;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:68</i>
     */
    public static final int RegistryFatalError = 790;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:69</i>
     */
    public static final int ConfigureFatalError = 795;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:70</i>
     */
    public static final int PolicyFatalError = 799;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:9</i> <br> enum
   * values
   */
  public static interface ComplexOperator {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:1</i>
     */
    public static final int UndefinedComplexOperator = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:2</i>
     */
    public static final int AddComplexOperator = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:3</i>
     */
    public static final int ConjugateComplexOperator = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:4</i>
     */
    public static final int DivideComplexOperator = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:5</i>
     */
    public static final int MagnitudePhaseComplexOperator = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:6</i>
     */
    public static final int MultiplyComplexOperator = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:7</i>
     */
    public static final int RealImaginaryComplexOperator = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:8</i>
     */
    public static final int SubtractComplexOperator = 7;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:9</i> <br> enum
   * values
   */
  public static interface NoiseType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:1</i>
     */
    public static final int UndefinedNoise = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:2</i>
     */
    public static final int UniformNoise = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:3</i>
     */
    public static final int GaussianNoise = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:4</i>
     */
    public static final int MultiplicativeGaussianNoise = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:5</i>
     */
    public static final int ImpulseNoise = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:6</i>
     */
    public static final int LaplacianNoise = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:7</i>
     */
    public static final int PoissonNoise = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:8</i>
     */
    public static final int RandomNoise = 7;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:28</i> <br> enum
   * values
   */
  public static interface GeometryFlags {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:1</i>
     */
    public static final int NoValue = 0x0000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:2</i>
     */
    public static final int XValue = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:3</i>
     */
    public static final int XiValue = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:4</i>
     */
    public static final int YValue = 0x0002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:5</i>
     */
    public static final int PsiValue = 0x0002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:6</i>
     */
    public static final int WidthValue = 0x0004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:7</i>
     */
    public static final int RhoValue = 0x0004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:8</i>
     */
    public static final int HeightValue = 0x0008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:9</i>
     */
    public static final int SigmaValue = 0x0008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:10</i>
     */
    public static final int ChiValue = 0x0010;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:11</i>
     */
    public static final int XiNegative = 0x0020;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:12</i>
     */
    public static final int XNegative = 0x0020;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:13</i>
     */
    public static final int PsiNegative = 0x0040;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:14</i>
     */
    public static final int YNegative = 0x0040;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:15</i>
     */
    public static final int ChiNegative = 0x0080;
    /**
     * '%'  percentage of something <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:16</i>
     */
    public static final int PercentValue = 0x1000;
    /**
     * '!'  resize no-aspect - special use flag <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:17</i>
     */
    public static final int AspectValue = 0x2000;
    /**
     * '!'  ScaleKernelValue() in morphology.c <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:18</i>
     */
    public static final int NormalizeValue = 0x2000;
    /**
     * '<'  resize smaller - special use flag <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:19</i>
     */
    public static final int LessValue = 0x4000;
    /**
     * '>'  resize larger - spacial use flag <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:20</i>
     */
    public static final int GreaterValue = 0x8000;
    /**
     * '^'  special handling needed <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:21</i>
     */
    public static final int MinimumValue = 0x10000;
    /**
     * '^' see ScaleKernelValue() <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:22</i>
     */
    public static final int CorrelateNormalizeValue = 0x10000;
    /**
     * '@'  resize to area - special use flag <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:23</i>
     */
    public static final int AreaValue = 0x20000;
    /**
     * '.'  floating point numbers found <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:24</i>
     */
    public static final int DecimalValue = 0x40000;
    /**
     * 'x'  separator found <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:25</i>
     */
    public static final int SeparatorValue = 0x80000;
    /**
     * '~'  special handling needed <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:26</i>
     */
    public static final int AspectRatioValue = 0x100000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:27</i>
     */
    public static final int AllValues = 0x7fffffff;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:41</i> <br> enum
   * values
   */
  public static interface GravityType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:30</i>
     */
    public static final int UndefinedGravity = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:31</i>
     */
    public static final int ForgetGravity = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:32</i>
     */
    public static final int NorthWestGravity = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:33</i>
     */
    public static final int NorthGravity = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:34</i>
     */
    public static final int NorthEastGravity = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:35</i>
     */
    public static final int WestGravity = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:36</i>
     */
    public static final int CenterGravity = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:37</i>
     */
    public static final int EastGravity = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:38</i>
     */
    public static final int SouthWestGravity = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:39</i>
     */
    public static final int SouthGravity = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:40</i>
     */
    public static final int SouthEastGravity = 9;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:17</i> <br> enum
   * values
   */
  public static interface AlphaChannelOption {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:1</i>
     */
    public static final int UndefinedAlphaChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:2</i>
     */
    public static final int ActivateAlphaChannel = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:3</i>
     */
    public static final int AssociateAlphaChannel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:4</i>
     */
    public static final int BackgroundAlphaChannel = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:5</i>
     */
    public static final int CopyAlphaChannel = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:6</i>
     */
    public static final int DeactivateAlphaChannel = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:7</i>
     */
    public static final int DiscreteAlphaChannel = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:8</i>
     */
    public static final int DisassociateAlphaChannel = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:9</i>
     */
    public static final int ExtractAlphaChannel = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:10</i>
     */
    public static final int OffAlphaChannel = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:11</i>
     */
    public static final int OnAlphaChannel = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:12</i>
     */
    public static final int OpaqueAlphaChannel = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:13</i>
     */
    public static final int RemoveAlphaChannel = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:14</i>
     */
    public static final int SetAlphaChannel = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:15</i>
     */
    public static final int ShapeAlphaChannel = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:16</i>
     */
    public static final int TransparentAlphaChannel = 15;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:31</i> <br> enum
   * values
   */
  public static interface ImageType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:19</i>
     */
    public static final int UndefinedType = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:20</i>
     */
    public static final int BilevelType = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:21</i>
     */
    public static final int GrayscaleType = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:22</i>
     */
    public static final int GrayscaleAlphaType = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:23</i>
     */
    public static final int PaletteType = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:24</i>
     */
    public static final int PaletteAlphaType = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:25</i>
     */
    public static final int TrueColorType = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:26</i>
     */
    public static final int TrueColorAlphaType = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:27</i>
     */
    public static final int ColorSeparationType = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:28</i>
     */
    public static final int ColorSeparationAlphaType = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:29</i>
     */
    public static final int OptimizeType = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:30</i>
     */
    public static final int PaletteBilevelAlphaType = 11;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:41</i> <br> enum
   * values
   */
  public static interface InterlaceType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:33</i>
     */
    public static final int UndefinedInterlace = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:34</i>
     */
    public static final int NoInterlace = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:35</i>
     */
    public static final int LineInterlace = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:36</i>
     */
    public static final int PlaneInterlace = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:37</i>
     */
    public static final int PartitionInterlace = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:38</i>
     */
    public static final int GIFInterlace = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:39</i>
     */
    public static final int JPEGInterlace = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:40</i>
     */
    public static final int PNGInterlace = 7;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:52</i> <br> enum
   * values
   */
  public static interface OrientationType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:43</i>
     */
    public static final int UndefinedOrientation = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:44</i>
     */
    public static final int TopLeftOrientation = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:45</i>
     */
    public static final int TopRightOrientation = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:46</i>
     */
    public static final int BottomRightOrientation = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:47</i>
     */
    public static final int BottomLeftOrientation = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:48</i>
     */
    public static final int LeftTopOrientation = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:49</i>
     */
    public static final int RightTopOrientation = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:50</i>
     */
    public static final int RightBottomOrientation = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:51</i>
     */
    public static final int LeftBottomOrientation = 8;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:57</i> <br> enum
   * values
   */
  public static interface ResolutionType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:54</i>
     */
    public static final int UndefinedResolution = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:55</i>
     */
    public static final int PixelsPerInchResolution = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:56</i>
     */
    public static final int PixelsPerCentimeterResolution = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:75</i> <br> enum
   * values
   */
  public static interface TransmitType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:70</i>
     */
    public static final int UndefinedTransmitType = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:71</i>
     */
    public static final int FileTransmitType = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:72</i>
     */
    public static final int BlobTransmitType = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:73</i>
     */
    public static final int StreamTransmitType = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:74</i>
     */
    public static final int ImageTransmitType = 4;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:6</i> <br> enum
   * values
   */
  public static interface DisposeType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:1</i>
     */
    public static final int UnrecognizedDispose = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:2</i>
     */
    public static final int UndefinedDispose = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:3</i>
     */
    public static final int NoneDispose = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:4</i>
     */
    public static final int BackgroundDispose = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:5</i>
     */
    public static final int PreviousDispose = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:25</i> <br> enum
   * values
   */
  public static interface LayerMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:8</i>
     */
    public static final int UndefinedLayer = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:9</i>
     */
    public static final int CoalesceLayer = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:10</i>
     */
    public static final int CompareAnyLayer = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:11</i>
     */
    public static final int CompareClearLayer = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:12</i>
     */
    public static final int CompareOverlayLayer = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:13</i>
     */
    public static final int DisposeLayer = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:14</i>
     */
    public static final int OptimizeLayer = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:15</i>
     */
    public static final int OptimizeImageLayer = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:16</i>
     */
    public static final int OptimizePlusLayer = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:17</i>
     */
    public static final int OptimizeTransLayer = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:18</i>
     */
    public static final int RemoveDupsLayer = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:19</i>
     */
    public static final int RemoveZeroLayer = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:20</i>
     */
    public static final int CompositeLayer = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:21</i>
     */
    public static final int MergeLayer = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:22</i>
     */
    public static final int FlattenLayer = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:23</i>
     */
    public static final int MosaicLayer = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:24</i>
     */
    public static final int TrimBoundsLayer = 16;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:25</i> <br> enum
   * values
   */
  public static interface LogEventType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:1</i>
     */
    public static final int UndefinedEvents = 0x000000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:2</i>
     */
    public static final int NoEvents = 0x00000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:3</i>
     */
    public static final int AccelerateEvent = 0x00001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:4</i>
     */
    public static final int AnnotateEvent = 0x00002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:5</i>
     */
    public static final int BlobEvent = 0x00004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:6</i>
     */
    public static final int CacheEvent = 0x00008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:7</i>
     */
    public static final int CoderEvent = 0x00010;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:8</i>
     */
    public static final int ConfigureEvent = 0x00020;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:9</i>
     */
    public static final int DeprecateEvent = 0x00040;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:10</i>
     */
    public static final int DrawEvent = 0x00080;
    /**
     * Log Errors and Warnings immediately <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/log.h:11</i>
     */
    public static final int ExceptionEvent = 0x00100;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:12</i>
     */
    public static final int ImageEvent = 0x00200;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:13</i>
     */
    public static final int LocaleEvent = 0x00400;
    /**
     * Loding of coder and filter modules <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/log.h:14</i>
     */
    public static final int ModuleEvent = 0x00800;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:15</i>
     */
    public static final int PixelEvent = 0x01000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:16</i>
     */
    public static final int PolicyEvent = 0x02000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:17</i>
     */
    public static final int ResourceEvent = 0x04000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:18</i>
     */
    public static final int TraceEvent = 0x08000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:19</i>
     */
    public static final int TransformEvent = 0x10000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:20</i>
     */
    public static final int UserEvent = 0x20000;
    /**
     * Log MagickWand <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:21</i>
     */
    public static final int WandEvent = 0x40000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:22</i>
     */
    public static final int X11Event = 0x80000;
    /**
     * Log Command Processing (CLI & Scripts) <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/log.h:23</i>
     */
    public static final int CommandEvent = 0x100000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:24</i>
     */
    public static final int AllEvents = 0x7fffffff;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:4</i> <br> enum
   * values
   */
  public static interface MagickFormatType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:1</i>
     */
    public static final int UndefinedFormatType = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:2</i>
     */
    public static final int ImplicitFormatType = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:3</i>
     */
    public static final int ExplicitFormatType = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:18</i> <br> enum
   * values
   */
  public static interface MagickInfoFlag {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:6</i>
     */
    public static final int CoderNoFlag = 0x0000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:7</i>
     */
    public static final int CoderAdjoinFlag = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:8</i>
     */
    public static final int CoderBlobSupportFlag = 0x0002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:9</i>
     */
    public static final int CoderDecoderThreadSupportFlag = 0x0004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:10</i>
     */
    public static final int CoderEncoderThreadSupportFlag = 0x0008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:11</i>
     */
    public static final int CoderEndianSupportFlag = 0x0010;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:12</i>
     */
    public static final int CoderRawSupportFlag = 0x0020;
    /**
     * deprecated <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:13</i>
     */
    public static final int CoderSeekableStreamFlag = 0x0040;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:14</i>
     */
    public static final int CoderStealthFlag = 0x0080;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:15</i>
     */
    public static final int CoderUseExtensionFlag = 0x0100;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:16</i>
     */
    public static final int CoderDecoderSeekableStreamFlag = 0x0200;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:17</i>
     */
    public static final int CoderEncoderSeekableStreamFlag = 0x0400;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:14</i> <br>
   * enum values
   */
  public static interface ClassType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:11</i>
     */
    public static final int UndefinedClass = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:12</i>
     */
    public static final int DirectClass = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:13</i>
     */
    public static final int PseudoClass = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:18</i> <br>
   * enum values
   */
  public static interface MagickBooleanType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:16</i>
     */
    public static final int MagickFalse = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h:17</i>
     */
    public static final int MagickTrue = 1;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:4</i> <br> enum
   * values
   */
  public static interface MagickModuleType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:2</i>
     */
    public static final int MagickImageCoderModule = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:3</i>
     */
    public static final int MagickImageFilterModule = 1;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:6</i> <br> enum
   * values
   */
  public static interface MontageMode {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:2</i>
     */
    public static final int UndefinedMode = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:3</i>
     */
    public static final int FrameMode = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:4</i>
     */
    public static final int UnframeMode = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:5</i>
     */
    public static final int ConcatenateMode = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:40</i> <br>
   * enum values
   */
  public static interface KernelInfoType {

    /**
     * equivalent to UnityKernel <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:2</i>
     */
    public static final int UndefinedKernel = 0;
    /**
     * The no-op or 'original image' kernel <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:3</i>
     */
    public static final int UnityKernel = 1;
    /**
     * Convolution Kernels, Gaussian Based <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:4</i>
     */
    public static final int GaussianKernel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:5</i>
     */
    public static final int DoGKernel = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:6</i>
     */
    public static final int LoGKernel = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:7</i>
     */
    public static final int BlurKernel = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:8</i>
     */
    public static final int CometKernel = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:9</i>
     */
    public static final int BinomialKernel = 7;
    /**
     * Convolution Kernels, by Name <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:10</i>
     */
    public static final int LaplacianKernel = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:11</i>
     */
    public static final int SobelKernel = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:12</i>
     */
    public static final int FreiChenKernel = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:13</i>
     */
    public static final int RobertsKernel = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:14</i>
     */
    public static final int PrewittKernel = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:15</i>
     */
    public static final int CompassKernel = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:16</i>
     */
    public static final int KirschKernel = 14;
    /**
     * Shape Kernels <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:17</i>
     */
    public static final int DiamondKernel = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:18</i>
     */
    public static final int SquareKernel = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:19</i>
     */
    public static final int RectangleKernel = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:20</i>
     */
    public static final int OctagonKernel = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:21</i>
     */
    public static final int DiskKernel = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:22</i>
     */
    public static final int PlusKernel = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:23</i>
     */
    public static final int CrossKernel = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:24</i>
     */
    public static final int RingKernel = 22;
    /**
     * Hit And Miss Kernels <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:25</i>
     */
    public static final int PeaksKernel = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:26</i>
     */
    public static final int EdgesKernel = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:27</i>
     */
    public static final int CornersKernel = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:28</i>
     */
    public static final int DiagonalsKernel = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:29</i>
     */
    public static final int LineEndsKernel = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:30</i>
     */
    public static final int LineJunctionsKernel = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:31</i>
     */
    public static final int RidgesKernel = 29;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:32</i>
     */
    public static final int ConvexHullKernel = 30;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:33</i>
     */
    public static final int ThinSEKernel = 31;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:34</i>
     */
    public static final int SkeletonKernel = 32;
    /**
     * Distance Measuring Kernels <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:35</i>
     */
    public static final int ChebyshevKernel = 33;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:36</i>
     */
    public static final int ManhattanKernel = 34;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:37</i>
     */
    public static final int OctagonalKernel = 35;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:38</i>
     */
    public static final int EuclideanKernel = 36;
    /**
     * User Specified Kernel Array <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:39</i>
     */
    public static final int UserDefinedKernel = 37;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:71</i> <br>
   * enum values
   */
  public static interface MorphologyMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:42</i>
     */
    public static final int UndefinedMorphology = 0;
    /**
     * Convolve / Correlate weighted sums <br> Weighted Sum with reflected kernel <br> <i>native
     * declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:44</i>
     */
    public static final int ConvolveMorphology = 1;
    /**
     * Weighted Sum using a sliding window <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:45</i>
     */
    public static final int CorrelateMorphology = 2;
    /**
     * Low-level Morphology methods <br> Minimum Value in Neighbourhood <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:47</i>
     */
    public static final int ErodeMorphology = 3;
    /**
     * Maximum Value in Neighbourhood <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:48</i>
     */
    public static final int DilateMorphology = 4;
    /**
     * Pixel Pick using GreyScale Erode <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:49</i>
     */
    public static final int ErodeIntensityMorphology = 5;
    /**
     * Pixel Pick using GreyScale Dialate <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:50</i>
     */
    public static final int DilateIntensityMorphology = 6;
    /**
     * Add Kernel Value, take Minimum <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:51</i>
     */
    public static final int IterativeDistanceMorphology = 7;
    /**
     * Second-level Morphology methods <br> Dilate then Erode <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:53</i>
     */
    public static final int OpenMorphology = 8;
    /**
     * Erode then Dilate <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:54</i>
     */
    public static final int CloseMorphology = 9;
    /**
     * Pixel Pick using GreyScale Open <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:55</i>
     */
    public static final int OpenIntensityMorphology = 10;
    /**
     * Pixel Pick using GreyScale Close <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:56</i>
     */
    public static final int CloseIntensityMorphology = 11;
    /**
     * Open then Close <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:57</i>
     */
    public static final int SmoothMorphology = 12;
    /**
     * Difference Morphology methods <br> Dilate difference from Original <br> <i>native declaration
     * : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:59</i>
     */
    public static final int EdgeInMorphology = 13;
    /**
     * Erode difference from Original <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:60</i>
     */
    public static final int EdgeOutMorphology = 14;
    /**
     * Dilate difference with Erode <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:61</i>
     */
    public static final int EdgeMorphology = 15;
    /**
     * Close difference from Original <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:62</i>
     */
    public static final int TopHatMorphology = 16;
    /**
     * Open difference from Original <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:63</i>
     */
    public static final int BottomHatMorphology = 17;
    /**
     * Recursive Morphology methods <br> Foreground/Background pattern matching <br> <i>native
     * declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:65</i>
     */
    public static final int HitAndMissMorphology = 18;
    /**
     * Remove matching pixels from image <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:66</i>
     */
    public static final int ThinningMorphology = 19;
    /**
     * Add matching pixels from image <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:67</i>
     */
    public static final int ThickenMorphology = 20;
    /**
     * Directly Applied Morphology methods <br> Add Kernel Value, take Minimum <br> <i>native
     * declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:69</i>
     */
    public static final int DistanceMorphology = 21;
    /**
     * Distance matte channel copy nearest color <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:70</i>
     */
    public static final int VoronoiMorphology = 22;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:5</i> <br> enum
   * values
   */
  public static interface MagickCLDeviceType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:2</i>
     */
    public static final int UndefinedCLDeviceType = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:3</i>
     */
    public static final int CpuCLDeviceType = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:4</i>
     */
    public static final int GpuCLDeviceType = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:83</i> <br> enum
   * values
   */
  public static interface CommandOption {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:2</i>
     */
    public static final int MagickUndefinedOptions = -1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:3</i>
     */
    public static final int MagickAlignOptions = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:4</i>
     */
    public static final int MagickAlphaChannelOptions = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:5</i>
     */
    public static final int MagickBooleanOptions = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:6</i>
     */
    public static final int MagickCacheOptions = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:7</i>
     */
    public static final int MagickChannelOptions = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:8</i>
     */
    public static final int MagickClassOptions = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:9</i>
     */
    public static final int MagickClipPathOptions = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:10</i>
     */
    public static final int MagickCoderOptions = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:11</i>
     */
    public static final int MagickColorOptions = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:12</i>
     */
    public static final int MagickColorspaceOptions = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:13</i>
     */
    public static final int MagickCommandOptions = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:14</i>
     */
    public static final int MagickComplexOptions = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:15</i>
     */
    public static final int MagickComplianceOptions = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:16</i>
     */
    public static final int MagickComposeOptions = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:17</i>
     */
    public static final int MagickCompressOptions = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:18</i>
     */
    public static final int MagickConfigureOptions = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:19</i>
     */
    public static final int MagickDataTypeOptions = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:20</i>
     */
    public static final int MagickDebugOptions = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:21</i>
     */
    public static final int MagickDecorateOptions = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:22</i>
     */
    public static final int MagickDelegateOptions = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:23</i>
     */
    public static final int MagickDirectionOptions = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:24</i>
     */
    public static final int MagickDisposeOptions = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:25</i>
     */
    public static final int MagickDistortOptions = 22;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:26</i>
     */
    public static final int MagickDitherOptions = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:27</i>
     */
    public static final int MagickEndianOptions = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:28</i>
     */
    public static final int MagickEvaluateOptions = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:29</i>
     */
    public static final int MagickFillRuleOptions = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:30</i>
     */
    public static final int MagickFilterOptions = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:31</i>
     */
    public static final int MagickFontOptions = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:32</i>
     */
    public static final int MagickFontsOptions = 29;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:33</i>
     */
    public static final int MagickFormatOptions = 30;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:34</i>
     */
    public static final int MagickFunctionOptions = 31;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:35</i>
     */
    public static final int MagickGradientOptions = 32;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:36</i>
     */
    public static final int MagickGravityOptions = 33;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:37</i>
     */
    public static final int MagickIntensityOptions = 34;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:38</i>
     */
    public static final int MagickIntentOptions = 35;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:39</i>
     */
    public static final int MagickInterlaceOptions = 36;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:40</i>
     */
    public static final int MagickInterpolateOptions = 37;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:41</i>
     */
    public static final int MagickKernelOptions = 38;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:42</i>
     */
    public static final int MagickLayerOptions = 39;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:43</i>
     */
    public static final int MagickLineCapOptions = 40;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:44</i>
     */
    public static final int MagickLineJoinOptions = 41;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:45</i>
     */
    public static final int MagickListOptions = 42;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:46</i>
     */
    public static final int MagickLocaleOptions = 43;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:47</i>
     */
    public static final int MagickLogEventOptions = 44;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:48</i>
     */
    public static final int MagickLogOptions = 45;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:49</i>
     */
    public static final int MagickMagicOptions = 46;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:50</i>
     */
    public static final int MagickMethodOptions = 47;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:51</i>
     */
    public static final int MagickMetricOptions = 48;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:52</i>
     */
    public static final int MagickMimeOptions = 49;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:53</i>
     */
    public static final int MagickModeOptions = 50;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:54</i>
     */
    public static final int MagickModuleOptions = 51;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:55</i>
     */
    public static final int MagickMorphologyOptions = 52;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:56</i>
     */
    public static final int MagickNoiseOptions = 53;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:57</i>
     */
    public static final int MagickOrientationOptions = 54;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:58</i>
     */
    public static final int MagickPixelChannelOptions = 55;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:59</i>
     */
    public static final int MagickPixelIntensityOptions = 56;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:60</i>
     */
    public static final int MagickPixelMaskOptions = 57;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:61</i>
     */
    public static final int MagickPixelTraitOptions = 58;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:62</i>
     */
    public static final int MagickPolicyOptions = 59;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:63</i>
     */
    public static final int MagickPolicyDomainOptions = 60;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:64</i>
     */
    public static final int MagickPolicyRightsOptions = 61;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:65</i>
     */
    public static final int MagickPreviewOptions = 62;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:66</i>
     */
    public static final int MagickPrimitiveOptions = 63;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:67</i>
     */
    public static final int MagickQuantumFormatOptions = 64;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:68</i>
     */
    public static final int MagickResolutionOptions = 65;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:69</i>
     */
    public static final int MagickResourceOptions = 66;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:70</i>
     */
    public static final int MagickSparseColorOptions = 67;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:71</i>
     */
    public static final int MagickStatisticOptions = 68;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:72</i>
     */
    public static final int MagickStorageOptions = 69;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:73</i>
     */
    public static final int MagickStretchOptions = 70;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:74</i>
     */
    public static final int MagickStyleOptions = 71;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:75</i>
     */
    public static final int MagickThresholdOptions = 72;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:76</i>
     */
    public static final int MagickTypeOptions = 73;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:77</i>
     */
    public static final int MagickValidateOptions = 74;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:78</i>
     */
    public static final int MagickVirtualPixelOptions = 75;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:79</i>
     */
    public static final int MagickWeightOptions = 76;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:80</i>
     */
    public static final int MagickAutoThresholdOptions = 77;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:81</i>
     */
    public static final int MagickToolOptions = 78;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:82</i>
     */
    public static final int MagickCLIOptions = 79;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:99</i> <br> enum
   * values
   */
  public static interface ValidateType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:85</i>
     */
    public static final int UndefinedValidate = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:86</i>
     */
    public static final int NoValidate = 0x00000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:87</i>
     */
    public static final int ColorspaceValidate = 0x00001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:88</i>
     */
    public static final int CompareValidate = 0x00002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:89</i>
     */
    public static final int CompositeValidate = 0x00004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:90</i>
     */
    public static final int ConvertValidate = 0x00008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:91</i>
     */
    public static final int FormatsDiskValidate = 0x00010;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:92</i>
     */
    public static final int FormatsMapValidate = 0x00020;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:93</i>
     */
    public static final int FormatsMemoryValidate = 0x00040;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:94</i>
     */
    public static final int IdentifyValidate = 0x00080;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:95</i>
     */
    public static final int ImportExportValidate = 0x00100;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:96</i>
     */
    public static final int MontageValidate = 0x00200;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:97</i>
     */
    public static final int StreamValidate = 0x00400;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:98</i>
     */
    public static final int AllValidate = 0x7fffffff;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:123</i> <br> enum
   * values
   */
  public static interface CommandOptionFlags {

    /**
     * option flag is not in use <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:106</i>
     */
    public static final int UndefinedOptionFlag = 0x0000;
    /**
     * Setting stored in ImageInfo <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:107</i>
     */
    public static final int ImageInfoOptionFlag = 0x0001;
    /**
     * Setting stored in DrawInfo <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:108</i>
     */
    public static final int DrawInfoOptionFlag = 0x0002;
    /**
     * Setting stored in QuantizeInfo <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:109</i>
     */
    public static final int QuantizeInfoOptionFlag = 0x0004;
    /**
     * Global Setting or Control <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:110</i>
     */
    public static final int GlobalOptionFlag = 0x0008;
    /**
     * mask any setting option <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:111</i>
     */
    public static final int SettingOptionFlags = 0x000F;
    /**
     * Images not required operator <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:112</i>
     */
    public static final int NoImageOperatorFlag = 0x0010;
    /**
     * Simple Image processing operator <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:113</i>
     */
    public static final int SimpleOperatorFlag = 0x0020;
    /**
     * Multi-Image processing operator <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:114</i>
     */
    public static final int ListOperatorFlag = 0x0040;
    /**
     * MagickCommandGenesis() Only Option <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/option.h:115</i>
     */
    public static final int GenesisOptionFlag = 0x0080;
    /**
     * Operator with Special Requirements <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/option.h:116</i>
     */
    public static final int SpecialOptionFlag = 0x0100;
    /**
     * Always Interpret escapes in Args <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:117</i>
     */
    public static final int AlwaysInterpretArgsFlag = 0x0400;
    /**
     * Never Interpret escapes in Args <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:118</i>
     */
    public static final int NeverInterpretArgsFlag = 0x0800;
    /**
     * Option not used by Magick Command <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:119</i>
     */
    public static final int NonMagickOptionFlag = 0x1000;
    /**
     * Convert operation seq firing point <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/option.h:120</i>
     */
    public static final int FireOptionFlag = 0x2000;
    /**
     * Deprecate option (no code) <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:121</i>
     */
    public static final int DeprecateOptionFlag = 0x4000;
    /**
     * Replaced Option (but still works) <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:122</i>
     */
    public static final int ReplacedOptionFlag = 0x8800;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:26</i> <br> enum
   * values
   */
  public static interface ChannelType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:3</i>
     */
    public static final int UndefinedChannel = 0x0000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:4</i>
     */
    public static final int RedChannel = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:5</i>
     */
    public static final int GrayChannel = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:6</i>
     */
    public static final int CyanChannel = 0x0001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:7</i>
     */
    public static final int GreenChannel = 0x0002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:8</i>
     */
    public static final int MagentaChannel = 0x0002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:9</i>
     */
    public static final int BlueChannel = 0x0004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:10</i>
     */
    public static final int YellowChannel = 0x0004;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:11</i>
     */
    public static final int BlackChannel = 0x0008;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:12</i>
     */
    public static final int AlphaChannel = 0x0010;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:13</i>
     */
    public static final int OpacityChannel = 0x0010;
    /**
     * Color Index Table? <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:14</i>
     */
    public static final int IndexChannel = 0x0020;
    /**
     * Pixel is Not Readable? <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:15</i>
     */
    public static final int ReadMaskChannel = 0x0040;
    /**
     * Pixel is Write Protected? <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:16</i>
     */
    public static final int WriteMaskChannel = 0x0080;
    /**
     * not used <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:17</i>
     */
    public static final int MetaChannel = 0x0100;
    /**
     * SVG mask <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:18</i>
     */
    public static final int CompositeMaskChannel = 0x0200;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:19</i>
     */
    public static final int CompositeChannels = 0x001F;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:20</i>
     */
    public static final int AllChannels = 0x7ffffff;
    /**
     * extract actual alpha channel from opacity <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:21</i>
     */
    public static final int TrueAlphaChannel = 0x0100;
    /**
     * set alpha from grayscale mask in RGB <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:22</i>
     */
    public static final int RGBChannels = 0x0200;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:23</i>
     */
    public static final int GrayChannels = 0x0400;
    /**
     * channels modified as a single unit <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:24</i>
     */
    public static final int SyncChannels = 0x20000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:25</i>
     */
    public static final int DefaultChannels = (int) SaMagickCore.ChannelType.AllChannels;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:53</i> <br> enum
   * values
   */
  public static interface PixelChannel {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:28</i>
     */
    public static final int UndefinedPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:29</i>
     */
    public static final int RedPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:30</i>
     */
    public static final int CyanPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:31</i>
     */
    public static final int GrayPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:32</i>
     */
    public static final int LPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:33</i>
     */
    public static final int LabelPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:34</i>
     */
    public static final int YPixelChannel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:35</i>
     */
    public static final int aPixelChannel = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:36</i>
     */
    public static final int GreenPixelChannel = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:37</i>
     */
    public static final int MagentaPixelChannel = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:38</i>
     */
    public static final int CbPixelChannel = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:39</i>
     */
    public static final int bPixelChannel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:40</i>
     */
    public static final int BluePixelChannel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:41</i>
     */
    public static final int YellowPixelChannel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:42</i>
     */
    public static final int CrPixelChannel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:43</i>
     */
    public static final int BlackPixelChannel = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:44</i>
     */
    public static final int AlphaPixelChannel = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:45</i>
     */
    public static final int IndexPixelChannel = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:46</i>
     */
    public static final int ReadMaskPixelChannel = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:47</i>
     */
    public static final int WriteMaskPixelChannel = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:48</i>
     */
    public static final int MetaPixelChannel = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:49</i>
     */
    public static final int CompositeMaskPixelChannel = 9;
    /**
     * ???? <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:50</i>
     */
    public static final int IntensityPixelChannel = 32;
    /**
     * ???? <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:51</i>
     */
    public static final int CompositePixelChannel = 32;
    /**
     * not a real channel <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:52</i>
     */
    public static final int SyncPixelChannel = 32 + 1;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:65</i> <br> enum
   * values
   */
  public static interface PixelIntensityMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:55</i>
     */
    public static final int UndefinedPixelIntensityMethod = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:56</i>
     */
    public static final int AveragePixelIntensityMethod = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:57</i>
     */
    public static final int BrightnessPixelIntensityMethod = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:58</i>
     */
    public static final int LightnessPixelIntensityMethod = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:59</i>
     */
    public static final int MSPixelIntensityMethod = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:60</i>
     */
    public static final int Rec601LumaPixelIntensityMethod = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:61</i>
     */
    public static final int Rec601LuminancePixelIntensityMethod = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:62</i>
     */
    public static final int Rec709LumaPixelIntensityMethod = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:63</i>
     */
    public static final int Rec709LuminancePixelIntensityMethod = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:64</i>
     */
    public static final int RMSPixelIntensityMethod = 9;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:79</i> <br> enum
   * values
   */
  public static interface PixelInterpolateMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:67</i>
     */
    public static final int UndefinedInterpolatePixel = 0;
    /**
     * Average 4 nearest neighbours <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:68</i>
     */
    public static final int AverageInterpolatePixel = 1;
    /**
     * Average 9 nearest neighbours <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:69</i>
     */
    public static final int Average9InterpolatePixel = 2;
    /**
     * Average 16 nearest neighbours <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:70</i>
     */
    public static final int Average16InterpolatePixel = 3;
    /**
     * Just return background color <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:71</i>
     */
    public static final int BackgroundInterpolatePixel = 4;
    /**
     * Triangular filter interpolation <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:72</i>
     */
    public static final int BilinearInterpolatePixel = 5;
    /**
     * blend of nearest 1, 2 or 4 pixels <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:73</i>
     */
    public static final int BlendInterpolatePixel = 6;
    /**
     * Catmull-Rom interpolation <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:74</i>
     */
    public static final int CatromInterpolatePixel = 7;
    /**
     * Integer (floor) interpolation <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:75</i>
     */
    public static final int IntegerInterpolatePixel = 8;
    /**
     * Triangular Mesh interpolation <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:76</i>
     */
    public static final int MeshInterpolatePixel = 9;
    /**
     * Nearest Neighbour Only <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:77</i>
     */
    public static final int NearestInterpolatePixel = 10;
    /**
     * Cubic Spline (blurred) interpolation <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:78</i>
     */
    public static final int SplineInterpolatePixel = 11;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:85</i> <br> enum
   * values
   */
  public static interface PixelMask {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:81</i>
     */
    public static final int UndefinedPixelMask = 0x000000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:82</i>
     */
    public static final int ReadPixelMask = 0x000001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:83</i>
     */
    public static final int WritePixelMask = 0x000002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:84</i>
     */
    public static final int CompositePixelMask = 0x000004;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:91</i> <br> enum
   * values
   */
  public static interface PixelTrait {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:87</i>
     */
    public static final int UndefinedPixelTrait = 0x000000;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:88</i>
     */
    public static final int CopyPixelTrait = 0x000001;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:89</i>
     */
    public static final int UpdatePixelTrait = 0x000002;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:90</i>
     */
    public static final int BlendPixelTrait = 0x000004;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:101</i> <br> enum
   * values
   */
  public static interface StorageType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:93</i>
     */
    public static final int UndefinedPixel = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:94</i>
     */
    public static final int CharPixel = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:95</i>
     */
    public static final int DoublePixel = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:96</i>
     */
    public static final int FloatPixel = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:97</i>
     */
    public static final int LongPixel = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:98</i>
     */
    public static final int LongLongPixel = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:99</i>
     */
    public static final int QuantumPixel = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:100</i>
     */
    public static final int ShortPixel = 7;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:10</i> <br> enum
   * values
   */
  public static interface PolicyDomain {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:2</i>
     */
    public static final int UndefinedPolicyDomain = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:3</i>
     */
    public static final int CoderPolicyDomain = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:4</i>
     */
    public static final int DelegatePolicyDomain = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:5</i>
     */
    public static final int FilterPolicyDomain = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:6</i>
     */
    public static final int PathPolicyDomain = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:7</i>
     */
    public static final int ResourcePolicyDomain = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:8</i>
     */
    public static final int SystemPolicyDomain = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:9</i>
     */
    public static final int CachePolicyDomain = 7;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:18</i> <br> enum
   * values
   */
  public static interface PolicyRights {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:12</i>
     */
    public static final int UndefinedPolicyRights = 0x00;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:13</i>
     */
    public static final int NoPolicyRights = 0x00;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:14</i>
     */
    public static final int ReadPolicyRights = 0x01;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:15</i>
     */
    public static final int WritePolicyRights = 0x02;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:16</i>
     */
    public static final int ExecutePolicyRights = 0x04;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:17</i>
     */
    public static final int AllPolicyRights = 0xff;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:8</i> <br> enum
   * values
   */
  public static interface RenderingIntent {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:3</i>
     */
    public static final int UndefinedIntent = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:4</i>
     */
    public static final int SaturationIntent = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:5</i>
     */
    public static final int PerceptualIntent = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:6</i>
     */
    public static final int AbsoluteIntent = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:7</i>
     */
    public static final int RelativeIntent = 4;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:6</i> <br> enum
   * values
   */
  public static interface DitherMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:2</i>
     */
    public static final int UndefinedDitherMethod = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:3</i>
     */
    public static final int NoDitherMethod = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:4</i>
     */
    public static final int RiemersmaDitherMethod = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:5</i>
     */
    public static final int FloydSteinbergDitherMethod = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:4</i> <br> enum
   * values
   */
  public static interface EndianType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:1</i>
     */
    public static final int UndefinedEndian = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:2</i>
     */
    public static final int LSBEndian = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:3</i>
     */
    public static final int MSBEndian = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:9</i> <br> enum
   * values
   */
  public static interface QuantumAlphaType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:6</i>
     */
    public static final int UndefinedQuantumAlpha = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:7</i>
     */
    public static final int AssociatedQuantumAlpha = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:8</i>
     */
    public static final int DisassociatedQuantumAlpha = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:15</i> <br> enum
   * values
   */
  public static interface QuantumFormatType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:11</i>
     */
    public static final int UndefinedQuantumFormat = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:12</i>
     */
    public static final int FloatingPointQuantumFormat = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:13</i>
     */
    public static final int SignedQuantumFormat = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:14</i>
     */
    public static final int UnsignedQuantumFormat = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:44</i> <br> enum
   * values
   */
  public static interface QuantumType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:17</i>
     */
    public static final int UndefinedQuantum = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:18</i>
     */
    public static final int AlphaQuantum = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:19</i>
     */
    public static final int BGRAQuantum = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:20</i>
     */
    public static final int BGROQuantum = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:21</i>
     */
    public static final int BGRQuantum = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:22</i>
     */
    public static final int BlackQuantum = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:23</i>
     */
    public static final int BlueQuantum = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:24</i>
     */
    public static final int CbYCrAQuantum = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:25</i>
     */
    public static final int CbYCrQuantum = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:26</i>
     */
    public static final int CbYCrYQuantum = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:27</i>
     */
    public static final int CMYKAQuantum = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:28</i>
     */
    public static final int CMYKOQuantum = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:29</i>
     */
    public static final int CMYKQuantum = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:30</i>
     */
    public static final int CyanQuantum = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:31</i>
     */
    public static final int GrayAlphaQuantum = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:32</i>
     */
    public static final int GrayQuantum = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:33</i>
     */
    public static final int GreenQuantum = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:34</i>
     */
    public static final int IndexAlphaQuantum = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:35</i>
     */
    public static final int IndexQuantum = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:36</i>
     */
    public static final int MagentaQuantum = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:37</i>
     */
    public static final int OpacityQuantum = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:38</i>
     */
    public static final int RedQuantum = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:39</i>
     */
    public static final int RGBAQuantum = 22;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:40</i>
     */
    public static final int RGBOQuantum = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:41</i>
     */
    public static final int RGBPadQuantum = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:42</i>
     */
    public static final int RGBQuantum = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantum.h:43</i>
     */
    public static final int YellowQuantum = 26;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:6</i> <br> enum
   * values
   */
  public static interface RegistryType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:2</i>
     */
    public static final int UndefinedRegistryType = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:3</i>
     */
    public static final int ImageRegistryType = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:4</i>
     */
    public static final int ImageInfoRegistryType = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:5</i>
     */
    public static final int StringRegistryType = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:40</i> <br> enum
   * values
   */
  public static interface FilterType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:7</i>
     */
    public static final int UndefinedFilter = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:8</i>
     */
    public static final int PointFilter = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:9</i>
     */
    public static final int BoxFilter = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:10</i>
     */
    public static final int TriangleFilter = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:11</i>
     */
    public static final int HermiteFilter = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:12</i>
     */
    public static final int HannFilter = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:13</i>
     */
    public static final int HammingFilter = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:14</i>
     */
    public static final int BlackmanFilter = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:15</i>
     */
    public static final int GaussianFilter = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:16</i>
     */
    public static final int QuadraticFilter = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:17</i>
     */
    public static final int CubicFilter = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:18</i>
     */
    public static final int CatromFilter = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:19</i>
     */
    public static final int MitchellFilter = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:20</i>
     */
    public static final int JincFilter = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:21</i>
     */
    public static final int SincFilter = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:22</i>
     */
    public static final int SincFastFilter = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:23</i>
     */
    public static final int KaiserFilter = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:24</i>
     */
    public static final int WelchFilter = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:25</i>
     */
    public static final int ParzenFilter = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:26</i>
     */
    public static final int BohmanFilter = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:27</i>
     */
    public static final int BartlettFilter = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:28</i>
     */
    public static final int LagrangeFilter = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:29</i>
     */
    public static final int LanczosFilter = 22;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:30</i>
     */
    public static final int LanczosSharpFilter = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:31</i>
     */
    public static final int Lanczos2Filter = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:32</i>
     */
    public static final int Lanczos2SharpFilter = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:33</i>
     */
    public static final int RobidouxFilter = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:34</i>
     */
    public static final int RobidouxSharpFilter = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:35</i>
     */
    public static final int CosineFilter = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:36</i>
     */
    public static final int SplineFilter = 29;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:37</i>
     */
    public static final int LanczosRadiusFilter = 30;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:38</i>
     */
    public static final int CubicSplineFilter = 31;
    /**
     * a count of all the filters, not a real filter <br> <i>native declaration :
     * /usr/local/include/ImageMagick-7/MagickCore/resample.h:39</i>
     */
    public static final int SentinelFilter = 32;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:14</i> <br>
   * enum values
   */
  public static interface ResourceType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:2</i>
     */
    public static final int UndefinedResource = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:3</i>
     */
    public static final int AreaResource = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:4</i>
     */
    public static final int DiskResource = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:5</i>
     */
    public static final int FileResource = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:6</i>
     */
    public static final int HeightResource = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:7</i>
     */
    public static final int MapResource = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:8</i>
     */
    public static final int MemoryResource = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:9</i>
     */
    public static final int ThreadResource = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:10</i>
     */
    public static final int ThrottleResource = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:11</i>
     */
    public static final int TimeResource = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:12</i>
     */
    public static final int WidthResource = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:13</i>
     */
    public static final int ListLengthResource = 11;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:67</i> <br>
   * enum values
   */
  public static interface MagickEvaluateOperator {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:34</i>
     */
    public static final int UndefinedEvaluateOperator = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:35</i>
     */
    public static final int AbsEvaluateOperator = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:36</i>
     */
    public static final int AddEvaluateOperator = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:37</i>
     */
    public static final int AddModulusEvaluateOperator = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:38</i>
     */
    public static final int AndEvaluateOperator = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:39</i>
     */
    public static final int CosineEvaluateOperator = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:40</i>
     */
    public static final int DivideEvaluateOperator = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:41</i>
     */
    public static final int ExponentialEvaluateOperator = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:42</i>
     */
    public static final int GaussianNoiseEvaluateOperator = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:43</i>
     */
    public static final int ImpulseNoiseEvaluateOperator = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:44</i>
     */
    public static final int LaplacianNoiseEvaluateOperator = 10;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:45</i>
     */
    public static final int LeftShiftEvaluateOperator = 11;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:46</i>
     */
    public static final int LogEvaluateOperator = 12;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:47</i>
     */
    public static final int MaxEvaluateOperator = 13;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:48</i>
     */
    public static final int MeanEvaluateOperator = 14;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:49</i>
     */
    public static final int MedianEvaluateOperator = 15;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:50</i>
     */
    public static final int MinEvaluateOperator = 16;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:51</i>
     */
    public static final int MultiplicativeNoiseEvaluateOperator = 17;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:52</i>
     */
    public static final int MultiplyEvaluateOperator = 18;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:53</i>
     */
    public static final int OrEvaluateOperator = 19;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:54</i>
     */
    public static final int PoissonNoiseEvaluateOperator = 20;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:55</i>
     */
    public static final int PowEvaluateOperator = 21;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:56</i>
     */
    public static final int RightShiftEvaluateOperator = 22;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:57</i>
     */
    public static final int RootMeanSquareEvaluateOperator = 23;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:58</i>
     */
    public static final int SetEvaluateOperator = 24;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:59</i>
     */
    public static final int SineEvaluateOperator = 25;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:60</i>
     */
    public static final int SubtractEvaluateOperator = 26;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:61</i>
     */
    public static final int SumEvaluateOperator = 27;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:62</i>
     */
    public static final int ThresholdBlackEvaluateOperator = 28;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:63</i>
     */
    public static final int ThresholdEvaluateOperator = 29;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:64</i>
     */
    public static final int ThresholdWhiteEvaluateOperator = 30;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:65</i>
     */
    public static final int UniformNoiseEvaluateOperator = 31;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:66</i>
     */
    public static final int XorEvaluateOperator = 32;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:74</i> <br>
   * enum values
   */
  public static interface MagickFunction {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:69</i>
     */
    public static final int UndefinedFunction = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:70</i>
     */
    public static final int ArcsinFunction = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:71</i>
     */
    public static final int ArctanFunction = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:72</i>
     */
    public static final int PolynomialFunction = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:73</i>
     */
    public static final int SinusoidFunction = 4;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:86</i> <br>
   * enum values
   */
  public static interface StatisticType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:76</i>
     */
    public static final int UndefinedStatistic = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:77</i>
     */
    public static final int GradientStatistic = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:78</i>
     */
    public static final int MaximumStatistic = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:79</i>
     */
    public static final int MeanStatistic = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:80</i>
     */
    public static final int MedianStatistic = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:81</i>
     */
    public static final int MinimumStatistic = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:82</i>
     */
    public static final int ModeStatistic = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:83</i>
     */
    public static final int NonpeakStatistic = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:84</i>
     */
    public static final int RootMeanSquareStatistic = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:85</i>
     */
    public static final int StandardDeviationStatistic = 9;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:6</i> <br> enum
   * values
   */
  public static interface AutoThresholdMethod {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:2</i>
     */
    public static final int UndefinedThresholdMethod = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:3</i>
     */
    public static final int KapurThresholdMethod = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:4</i>
     */
    public static final int OTSUThresholdMethod = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:5</i>
     */
    public static final int TriangleThresholdMethod = 3;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:5</i> <br> enum
   * values
   */
  public static interface TimerState {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:2</i>
     */
    public static final int UndefinedTimerState = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:3</i>
     */
    public static final int StoppedTimerState = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:4</i>
     */
    public static final int RunningTimerState = 2;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:13</i> <br> enum
   * values
   */
  public static interface StretchType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:2</i>
     */
    public static final int UndefinedStretch = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:3</i>
     */
    public static final int NormalStretch = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:4</i>
     */
    public static final int UltraCondensedStretch = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:5</i>
     */
    public static final int ExtraCondensedStretch = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:6</i>
     */
    public static final int CondensedStretch = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:7</i>
     */
    public static final int SemiCondensedStretch = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:8</i>
     */
    public static final int SemiExpandedStretch = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:9</i>
     */
    public static final int ExpandedStretch = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:10</i>
     */
    public static final int ExtraExpandedStretch = 8;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:11</i>
     */
    public static final int UltraExpandedStretch = 9;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:12</i>
     */
    public static final int AnyStretch = 10;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:20</i> <br> enum
   * values
   */
  public static interface StyleType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:15</i>
     */
    public static final int UndefinedStyle = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:16</i>
     */
    public static final int NormalStyle = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:17</i>
     */
    public static final int ItalicStyle = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:18</i>
     */
    public static final int ObliqueStyle = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:19</i>
     */
    public static final int AnyStyle = 4;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:11</i> <br> enum
   * values
   */
  public static interface PathType {

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:2</i>
     */
    public static final int UndefinedPath = 0;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:3</i>
     */
    public static final int MagickPath = 1;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:4</i>
     */
    public static final int RootPath = 2;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:5</i>
     */
    public static final int HeadPath = 3;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:6</i>
     */
    public static final int TailPath = 4;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:7</i>
     */
    public static final int BasePath = 5;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:8</i>
     */
    public static final int ExtensionPath = 6;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:9</i>
     */
    public static final int SubimagePath = 7;
    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:10</i>
     */
    public static final int CanonicalPath = 8;
  }

  ;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h</i>
   */
  public static final int MagickMaxBufferExtent = (int) 81920;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h</i>
   */
  public static final String MagickLogFilename = (String) "log.xml";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int _MAGICKCORE_MAGICK_BASECONFIG_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_BUILD_MODULES = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_BZLIB_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_CIPHER_SUPPORT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_CODER_DIRNAME = (String) "coders";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_CONFIGURE_PATH = (String) "/usr/local/etc/ImageMagick-7/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_CONFIGURE_RELATIVE_PATH = (String) "ImageMagick-7";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_DOCUMENTATION_PATH = (String) "/usr/local/share/doc/ImageMagick-7/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_EXECUTABLE_PATH = (String) "/usr/local/bin/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_FILTER_DIRNAME = (String) "filters";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_FONTCONFIG_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_FREETYPE_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ACOSH = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ARPA_INET_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ASINH = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ATANH = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ATEXIT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ATOLL = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CABS = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CARG = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CIMAG = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CLOCK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CLOCK_GETRES = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CLOCK_GETTIME = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CLOCK_REALTIME = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_COMPLEX_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CREAL = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_CTIME_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DECL_PREAD = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DECL_PWRITE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DECL_STRERROR_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DECL_STRLCPY = (int) 0;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DECL_VSNPRINTF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DIRENT_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DLFCN_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_DOUBLE_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ERF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ERRNO_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_EXECVP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FCHMOD = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FCNTL_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FLOAT_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FLOOR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FORK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FSEEKO = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FTIME = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_FTRUNCATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETCWD = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETC_UNLOCKED = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETDTABLESIZE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETPAGESIZE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETPID = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETRLIMIT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETRUSAGE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GETTIMEOFDAY = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_GMTIME_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_INTMAX_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_INTPTR_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_INTTYPES_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_ISNAN = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_J0 = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_J1 = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LCMS2_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LIMITS_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LINUX_UNISTD_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LOCALE_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LOCALE_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LOCALTIME_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LONG_DOUBLE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LONG_DOUBLE_WIDER = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LONG_LONG_INT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_LSTAT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MBSTATE_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MEMMOVE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MEMORY_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MEMSET = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MKSTEMP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MMAP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_MUNMAP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_NANOSLEEP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_NETINET_IN_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_NEWLOCALE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_PCLOSE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POLL = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POPEN = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POSIX_FADVISE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POSIX_FALLOCATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POSIX_MADVISE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POSIX_MEMALIGN = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POSIX_SPAWNP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_POW = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_PREAD = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_PTHREAD = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_PTHREAD_PRIO_INHERIT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_PWRITE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_QSORT_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_RAISE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_RAND_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_READLINK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_REALPATH = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SEEKDIR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SELECT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SENDFILE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SETLOCALE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SETVBUF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SHAPE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SHARED_MEMORY = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SIGACTION = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SIGEMPTYSET = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SOCKET = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SQRT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STAT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STDARG_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STDBOOL_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STDINT_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STDLIB_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRCASECMP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRCHR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRCSPN = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRDUP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRERROR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRERROR_R = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRINGIZE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRINGS_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRING_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRNCASECMP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRPBRK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRRCHR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRSPN = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRSTR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRTOD = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRTOD_L = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRTOL = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRTOUL = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_STRUCT_TM_TM_ZONE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYMLINK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYSCONF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_IPC_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_MMAN_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_PARAM_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_RESOURCE_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_SELECT_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_SENDFILE_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_SOCKET_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_STAT_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_TIMEB_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_TIMES_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_TIME_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_TYPES_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_SYS_WAIT_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TELLDIR = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TEMPNAM = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFCONF_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFISBIGENDIAN = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFISCODECCONFIGURED = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFMERGEFIELDINFO = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFREADEXIFDIRECTORY = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFSETERRORHANDLEREXT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFSETTAGEXTENDER = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFSETWARNINGHANDLEREXT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIFFSWABARRAYOFTRIPLES = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TIMES = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_TM_ZONE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_UINTMAX_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_UINTPTR_T = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_UNISTD_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_UNSIGNED_LONG_LONG_INT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_USELOCALE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_USLEEP = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_UTIME = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_UTIME_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_VFORK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_VFPRINTF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_VPRINTF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_VSNPRINTF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_VSPRINTF = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_WAITPID = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_WCHAR_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_WORKING_FORK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_WORKING_VFORK = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE_XLOCALE_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE__BOOL = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE__EXIT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HAVE___ATTRIBUTE__ = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_HDRI_ENABLE_OBSOLETE_IN_H = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_INCLUDEARCH_PATH = (String) "/usr/local/include/ImageMagick-7/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_INCLUDE_PATH = (String) "/usr/local/include/ImageMagick-7/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_INSTALLED_SUPPORT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_JBIG_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_JPEG_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_LCMS_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_LIBRARY_PATH = (String) "/usr/local/lib/ImageMagick-7.0.7/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_LIBRARY_RELATIVE_PATH = (String) "ImageMagick-7.0.7";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_LIB_BIN_BASEDIRNAME = (String) "bin";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_LTDL_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_LTDL_MODULE_EXT = (String) ".so";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_LT_OBJDIR = (String) ".libs/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_LZMA_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_MODULES_BASEDIRNAME = (String) "modules";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE = (String) "ImageMagick";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE_BUGREPORT = (String) "https://github.com/ImageMagick/ImageMagick/issues";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE_NAME = (String) "ImageMagick";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE_STRING = (String) "ImageMagick 7.0.7-38";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE_TARNAME = (String) "ImageMagick";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE_URL = (String) "https://www.imagemagick.org";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_PACKAGE_VERSION = (String) "7.0.7-38";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_PANGOCAIRO_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_PANGO_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_PNG_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_QUANTUM_DEPTH_OBSOLETE_IN_H = (int) 16;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_SHAREARCH_BASEDIRNAME = (String) "config";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_SHARE_PATH = (String) "/usr/local/share/ImageMagick-7/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_SHARE_RELATIVE_PATH = (String) "ImageMagick-7";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_DOUBLE = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_DOUBLE_T = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_FLOAT = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_FLOAT_T = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_LONG_DOUBLE = (int) 16;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_OFF_T = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_SIGNED_INT = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_SIGNED_LONG = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_SIGNED_LONG_LONG = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_SIGNED_SHORT = (int) 2;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_SIZE_T = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_SSIZE_T = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_UNSIGNED_INT = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_UNSIGNED_INTP = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_UNSIGNED_LONG = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_UNSIGNED_LONG_LONG = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_SIZEOF_UNSIGNED_SHORT = (int) 2;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_STDC_HEADERS = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_STRERROR_R_CHAR_P = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_THREAD_SUPPORT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_TIFF_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_TIME_WITH_SYS_TIME = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int _ALL_SOURCE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int _GNU_SOURCE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int _POSIX_PTHREAD_SEMANTICS = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int _TANDEM_SOURCE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int __EXTENSIONS__ = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_VERSION = (String) "7.0.7-38";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_WMF_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final String MAGICKCORE_X11_CONFIGURE_PATH = (String) "";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_X11_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_XML_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int MAGICKCORE_ZLIB_DELEGATE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-baseconfig.h</i>
   */
  public static final int _DARWIN_USE_64_BIT_INODE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final int MAGICKCORE_QUANTUM_DEPTH = (int) 16;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final int MAGICKCORE_HDRI_ENABLE = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final int MAGICKCORE_HDRI_SUPPORT = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final String MAGICKCORE_ABI_SUFFIX = (String) "Q";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final char MAGICKCORE_DIR_SEPARATOR_CHAR = (char) '\\';
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final String MAGICKCORE_DIR_SEPARATOR = (String) "\\";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final char MAGICKCORE_PATH_SEPARATOR_CHAR = (char) ';';
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-config.h</i>
   */
  public static final String MAGICKCORE_PATH_SEPARATOR = (String) ";";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final int MaxColormapSize = (int) 65536;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final int MaxMap = (int) 65535;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final float QuantumRange = (float) 65535.0f;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final String QuantumFormat = (String) "%g";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final double MagickEpsilon = (double) (1.0e-15);
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final double MagickMaximumValue = (double) 1.79769313486231570E+308;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final double MagickMinimumValue = (double) 2.22507385850720140E-308;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final double QuantumScale = (double) (1.0 / 65535.0f);
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final String MagickOffsetFormat = (String) "lld";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick-type.h</i>
   */
  public static final String MagickSizeFormat = (String) "llu";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/method-attribute.h</i>
   */
  public static final long MagickCoreSignature = 0xabacadabL;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/method-attribute.h</i>
   */
  public static final int MagickPathExtent = (int) 4096;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/method-attribute.h</i>
   */
  public static final int MaxTextExtent = (int) 4096;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h</i>
   */
  public static final NativeSize MagickImageCoderSignature = new NativeSize((((6) << 8) | 16));
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h</i>
   */
  public static final NativeSize MagickImageFilterSignature = new NativeSize((((6) << 8) | 16));
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h</i>
   */
  public static final int MaxPixelChannels = (int) 32;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h</i>
   */
  public static final int MaximumNumberOfImageMoments = (int) 8;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h</i>
   */
  public static final int MaximumNumberOfPerceptualColorspaces = (int) 6;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h</i>
   */
  public static final int MaximumNumberOfPerceptualHashes = (int) 7;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final int MAGICKCORE_IMPLEMENTATION = (int) 1;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final int S_MODE = (int) (400 | 200);
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final String DirectorySeparator = (String) "/";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final char DirectoryListSeparator = (char) ':';
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final String EditorOptions = (String) " -title \"Edit Image Comment\" -e vi";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final String X11_PREFERENCES_PATH = (String) "~/.";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final int O_BINARY = (int) 0x00;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/studio.h</i>
   */
  public static final int MagickMaxRecursionDepth = (int) 600;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickPackageName = (String) "ImageMagick";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickCopyright = (String) "\u00a9 1999-2018 ImageMagick Studio LLC";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final int MagickLibVersion = (int) 0x707;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickLibVersionText = (String) "7.0.7";
  /**
   * define <br>
   * Conversion Error : 6, 0, 0 <br>
   * SKIPPED: <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:0</i> <br>
   * 6, 0, 0
   */
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickLibAddendum = (String) "-38";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final int MagickLibInterface = (int) 6;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final int MagickLibMinInterface = (int) 6;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickPlatform = (String) "x86_64";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickppLibVersionText = (String) "7.0.7";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final int MagickppLibVersionNumber = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickppLibAddendum = (String) "-38";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final int MagickppLibInterface = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final int MagickppLibMinInterface = (int) 4;
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickReleaseDate = (String) "2018-06-06";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickAuthoritativeLicense = (String) "https://www.imagemagick.org/script/license.php";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickAuthoritativeURL = (String) "https://www.imagemagick.org";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickHomeURL = (String) "file:///usr/local/share/doc/ImageMagick-7/index.html";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickQuantumDepth = (String) "Q16";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickQuantumRange = (String) "65535";
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h</i>
   */
  public static final String MagickVersion = (String) "ImageMagick";

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:7</i>
   */
  public static class CoderInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer magick;
    /**
     * C type : char*
     */
    public Pointer name;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int exempt;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    public CoderInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("path", "magick", "name", "exempt", "stealth", "signature");
    }

    /**
     * @param path C type : char* <br>
     * @param magick C type : char* <br>
     * @param name C type : char* <br>
     * @param exempt @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public CoderInfo(Pointer path, Pointer magick, Pointer name, int exempt, int stealth,
        NativeSize signature) {
      super();
      this.path = path;
      this.magick = magick;
      this.name = name;
      this.exempt = exempt;
      this.stealth = stealth;
      this.signature = signature;
    }

    public CoderInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends CoderInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends CoderInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:18</i>
   */
  public static class ColorInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer name;
    /**
     * @see ComplianceType <br> C type : ComplianceType
     */
    public int compliance;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo color;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int exempt;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    public ColorInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("path", "name", "compliance", "color", "exempt", "stealth", "signature");
    }

    /**
     * @param path C type : char* <br>
     * @param name C type : char* <br>
     * @param compliance @see ComplianceType <br> C type : ComplianceType <br>
     * @param color C type : PixelInfo <br>
     * @param exempt @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public ColorInfo(Pointer path, Pointer name, int compliance, SaMagickCore.PixelInfo color,
        int exempt, int stealth, NativeSize signature) {
      super();
      this.path = path;
      this.name = name;
      this.compliance = compliance;
      this.color = color;
      this.exempt = exempt;
      this.stealth = stealth;
      this.signature = signature;
    }

    public ColorInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ColorInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ColorInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:23</i>
   */
  public static class ErrorInfo extends Structure {

    public double mean_error_per_pixel;
    public double normalized_mean_error;
    public double normalized_maximum_error;

    public ErrorInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("mean_error_per_pixel", "normalized_mean_error", "normalized_maximum_error");
    }

    public ErrorInfo(double mean_error_per_pixel, double normalized_mean_error,
        double normalized_maximum_error) {
      super();
      this.mean_error_per_pixel = mean_error_per_pixel;
      this.normalized_mean_error = normalized_mean_error;
      this.normalized_maximum_error = normalized_maximum_error;
    }

    public ErrorInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ErrorInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ErrorInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:7</i>
   */
  public static class ConfigureInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer name;
    /**
     * C type : char*
     */
    public Pointer value;
    /**
     * @see MagickBooleanType  <br> C type : MagickBooleanType
     */
    public int exempt;
    /**
     * @see MagickBooleanType C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    public ConfigureInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("path", "name", "value", "exempt", "stealth", "signature");
    }

    /**
     * @param path C type : char* <br>
     * @param name C type : char* <br>
     * @param value C type : char* <br>
     * @param exempt @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public ConfigureInfo(Pointer path, Pointer name, Pointer value, int exempt, int stealth,
        NativeSize signature) {
      super();
      this.path = path;
      this.name = name;
      this.value = value;
      this.exempt = exempt;
      this.stealth = stealth;
      this.signature = signature;
    }

    public ConfigureInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ConfigureInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ConfigureInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/decorate.h:7</i>
   */
  public static class FrameInfo extends Structure {

    public NativeSize width;
    public NativeSize height;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t x;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t y;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t inner_bevel;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t outer_bevel;

    public FrameInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("width", "height", "x", "y", "inner_bevel", "outer_bevel");
    }

    /**
     * @param x C type : ssize_t <br>
     * @param y C type : ssize_t <br>
     * @param inner_bevel C type : ssize_t <br>
     * @param outer_bevel C type : ssize_t
     */
    public FrameInfo(NativeSize width, NativeSize height, SaMagickCore.ssize_t x,
        SaMagickCore.ssize_t y, SaMagickCore.ssize_t inner_bevel,
        SaMagickCore.ssize_t outer_bevel) {
      super();
      this.width = width;
      this.height = height;
      this.x = x;
      this.y = y;
      this.inner_bevel = inner_bevel;
      this.outer_bevel = outer_bevel;
    }

    public FrameInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends FrameInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends FrameInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:11</i>
   */
  public static class DelegateInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer decode;
    /**
     * C type : char*
     */
    public Pointer encode;
    /**
     * C type : char*
     */
    public Pointer commands;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t mode;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int thread_support;
    /**
     * @see MagickBooleanType  <br> C type : MagickBooleanType
     */
    public int spawn;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    /**
     * C type : SemaphoreInfo*
     */
    public PointerByReference semaphore;
    public NativeSize signature;

    public DelegateInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("path", "decode", "encode", "commands", "mode", "thread_support", "spawn",
              "stealth", "semaphore", "signature");
    }

    public DelegateInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends DelegateInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends DelegateInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:85</i>
   */
  public static class StopInfo extends Structure {

    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo color;
    public double offset;

    public StopInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("color", "offset");
    }

    /**
     * @param color C type : PixelInfo
     */
    public StopInfo(SaMagickCore.PixelInfo color, double offset) {
      super();
      this.color = color;
      this.offset = offset;
    }

    public StopInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends StopInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends StopInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:99</i>
   */
  public static class GradientInfo extends Structure {

    /**
     * @see GradientType <br> C type : GradientType
     */
    public int type;
    /**
     * C type : RectangleInfo
     */
    public SaMagickCore.RectangleInfo bounding_box;
    /**
     * C type : SegmentInfo
     */
    public SaMagickCore.SegmentInfo gradient_vector;
    /**
     * C type : StopInfo*
     */
    public SaMagickCore.StopInfo.ByReference stops;
    public NativeSize number_stops;
    /**
     * @see SpreadMethod <br> C type : SpreadMethod
     */
    public int spread;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int debug;
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo center;
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo radii;
    public double radius;
    public double angle;
    public NativeSize signature;

    public GradientInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("type", "bounding_box", "gradient_vector", "stops", "number_stops", "spread",
              "debug", "center", "radii", "radius", "angle", "signature");
    }

    public GradientInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends GradientInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends GradientInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:107</i>
   */
  public static class ElementReference extends Structure {

    /**
     * C type : char*
     */
    public Pointer id;
    /**
     * @see ReferenceType <br> C type : ReferenceType
     */
    public int type;
    /**
     * C type : GradientInfo
     */
    public SaMagickCore.GradientInfo gradient;
    /**
     * C type : _ElementReference*
     */
    public SaMagickCore.ElementReference.ByReference previous;
    /**
     * C type : _ElementReference*
     */
    public SaMagickCore.ElementReference.ByReference next;
    public NativeSize signature;

    public ElementReference() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("id", "type", "gradient", "previous", "next", "signature");
    }

    /**
     * @param id C type : char* <br>
     * @param type @see ReferenceType <br> C type : ReferenceType <br>
     * @param gradient C type : GradientInfo <br>
     * @param previous C type : _ElementReference* <br>
     * @param next C type : _ElementReference*
     */
    public ElementReference(Pointer id, int type, SaMagickCore.GradientInfo gradient,
        SaMagickCore.ElementReference.ByReference previous,
        SaMagickCore.ElementReference.ByReference next, NativeSize signature) {
      super();
      this.id = id;
      this.type = type;
      this.gradient = gradient;
      this.previous = previous;
      this.next = next;
      this.signature = signature;
    }

    public ElementReference(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ElementReference implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ElementReference implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:163</i>
   */
  public static class DrawInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer primitive;
    /**
     * C type : char*
     */
    public Pointer geometry;
    /**
     * C type : RectangleInfo
     */
    public SaMagickCore.RectangleInfo viewbox;
    /**
     * C type : AffineMatrix
     */
    public SaMagickCore.AffineMatrix affine;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo fill;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo stroke;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo undercolor;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo border_color;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference fill_pattern;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference stroke_pattern;
    public double stroke_width;
    /**
     * C type : GradientInfo
     */
    public SaMagickCore.GradientInfo gradient;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stroke_antialias;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int text_antialias;
    /**
     * @see FillRule <br> C type : FillRule
     */
    public int fill_rule;
    /**
     * @see LineCap <br> C type : LineCap
     */
    public int linecap;
    /**
     * @see LineJoin <br> C type : LineJoin
     */
    public int linejoin;
    public NativeSize miterlimit;
    public double dash_offset;
    /**
     * @see DecorationType <br> C type : DecorationType
     */
    public int decorate;
    /**
     * @see CompositeOperator <br> C type : CompositeOperator
     */
    public int compose;
    /**
     * C type : char*
     */
    public Pointer text;
    /**
     * C type : char*
     */
    public Pointer font;
    /**
     * C type : char*
     */
    public Pointer metrics;
    /**
     * C type : char*
     */
    public Pointer family;
    public NativeSize face;
    /**
     * @see StyleType <br> C type : StyleType
     */
    public int style;
    /**
     * @see StretchType <br> C type : StretchType
     */
    public int stretch;
    public NativeSize weight;
    /**
     * C type : char*
     */
    public Pointer encoding;
    public double pointsize;
    /**
     * C type : char*
     */
    public Pointer density;
    /**
     * @see AlignType <br> C type : AlignType
     */
    public int align;
    /**
     * @see GravityType <br> C type : GravityType
     */
    public int gravity;
    /**
     * C type : char*
     */
    public Pointer server_name;
    /**
     * C type : double*
     */
    public DoubleByReference dash_pattern;
    /**
     * C type : char*
     */
    public Pointer clip_mask;
    /**
     * C type : SegmentInfo
     */
    public SaMagickCore.SegmentInfo bounds;
    /**
     * @see ClipPathUnits <br> C type : ClipPathUnits
     */
    public int clip_units;
    /**
     * C type : Quantum
     */
    public float alpha;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int render;
    /**
     * C type : ElementReference
     */
    public SaMagickCore.ElementReference element_reference;
    public double kerning;
    public double interword_spacing;
    public double interline_spacing;
    /**
     * @see DirectionType <br> C type : DirectionType
     */
    public int direction;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int debug;
    public NativeSize signature;
    public double fill_alpha;
    public double stroke_alpha;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int clip_path;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference clipping_mask;
    /**
     * @see ComplianceType <br> C type : ComplianceType
     */
    public int compliance;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference composite_mask;

    public DrawInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("primitive", "geometry", "viewbox", "affine", "fill", "stroke", "undercolor",
              "border_color", "fill_pattern", "stroke_pattern", "stroke_width", "gradient",
              "stroke_antialias", "text_antialias", "fill_rule", "linecap", "linejoin",
              "miterlimit", "dash_offset", "decorate", "compose", "text", "font", "metrics",
              "family", "face", "style", "stretch", "weight", "encoding", "pointsize", "density",
              "align", "gravity", "server_name", "dash_pattern", "clip_mask", "bounds",
              "clip_units", "alpha", "render", "element_reference", "kerning", "interword_spacing",
              "interline_spacing", "direction", "debug", "signature", "fill_alpha", "stroke_alpha",
              "clip_path", "clipping_mask", "compliance", "composite_mask");
    }

    public DrawInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends DrawInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends DrawInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:171</i>
   */
  public static class PrimitiveInfo extends Structure {

    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo point;
    public NativeSize coordinates;
    /**
     * @see PrimitiveType <br> C type : PrimitiveType
     */
    public int primitive;
    /**
     * @see PaintMethod <br> C type : PaintMethod
     */
    public int method;
    /**
     * C type : char*
     */
    public Pointer text;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int closed_subpath;

    public PrimitiveInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("point", "coordinates", "primitive", "method", "text", "closed_subpath");
    }

    /**
     * @param point C type : PointInfo <br>
     * @param primitive @see PrimitiveType <br> C type : PrimitiveType <br>
     * @param method @see PaintMethod <br> C type : PaintMethod <br>
     * @param text C type : char* <br>
     * @param closed_subpath @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public PrimitiveInfo(SaMagickCore.PointInfo point, NativeSize coordinates, int primitive,
        int method, Pointer text, int closed_subpath) {
      super();
      this.point = point;
      this.coordinates = coordinates;
      this.primitive = primitive;
      this.method = method;
      this.text = text;
      this.closed_subpath = closed_subpath;
    }

    public PrimitiveInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends PrimitiveInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends PrimitiveInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:183</i>
   */
  public static class TypeMetric extends Structure {

    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo pixels_per_em;
    public double ascent;
    public double descent;
    public double width;
    public double height;
    public double max_advance;
    public double underline_position;
    public double underline_thickness;
    /**
     * C type : SegmentInfo
     */
    public SaMagickCore.SegmentInfo bounds;
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo origin;

    public TypeMetric() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("pixels_per_em", "ascent", "descent", "width", "height", "max_advance",
          "underline_position", "underline_thickness", "bounds", "origin");
    }

    public TypeMetric(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends TypeMetric implements Structure.ByReference {

    }

    ;

    public static class ByValue extends TypeMetric implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:81</i>
   */
  public static class ExceptionInfo extends Structure {

    /**
     * @see ExceptionType <br> C type : ExceptionType
     */
    public int severity;
    public int error_number;
    /**
     * C type : char*
     */
    public Pointer reason;
    /**
     * C type : char*
     */
    public Pointer description;
    /**
     * C type : void*
     */
    public Pointer exceptions;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int relinquish;
    /**
     * C type : SemaphoreInfo*
     */
    public PointerByReference semaphore;
    public NativeSize signature;

    public ExceptionInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("severity", "error_number", "reason", "description", "exceptions", "relinquish",
              "semaphore", "signature");
    }

    /**
     * @param severity @see ExceptionType <br> C type : ExceptionType <br>
     * @param reason C type : char* <br>
     * @param description C type : char* <br>
     * @param exceptions C type : void* <br>
     * @param relinquish @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param semaphore C type : SemaphoreInfo*
     */
    public ExceptionInfo(int severity, int error_number, Pointer reason, Pointer description,
        Pointer exceptions, int relinquish, PointerByReference semaphore, NativeSize signature) {
      super();
      this.severity = severity;
      this.error_number = error_number;
      this.reason = reason;
      this.description = description;
      this.exceptions = exceptions;
      this.relinquish = relinquish;
      this.semaphore = semaphore;
      this.signature = signature;
    }

    public ExceptionInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ExceptionInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ExceptionInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/feature.h:16</i>
   */
  public static class ChannelFeatures extends Structure {

    /**
     * C type : double[4]
     */
    public double[] angular_second_moment = new double[4];
    /**
     * C type : double[4]
     */
    public double[] contrast = new double[4];
    /**
     * C type : double[4]
     */
    public double[] correlation = new double[4];
    /**
     * C type : double[4]
     */
    public double[] variance_sum_of_squares = new double[4];
    /**
     * C type : double[4]
     */
    public double[] inverse_difference_moment = new double[4];
    /**
     * C type : double[4]
     */
    public double[] sum_average = new double[4];
    /**
     * C type : double[4]
     */
    public double[] sum_variance = new double[4];
    /**
     * C type : double[4]
     */
    public double[] sum_entropy = new double[4];
    /**
     * C type : double[4]
     */
    public double[] entropy = new double[4];
    /**
     * C type : double[4]
     */
    public double[] difference_variance = new double[4];
    /**
     * C type : double[4]
     */
    public double[] difference_entropy = new double[4];
    /**
     * C type : double[4]
     */
    public double[] measure_of_correlation_1 = new double[4];
    /**
     * C type : double[4]
     */
    public double[] measure_of_correlation_2 = new double[4];
    /**
     * C type : double[4]
     */
    public double[] maximum_correlation_coefficient = new double[4];

    public ChannelFeatures() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("angular_second_moment", "contrast", "correlation", "variance_sum_of_squares",
              "inverse_difference_moment", "sum_average", "sum_variance", "sum_entropy", "entropy",
              "difference_variance", "difference_entropy", "measure_of_correlation_1",
              "measure_of_correlation_2", "maximum_correlation_coefficient");
    }

    public ChannelFeatures(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ChannelFeatures implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ChannelFeatures implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:49</i>
   */
  public static class AffineMatrix extends Structure {

    public double sx;
    public double rx;
    public double ry;
    public double sy;
    public double tx;
    public double ty;

    public AffineMatrix() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("sx", "rx", "ry", "sy", "tx", "ty");
    }

    public AffineMatrix(double sx, double rx, double ry, double sy, double tx, double ty) {
      super();
      this.sx = sx;
      this.rx = rx;
      this.ry = ry;
      this.sy = sy;
      this.tx = tx;
      this.ty = ty;
    }

    public AffineMatrix(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends AffineMatrix implements Structure.ByReference {

    }

    ;

    public static class ByValue extends AffineMatrix implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:56</i>
   */
  public static class GeometryInfo extends Structure {

    public double rho;
    public double sigma;
    public double xi;
    public double psi;
    public double chi;

    public GeometryInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("rho", "sigma", "xi", "psi", "chi");
    }

    public GeometryInfo(double rho, double sigma, double xi, double psi, double chi) {
      super();
      this.rho = rho;
      this.sigma = sigma;
      this.xi = xi;
      this.psi = psi;
      this.chi = chi;
    }

    public GeometryInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends GeometryInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends GeometryInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:60</i>
   */
  public static class OffsetInfo extends Structure {

    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t x;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t y;

    public OffsetInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("x", "y");
    }

    /**
     * @param x C type : ssize_t <br>
     * @param y C type : ssize_t
     */
    public OffsetInfo(SaMagickCore.ssize_t x, SaMagickCore.ssize_t y) {
      super();
      this.x = x;
      this.y = y;
    }

    public OffsetInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends OffsetInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends OffsetInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:64</i>
   */
  public static class PointInfo extends Structure {

    public double x;
    public double y;

    public PointInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("x", "y");
    }

    public PointInfo(double x, double y) {
      super();
      this.x = x;
      this.y = y;
    }

    public PointInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends PointInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends PointInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:70</i>
   */
  public static class RectangleInfo extends Structure {

    public NativeSize width;
    public NativeSize height;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t x;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t y;

    public RectangleInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("width", "height", "x", "y");
    }

    /**
     * @param x C type : ssize_t <br>
     * @param y C type : ssize_t
     */
    public RectangleInfo(NativeSize width, NativeSize height, SaMagickCore.ssize_t x,
        SaMagickCore.ssize_t y) {
      super();
      this.width = width;
      this.height = height;
      this.x = x;
      this.y = y;
    }

    public RectangleInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends RectangleInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends RectangleInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:62</i>
   */
  public static class PrimaryInfo extends Structure {

    public double x;
    public double y;
    public double z;

    public PrimaryInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("x", "y", "z");
    }

    public PrimaryInfo(double x, double y, double z) {
      super();
      this.x = x;
      this.y = y;
      this.z = z;
    }

    public PrimaryInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends PrimaryInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends PrimaryInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:68</i>
   */
  public static class SegmentInfo extends Structure {

    public double x1;
    public double y1;
    public double x2;
    public double y2;

    public SegmentInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("x1", "y1", "x2", "y2");
    }

    public SegmentInfo(double x1, double y1, double x2, double y2) {
      super();
      this.x1 = x1;
      this.y1 = y1;
      this.x2 = x2;
      this.y2 = y2;
    }

    public SegmentInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends SegmentInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends SegmentInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:81</i>
   */
  public static class ChromaticityInfo extends Structure {

    /**
     * C type : PrimaryInfo
     */
    public SaMagickCore.PrimaryInfo red_primary;
    /**
     * C type : PrimaryInfo
     */
    public SaMagickCore.PrimaryInfo green_primary;
    /**
     * C type : PrimaryInfo
     */
    public SaMagickCore.PrimaryInfo blue_primary;
    /**
     * C type : PrimaryInfo
     */
    public SaMagickCore.PrimaryInfo white_point;

    public ChromaticityInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("red_primary", "green_primary", "blue_primary", "white_point");
    }

    /**
     * @param red_primary C type : PrimaryInfo <br>
     * @param green_primary C type : PrimaryInfo <br>
     * @param blue_primary C type : PrimaryInfo <br>
     * @param white_point C type : PrimaryInfo
     */
    public ChromaticityInfo(SaMagickCore.PrimaryInfo red_primary,
        SaMagickCore.PrimaryInfo green_primary, SaMagickCore.PrimaryInfo blue_primary,
        SaMagickCore.PrimaryInfo white_point) {
      super();
      this.red_primary = red_primary;
      this.green_primary = green_primary;
      this.blue_primary = blue_primary;
      this.white_point = white_point;
    }

    public ChromaticityInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ChromaticityInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ChromaticityInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:86</i>
   */
  public static class Image extends Structure {

    /**
     * @see ClassType <br> C type : ClassType
     */
    public int storage_class;
    /**
     * @see ColorspaceType <br> C type : ColorspaceType
     */
    public int colorspace;
    /**
     * @see CompressionType <br> C type : CompressionType
     */
    public int compression;
    public NativeSize quality;
    /**
     * @see OrientationType <br> C type : OrientationType
     */
    public int orientation;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int taint;
    public NativeSize columns;
    public NativeSize rows;
    public NativeSize depth;
    public NativeSize colors;
    /**
     * C type : PixelInfo*
     */
    public SaMagickCore.PixelInfo.ByReference colormap;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo alpha_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo background_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo border_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo transparent_color;
    public double gamma;
    /**
     * C type : ChromaticityInfo
     */
    public SaMagickCore.ChromaticityInfo chromaticity;
    /**
     * @see RenderingIntent <br> C type : RenderingIntent
     */
    public int rendering_intent;
    /**
     * C type : void*
     */
    public Pointer profiles;
    /**
     * @see ResolutionType <br> C type : ResolutionType
     */
    public int units;
    /**
     * C type : char*
     */
    public Pointer montage;
    /**
     * C type : char*
     */
    public Pointer directory;
    /**
     * C type : char*
     */
    public Pointer geometry;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t offset;
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo resolution;
    /**
     * C type : RectangleInfo
     */
    public SaMagickCore.RectangleInfo page;
    /**
     * C type : RectangleInfo
     */
    public SaMagickCore.RectangleInfo extract_info;
    public double fuzz;
    /**
     * @see FilterType <br> C type : FilterType
     */
    public int filter;
    /**
     * @see PixelIntensityMethod <br> C type : PixelIntensityMethod
     */
    public int intensity;
    /**
     * @see InterlaceType <br> C type : InterlaceType
     */
    public int interlace;
    /**
     * @see EndianType <br> C type : EndianType
     */
    public int endian;
    /**
     * @see GravityType <br> C type : GravityType
     */
    public int gravity;
    /**
     * @see CompositeOperator <br> C type : CompositeOperator
     */
    public int compose;
    /**
     * @see DisposeType <br> C type : DisposeType
     */
    public int dispose;
    public NativeSize scene;
    public NativeSize delay;
    public NativeSize duration;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t ticks_per_second;
    public NativeSize iterations;
    public NativeSize total_colors;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t start_loop;
    /**
     * @see PixelInterpolateMethod <br> C type : PixelInterpolateMethod
     */
    public int interpolate;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int black_point_compensation;
    /**
     * C type : RectangleInfo
     */
    public SaMagickCore.RectangleInfo tile_offset;
    /**
     * @see ImageType <br> C type : ImageType
     */
    public int type;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int dither;
    /**
     * C type : MagickSizeType
     */
    public long extent;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int ping;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int read_mask;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int write_mask;
    /**
     * @see PixelTrait <br> C type : PixelTrait
     */
    public int alpha_trait;
    public NativeSize number_channels;
    public NativeSize number_meta_channels;
    public NativeSize metacontent_extent;
    /**
     * @see ChannelType <br> C type : ChannelType
     */
    public int channel_mask;
    /**
     * C type : PixelChannelMap*
     */
    public SaMagickCore.PixelChannelMap.ByReference channel_map;
    /**
     * C type : void*
     */
    public Pointer cache;
    /**
     * C type : ErrorInfo
     */
    public SaMagickCore.ErrorInfo error;
    /**
     * C type : TimerInfo
     */
    public SaMagickCore.TimerInfo timer;
    /**
     * C type : MagickProgressMonitor
     */
    public SaMagickCore.MagickProgressMonitor progress_monitor;
    /**
     * C type : void*
     */
    public Pointer client_data;
    /**
     * C type : Ascii85Info*
     */
    public PointerByReference ascii85;
    /**
     * C type : ProfileInfo*
     */
    public PointerByReference generic_profile;
    /**
     * C type : void*
     */
    public Pointer properties;
    /**
     * C type : void*
     */
    public Pointer artifacts;
    /**
     * C type : char[MagickPathExtent]
     */
    public byte[] filename = new byte[SaMagickCore.MagickPathExtent];
    /**
     * C type : char[MagickPathExtent]
     */
    public byte[] magick_filename = new byte[SaMagickCore.MagickPathExtent];
    /**
     * C type : char[MagickPathExtent]
     */
    public byte[] magick = new byte[SaMagickCore.MagickPathExtent];
    public NativeSize magick_columns;
    public NativeSize magick_rows;
    /**
     * C type : BlobInfo*
     */
    public PointerByReference blob;
    /** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int debug;
    /**
     * C type : volatile ssize_t
     */
    public SaMagickCore.ssize_t reference_count;
    /**
     * C type : SemaphoreInfo*
     */
    public PointerByReference semaphore;
    /**
     * C type : ImageInfo*
     */
    public SaMagickCore.ImageInfo.ByReference image_info;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference list;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference previous;
    /**
     * C type : Image*
     */
    public SaMagickCore.Image.ByReference next;
    public NativeSize signature;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo matte_color;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int composite_mask;
    /**
     * @see PixelTrait <br> C type : PixelTrait
     */
    public int mask_trait;
    /**
     * @see ChannelType <br> C type : ChannelType
     */
    public int channels;

    public Image() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("storage_class", "colorspace", "compression", "quality", "orientation", "taint",
              "columns", "rows", "depth", "colors", "colormap", "alpha_color", "background_color",
              "border_color", "transparent_color", "gamma", "chromaticity", "rendering_intent",
              "profiles", "units", "montage", "directory", "geometry", "offset", "resolution",
              "page", "extract_info", "fuzz", "filter", "intensity", "interlace", "endian",
              "gravity", "compose", "dispose", "scene", "delay", "duration", "ticks_per_second",
              "iterations", "total_colors", "start_loop", "interpolate", "black_point_compensation",
              "tile_offset", "type", "dither", "extent", "ping", "read_mask", "write_mask",
              "alpha_trait", "number_channels", "number_meta_channels", "metacontent_extent",
              "channel_mask", "channel_map", "cache", "error", "timer", "progress_monitor",
              "client_data", "ascii85", "generic_profile", "properties", "artifacts", "filename",
              "magick_filename", "magick", "magick_columns", "magick_rows", "blob", "debug",
              "reference_count", "semaphore", "image_info", "list", "previous", "next", "signature",
              "matte_color", "composite_mask", "mask_trait", "channels");
    }

    public Image(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends Image implements Structure.ByReference {

    }

    public static class ByValue extends Image implements Structure.ByValue {

    }
  }

  /**
   * ImageInfo structure: <br> Stores an image list, as well as all global settings used by all
   * images <br> held, -- unless overridden for that specific image.  See SyncImagesettings() <br>
   * which maps any global setting that always overrides specific image settings. <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:147</i>
   */
  public static class ImageInfo extends Structure {

    /**
     * @see CompressionType <br> C type : CompressionType
     */
    public int compression;
    /**
     * @see OrientationType <br> C type : OrientationType
     */
    public int orientation;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int temporary;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int adjoin;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int affirm;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int antialias;
    /**
     * C type : char*
     */
    public Pointer size;
    /**
     * C type : char*
     */
    public Pointer extract;
    /**
     * C type : char*
     */
    public Pointer page;
    /**
     * C type : char*
     */
    public Pointer scenes;
    public NativeSize scene;
    public NativeSize number_scenes;
    public NativeSize depth;
    /**
     * @see InterlaceType <br> C type : InterlaceType
     */
    public int interlace;
    /**
     * @see EndianType <br> C type : EndianType
     */
    public int endian;
    /**
     * @see ResolutionType <br> C type : ResolutionType
     */
    public int units;
    public NativeSize quality;
    /**
     * C type : char*
     */
    public Pointer sampling_factor;
    /**
     * C type : char*
     */
    public Pointer server_name;
    /**
     * C type : char*
     */
    public Pointer font;
    /**
     * C type : char*
     */
    public Pointer texture;
    /**
     * C type : char*
     */
    public Pointer density;
    public double pointsize;
    public double fuzz;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo alpha_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo background_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo border_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo transparent_color;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int dither;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int monochrome;
    /**
     * @see ColorspaceType <br> C type : ColorspaceType
     */
    public int colorspace;
    /**
     * @see CompositeOperator <br> C type : CompositeOperator
     */
    public int compose;
    /**
     * @see ImageType <br> C type : ImageType
     */
    public int type;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int ping;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int verbose;
    /**
     * @see ChannelType <br> C type : ChannelType
     */
    public int channel;
    /**
     * C type : void*
     */
    public Pointer options;
    /**
     * C type : void*
     */
    public Pointer profile;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int synchronize;
    /**
     * C type : MagickProgressMonitor
     */
    public SaMagickCore.MagickProgressMonitor progress_monitor;
    /**
     * C type : void*
     */
    public Pointer client_data;
    /**
     * C type : void*
     */
    public Pointer cache;
    /**
     * C type : StreamHandler
     */
    public SaMagickCore.StreamHandler stream;
    /**
     * C type : FILE*
     */
    public PointerByReference file;
    /**
     * C type : void*
     */
    public Pointer blob;
    public NativeSize length;
    /**
     * C type : char[MagickPathExtent]
     */
    public byte[] magick = new byte[SaMagickCore.MagickPathExtent];
    /**
     * C type : char[MagickPathExtent]
     */
    public byte[] unique = new byte[SaMagickCore.MagickPathExtent];
    /**
     * C type : char[MagickPathExtent]
     */
    public byte[] filename = new byte[SaMagickCore.MagickPathExtent];
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int debug;
    public NativeSize signature;
    /**
     * C type : CustomStreamInfo*
     */
    public PointerByReference custom_stream;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo matte_color;

    public ImageInfo() {
      super();
      ensureAllocated();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("compression", "orientation", "temporary", "adjoin", "affirm", "antialias",
              "size", "extract", "page", "scenes", "scene", "number_scenes", "depth", "interlace",
              "endian", "units", "quality", "sampling_factor", "server_name", "font", "texture",
              "density", "pointsize", "fuzz", "alpha_color", "background_color", "border_color",
              "transparent_color", "dither", "monochrome", "colorspace", "compose", "type", "ping",
              "verbose", "channel", "options", "profile", "synchronize", "progress_monitor",
              "client_data", "cache", "stream", "file", "blob", "length", "magick", "unique",
              "filename", "debug", "signature", "custom_stream", "matte_color");
    }

    public ImageInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ImageInfo implements Structure.ByReference {

    }


    public static class ByValue extends ImageInfo implements Structure.ByValue {

    }

  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:6</i>
   */
  public static class LocaleInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer tag;
    /**
     * C type : char*
     */
    public Pointer message;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    public LocaleInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("path", "tag", "message", "stealth", "signature");
    }

    /**
     * @param path C type : char* <br>
     * @param tag C type : char* <br>
     * @param message C type : char* <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public LocaleInfo(Pointer path, Pointer tag, Pointer message, int stealth,
        NativeSize signature) {
      super();
      this.path = path;
      this.tag = tag;
      this.message = message;
      this.stealth = stealth;
      this.signature = signature;
    }

    public LocaleInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends LocaleInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends LocaleInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:10</i>
   */
  public static class MagicInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer name;
    /**
     * C type : char*
     */
    public Pointer target;
    /**
     * C type : unsigned char*
     */
    public Pointer magic;
    public NativeSize length;
    /**
     * C type : MagickOffsetType
     */
    public SaMagickCore.MagickOffsetType offset;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int exempt;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    public MagicInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("path", "name", "target", "magic", "length", "offset", "exempt", "stealth",
              "signature");
    }

    /**
     * @param path C type : char* <br>
     * @param name C type : char* <br>
     * @param target C type : char* <br>
     * @param magic C type : unsigned char* <br>
     * @param offset C type : MagickOffsetType <br>
     * @param exempt @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public MagicInfo(Pointer path, Pointer name, Pointer target, Pointer magic, NativeSize length,
        SaMagickCore.MagickOffsetType offset, int exempt, int stealth, NativeSize signature) {
      super();
      this.path = path;
      this.name = name;
      this.target = target;
      this.magic = magic;
      this.length = length;
      this.offset = offset;
      this.exempt = exempt;
      this.stealth = stealth;
      this.signature = signature;
    }

    public MagicInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends MagicInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends MagicInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:38</i>
   */
  public static class MagickInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer name;
    /**
     * C type : char*
     */
    public Pointer description;
    /**
     * C type : char*
     */
    public Pointer version;
    /**
     * C type : char*
     */
    public Pointer mime_type;
    /**
     * C type : char*
     */
    public Pointer note;
    /**
     * C type : char*
     */
    public Pointer module;
    /**
     * C type : DecodeImageHandler*
     */
    public SaMagickCore.DecodeImageHandler decoder;
    /**
     * C type : EncodeImageHandler*
     */
    public SaMagickCore.EncodeImageHandler encoder;
    /**
     * C type : ImageInfo*
     */
    public SaMagickCore.ImageInfo.ByReference image_info;
    /**
     * C type : IsImageFormatHandler*
     */
    public SaMagickCore.IsImageFormatHandler magick;
    /**
     * @see MagickFormatType <br> C type : MagickFormatType
     */
    public int format_type;
    /**
     * C type : MagickStatusType
     */
    public int flags;
    /**
     * C type : SemaphoreInfo*
     */
    public PointerByReference semaphore;
    public NativeSize signature;
    /**
     * C type : void*
     */
    public Pointer client_data;

    public MagickInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("name", "description", "version", "mime_type", "note", "module", "decoder",
              "encoder", "image_info", "magick", "format_type", "flags", "semaphore", "signature",
              "client_data");
    }

    public MagickInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends MagickInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends MagickInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:16</i>
   */
  public static abstract class ModuleInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer tag;
    /**
     * C type : void*
     */
    public Pointer handle;
    /**
     * C type : unregister_module_callback*
     */
    public SaMagickCore.ModuleInfo.unregister_module_callback unregister_module;
    /**
     * C type : register_module_callback*
     */
    public SaMagickCore.ModuleInfo.register_module_callback register_module;
    /** Conversion Error : time_t (Primitive without known type for this runtime: NativeTime) */
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:14</i>
     */
    public interface unregister_module_callback extends Callback {

      void apply();
    }

    ;

    /**
     * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:15</i>
     */
    public interface register_module_callback extends Callback {

      NativeSize apply();
    }

    ;

    public ModuleInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("path", "tag", "handle", "unregister_module", "register_module", "stealth",
              "signature");
    }

    /**
     * @param path C type : char* <br>
     * @param tag C type : char* <br>
     * @param handle C type : void* <br>
     * @param unregister_module C type : unregister_module_callback* <br>
     * @param register_module C type : register_module_callback* <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public ModuleInfo(Pointer path, Pointer tag, Pointer handle,
        SaMagickCore.ModuleInfo.unregister_module_callback unregister_module,
        SaMagickCore.ModuleInfo.register_module_callback register_module, int stealth,
        NativeSize signature) {
      super();
      this.path = path;
      this.tag = tag;
      this.handle = handle;
      this.unregister_module = unregister_module;
      this.register_module = register_module;
      this.stealth = stealth;
      this.signature = signature;
    }

    public ModuleInfo(Pointer peer) {
      super(peer);
    }

    public static abstract class ByReference extends ModuleInfo implements Structure.ByReference {

    }

    ;

    public static abstract class ByValue extends ModuleInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:27</i>
   */
  public static class MontageInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer geometry;
    /**
     * C type : char*
     */
    public Pointer tile;
    /**
     * C type : char*
     */
    public Pointer title;
    /**
     * C type : char*
     */
    public Pointer frame;
    /**
     * C type : char*
     */
    public Pointer texture;
    /**
     * C type : char*
     */
    public Pointer font;
    public double pointsize;
    public NativeSize border_width;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int shadow;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo alpha_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo background_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo border_color;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo fill;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo stroke;
    /**
     * @see GravityType <br> C type : GravityType
     */
    public int gravity;
    /**
     * C type : char[4096]
     */
    public byte[] filename = new byte[4096];
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int debug;
    public NativeSize signature;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo matte_color;

    public MontageInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("geometry", "tile", "title", "frame", "texture", "font", "pointsize",
          "border_width", "shadow", "alpha_color", "background_color", "border_color", "fill",
          "stroke", "gravity", "filename", "debug", "signature", "matte_color");
    }

    public MontageInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends MontageInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends MontageInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:86</i>
   */
  public static class KernelInfo extends Structure {

    /**
     * @see KernelInfoType <br> C type : KernelInfoType
     */
    public int type;
    public NativeSize width;
    public NativeSize height;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t x;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t y;
    /**
     * C type : MagickRealType*
     */
    public DoubleByReference values;
    public double minimum;
    public double maximum;
    public double negative_range;
    public double positive_range;
    public double angle;
    /**
     * C type : _KernelInfo*
     */
    public SaMagickCore.KernelInfo.ByReference next;
    public NativeSize signature;

    public KernelInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("type", "width", "height", "x", "y", "values", "minimum", "maximum",
          "negative_range", "positive_range", "angle", "next", "signature");
    }

    public KernelInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends KernelInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends KernelInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:38</i>
   */
  public static class _KernelProfileRecord extends Structure {

    /**
     * C type : char*
     */
    public Pointer kernel_name;
    public NativeLong count;
    public NativeLong max;
    public NativeLong min;
    public NativeLong total;

    public _KernelProfileRecord() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("kernel_name", "count", "max", "min", "total");
    }

    /**
     * @param kernel_name C type : char*
     */
    public _KernelProfileRecord(Pointer kernel_name, NativeLong count, NativeLong max,
        NativeLong min, NativeLong total) {
      super();
      this.kernel_name = kernel_name;
      this.count = count;
      this.max = max;
      this.min = min;
      this.total = total;
    }

    public _KernelProfileRecord(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends _KernelProfileRecord implements Structure.ByReference {

    }

    ;

    public static class ByValue extends _KernelProfileRecord implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:129</i>
   */
  public static class OptionInfo extends Structure {

    /**
     * C type : const char*
     */
    public Pointer mnemonic;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t type;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t flags;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;

    public OptionInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("mnemonic", "type", "flags", "stealth");
    }

    /**
     * @param mnemonic C type : const char* <br>
     * @param type C type : ssize_t <br>
     * @param flags C type : ssize_t <br>
     * @param stealth @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public OptionInfo(Pointer mnemonic, SaMagickCore.ssize_t type, SaMagickCore.ssize_t flags,
        int stealth) {
      super();
      this.mnemonic = mnemonic;
      this.type = type;
      this.flags = flags;
      this.stealth = stealth;
    }

    public OptionInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends OptionInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends OptionInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:107</i>
   */
  public static class PixelChannelMap extends Structure {

    /**
     * @see PixelChannel <br> C type : PixelChannel
     */
    public int channel;
    /**
     * @see PixelTrait <br> C type : PixelTrait
     */
    public int traits;
    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t offset;

    public PixelChannelMap() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("channel", "traits", "offset");
    }

    /**
     * @param channel @see PixelChannel <br> C type : PixelChannel <br>
     * @param traits @see PixelTrait <br> C type : PixelTrait <br>
     * @param offset C type : ssize_t
     */
    public PixelChannelMap(int channel, int traits, SaMagickCore.ssize_t offset) {
      super();
      this.channel = channel;
      this.traits = traits;
      this.offset = offset;
    }

    public PixelChannelMap(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends PixelChannelMap implements Structure.ByReference {

    }

    ;

    public static class ByValue extends PixelChannelMap implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:121</i>
   */
  public static class PixelInfo extends Structure {

    /**
     * @see ClassType <br> C type : ClassType
     */
    public int storage_class;
    /**
     * @see ColorspaceType <br> C type : ColorspaceType
     */
    public int colorspace;
    /**
     * @see PixelTrait <br> C type : PixelTrait
     */
    public int alpha_trait;
    public double fuzz;
    public NativeSize depth;
    /**
     * C type : MagickSizeType
     */
    public long count;
    /**
     * C type : MagickRealType
     */
    public double red;
    /**
     * C type : MagickRealType
     */
    public double green;
    /**
     * C type : MagickRealType
     */
    public double blue;
    /**
     * C type : MagickRealType
     */
    public double black;
    /**
     * C type : MagickRealType
     */
    public double alpha;
    /**
     * C type : MagickRealType
     */
    public double index;

    public PixelInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("storage_class", "colorspace", "alpha_trait", "fuzz", "depth", "count", "red",
              "green", "blue", "black", "alpha", "index");
    }

    public PixelInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends PixelInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends PixelInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:128</i>
   */
  public static class PixelPacket extends Structure {

    public int red;
    public int green;
    public int blue;
    public int alpha;
    public int black;

    public PixelPacket() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("red", "green", "blue", "alpha", "black");
    }

    public PixelPacket(int red, int green, int blue, int alpha, int black) {
      super();
      this.red = red;
      this.green = green;
      this.blue = blue;
      this.alpha = alpha;
      this.black = black;
    }

    public PixelPacket(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends PixelPacket implements Structure.ByReference {

    }

    ;

    public static class ByValue extends PixelPacket implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:14</i>
   */
  public static class QuantizeInfo extends Structure {

    public NativeSize number_colors;
    public NativeSize tree_depth;
    /**
     * @see ColorspaceType <br> C type : ColorspaceType
     */
    public int colorspace;
    /**
     * @see DitherMethod <br> C type : DitherMethod
     */
    public int dither_method;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int measure_error;
    public NativeSize signature;

    public QuantizeInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("number_colors", "tree_depth", "colorspace", "dither_method", "measure_error",
              "signature");
    }

    /**
     * @param colorspace @see ColorspaceType <br> C type : ColorspaceType <br>
     * @param dither_method @see DitherMethod <br> C type : DitherMethod <br>
     * @param measure_error @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public QuantizeInfo(NativeSize number_colors, NativeSize tree_depth, int colorspace,
        int dither_method, int measure_error, NativeSize signature) {
      super();
      this.number_colors = number_colors;
      this.tree_depth = tree_depth;
      this.colorspace = colorspace;
      this.dither_method = dither_method;
      this.measure_error = measure_error;
      this.signature = signature;
    }

    public QuantizeInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends QuantizeInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends QuantizeInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:16</i>
   */
  public static class ChannelStatistics extends Structure {

    public NativeSize depth;
    public double area;
    public double minima;
    public double maxima;
    public double sum;
    public double sum_squared;
    public double sum_cubed;
    public double sum_fourth_power;
    public double mean;
    public double variance;
    public double standard_deviation;
    public double kurtosis;
    public double skewness;
    public double entropy;

    public ChannelStatistics() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("depth", "area", "minima", "maxima", "sum", "sum_squared", "sum_cubed",
          "sum_fourth_power", "mean", "variance", "standard_deviation", "kurtosis", "skewness",
          "entropy");
    }

    public ChannelStatistics(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ChannelStatistics implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ChannelStatistics implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:24</i>
   */
  public static class ChannelMoments extends Structure {

    /**
     * C type : double[8 + 1]
     */
    public double[] invariant = new double[8 + 1];
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo centroid;
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo ellipse_axis;
    public double ellipse_angle;
    public double ellipse_eccentricity;
    public double ellipse_intensity;

    public ChannelMoments() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("invariant", "centroid", "ellipse_axis", "ellipse_angle", "ellipse_eccentricity",
              "ellipse_intensity");
    }

    /**
     * @param invariant C type : double[8 + 1] <br>
     * @param centroid C type : PointInfo <br>
     * @param ellipse_axis C type : PointInfo
     */
    public ChannelMoments(double invariant[], SaMagickCore.PointInfo centroid,
        SaMagickCore.PointInfo ellipse_axis, double ellipse_angle, double ellipse_eccentricity,
        double ellipse_intensity) {
      super();
      if ((invariant.length != this.invariant.length)) {
        throw new IllegalArgumentException("Wrong array size !");
      }
      this.invariant = invariant;
      this.centroid = centroid;
      this.ellipse_axis = ellipse_axis;
      this.ellipse_angle = ellipse_angle;
      this.ellipse_eccentricity = ellipse_eccentricity;
      this.ellipse_intensity = ellipse_intensity;
    }

    public ChannelMoments(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ChannelMoments implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ChannelMoments implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:32</i>
   */
  public static class ChannelPerceptualHash extends Structure {

    /**
     * C type : double[8 + 1]
     */
    public double[] srgb_hu_phash = new double[8 + 1];
    /**
     * C type : double[8 + 1]
     */
    public double[] hclp_hu_phash = new double[8 + 1];
    public NativeSize number_colorspaces;
    /**
     * C type : ColorspaceType[6 + 1]
     */
    public int[] colorspace = new int[6 + 1];
    /**
     * C type : double[6 + 1][8 + 1]
     */
    public double[] phash = new double[((6 + 1) * (8 + 1))];
    public NativeSize number_channels;

    public ChannelPerceptualHash() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("srgb_hu_phash", "hclp_hu_phash", "number_colorspaces", "colorspace", "phash",
              "number_channels");
    }

    /**
     * @param srgb_hu_phash C type : double[8 + 1] <br>
     * @param hclp_hu_phash C type : double[8 + 1] <br>
     * @param colorspace C type : ColorspaceType[6 + 1] <br>
     * @param phash C type : double[6 + 1][8 + 1]
     */
    public ChannelPerceptualHash(double srgb_hu_phash[], double hclp_hu_phash[],
        NativeSize number_colorspaces, int colorspace[], double phash[],
        NativeSize number_channels) {
      super();
      if ((srgb_hu_phash.length != this.srgb_hu_phash.length)) {
        throw new IllegalArgumentException("Wrong array size !");
      }
      this.srgb_hu_phash = srgb_hu_phash;
      if ((hclp_hu_phash.length != this.hclp_hu_phash.length)) {
        throw new IllegalArgumentException("Wrong array size !");
      }
      this.hclp_hu_phash = hclp_hu_phash;
      this.number_colorspaces = number_colorspaces;
      if ((colorspace.length != this.colorspace.length)) {
        throw new IllegalArgumentException("Wrong array size !");
      }
      this.colorspace = colorspace;
      if ((phash.length != this.phash.length)) {
        throw new IllegalArgumentException("Wrong array size !");
      }
      this.phash = phash;
      this.number_channels = number_channels;
    }

    public ChannelPerceptualHash(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends ChannelPerceptualHash implements Structure.ByReference {

    }

    ;

    public static class ByValue extends ChannelPerceptualHash implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:7</i>
   */
  public static class StringInfo extends Structure {

    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : unsigned char*
     */
    public Pointer datum;
    public NativeSize length;
    public NativeSize signature;
    /**
     * C type : char*
     */
    public Pointer name;

    public StringInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("path", "datum", "length", "signature", "name");
    }

    /**
     * @param path C type : char* <br>
     * @param datum C type : unsigned char* <br>
     * @param name C type : char*
     */
    public StringInfo(Pointer path, Pointer datum, NativeSize length, NativeSize signature,
        Pointer name) {
      super();
      this.path = path;
      this.datum = datum;
      this.length = length;
      this.signature = signature;
      this.name = name;
    }

    public StringInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends StringInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends StringInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:10</i>
   */
  public static class Timer extends Structure {

    public double start;
    public double stop;
    public double total;

    public Timer() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("start", "stop", "total");
    }

    public Timer(double start, double stop, double total) {
      super();
      this.start = start;
      this.stop = stop;
      this.total = total;
    }

    public Timer(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends Timer implements Structure.ByReference {

    }

    ;

    public static class ByValue extends Timer implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:16</i>
   */
  public static class TimerInfo extends Structure {

    /**
     * C type : Timer
     */
    public SaMagickCore.Timer user;
    /**
     * C type : Timer
     */
    public SaMagickCore.Timer elapsed;
    /**
     * @see TimerState <br> C type : TimerState
     */
    public int state;
    public NativeSize signature;

    public TimerInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("user", "elapsed", "state", "signature");
    }

    /**
     * @param user C type : Timer <br>
     * @param elapsed C type : Timer <br>
     * @param state @see TimerState <br> C type : TimerState
     */
    public TimerInfo(SaMagickCore.Timer user, SaMagickCore.Timer elapsed, int state,
        NativeSize signature) {
      super();
      this.user = user;
      this.elapsed = elapsed;
      this.state = state;
      this.signature = signature;
    }

    public TimerInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends TimerInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends TimerInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:37</i>
   */
  public static class TypeInfo extends Structure {

    public NativeSize face;
    /**
     * C type : char*
     */
    public Pointer path;
    /**
     * C type : char*
     */
    public Pointer name;
    /**
     * C type : char*
     */
    public Pointer description;
    /**
     * C type : char*
     */
    public Pointer family;
    /**
     * @see StyleType <br> C type : StyleType
     */
    public int style;
    /**
     * @see StretchType <br> C type : StretchType
     */
    public int stretch;
    public NativeSize weight;
    /**
     * C type : char*
     */
    public Pointer encoding;
    /**
     * C type : char*
     */
    public Pointer foundry;
    /**
     * C type : char*
     */
    public Pointer format;
    /**
     * C type : char*
     */
    public Pointer metrics;
    /**
     * C type : char*
     */
    public Pointer glyphs;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int stealth;
    public NativeSize signature;

    public TypeInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays
          .asList("face", "path", "name", "description", "family", "style", "stretch", "weight",
              "encoding", "foundry", "format", "metrics", "glyphs", "stealth", "signature");
    }

    public TypeInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends TypeInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends TypeInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/vision.h:8</i>
   */
  public static class CCObjectInfo extends Structure {

    /**
     * C type : ssize_t
     */
    public SaMagickCore.ssize_t id;
    /**
     * C type : RectangleInfo
     */
    public SaMagickCore.RectangleInfo bounding_box;
    /**
     * C type : PixelInfo
     */
    public SaMagickCore.PixelInfo color;
    /**
     * C type : PointInfo
     */
    public SaMagickCore.PointInfo centroid;
    public double area;
    public double census;

    public CCObjectInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("id", "bounding_box", "color", "centroid", "area", "census");
    }

    /**
     * @param id C type : ssize_t <br>
     * @param bounding_box C type : RectangleInfo <br>
     * @param color C type : PixelInfo <br>
     * @param centroid C type : PointInfo
     */
    public CCObjectInfo(SaMagickCore.ssize_t id, SaMagickCore.RectangleInfo bounding_box,
        SaMagickCore.PixelInfo color, SaMagickCore.PointInfo centroid, double area, double census) {
      super();
      this.id = id;
      this.bounding_box = bounding_box;
      this.color = color;
      this.centroid = centroid;
      this.area = area;
      this.census = census;
    }

    public CCObjectInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends CCObjectInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends CCObjectInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xwindow.h:7</i>
   */
  public static class XImportInfo extends Structure {

    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int frame;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int borders;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int screen;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int descend;
    /**
     * @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public int silent;

    public XImportInfo() {
      super();
    }

    protected List<String> getFieldOrder() {
      return Arrays.asList("frame", "borders", "screen", "descend", "silent");
    }

    /**
     * @param frame @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param borders @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param screen @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param descend @see MagickBooleanType <br> C type : MagickBooleanType <br>
     * @param silent @see MagickBooleanType <br> C type : MagickBooleanType
     */
    public XImportInfo(int frame, int borders, int screen, int descend, int silent) {
      super();
      this.frame = frame;
      this.borders = borders;
      this.screen = screen;
      this.descend = descend;
      this.silent = silent;
    }

    public XImportInfo(Pointer peer) {
      super(peer);
    }

    public static class ByReference extends XImportInfo implements Structure.ByReference {

    }

    ;

    public static class ByValue extends XImportInfo implements Structure.ByValue {

    }

    ;
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:6</i>
   */
  public interface ssize_t extends Callback {

    SaMagickCore.ssize_t_callback apply(Pointer CustomStreamHandler);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:7</i>
   */
  public interface MagickOffsetType extends Callback {

    SaMagickCore.MagickOffsetType_callback apply(Pointer CustomStreamSeeker);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:8</i>
   */
  public interface CustomStreamTeller extends Callback {

    SaMagickCore.MagickOffsetType apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:10</i>
   */
  public interface ssize_t_callback extends Callback {

    int apply(Pointer charPtr1, NativeSize size_t1, Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:11</i>
   */
  public interface MagickOffsetType_callback extends Callback {

    int apply(int MagickOffsetType, int int1, Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/deprecate.h:0</i>
   */
  public interface BlobFifo extends Callback {

    IntByReference apply(SaMagickCore.Image ImagePtr1, Pointer voidPtr1, NativeSize size_t1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:82</i>
   */
  public interface ErrorHandler extends Callback {

    void apply(int ExceptionType1, Pointer charPtr1, Pointer charPtr2);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:83</i>
   */
  public interface FatalErrorHandler extends Callback {

    void apply(int ExceptionType1, Pointer charPtr1, Pointer charPtr2);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:84</i>
   */
  public interface WarningHandler extends Callback {

    void apply(int ExceptionType1, Pointer charPtr1, Pointer charPtr2);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:1</i>
   */
  public interface GetImageViewMethod extends Callback {

    int apply(Pointer ImageViewPtr1, int ssize_t, int int1, Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:2</i>
   */
  public interface SetImageViewMethod extends Callback {

    int apply(Pointer ImageViewPtr1, int ssize_t, int int1, Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:3</i>
   */
  public interface TransferImageViewMethod extends Callback {

    int apply(Pointer ImageViewPtr1, Pointer ImageViewPtr2, int ssize_t, int int1,
        Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:4</i>
   */
  public interface UpdateImageViewMethod extends Callback {

    int apply(Pointer ImageViewPtr1, int ssize_t, int int1, Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:33</i>
   */
  public interface DestroyLinkedList_arg1_callback extends Callback {

    Pointer apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:34</i>
   */
  public interface InsertValueInSortedLinkedList_arg1_callback extends Callback {

    int apply(Pointer voidPtr1, Pointer voidPtr2);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:35</i>
   */
  public interface ClearLinkedList_arg1_callback extends Callback {

    Pointer apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:27</i>
   */
  public interface MagickLogMethod extends Callback {

    void apply(int LogEventType1, Pointer charPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:20</i>
   */
  public interface EncodeImageHandler extends Callback {

    int apply(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
        SaMagickCore.ExceptionInfo ExceptionInfoPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:21</i>
   */
  public interface IsImageFormatHandler extends Callback {

    int apply(Pointer charPtr1, NativeSize size_t1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/memory_.h:1</i>
   */
  public interface AcquireMemoryHandler extends Callback {

    Pointer apply(NativeSize size_t1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:17</i>
   */
  public interface ImageFilterHandler extends Callback {

    NativeSize apply(PointerByReference ImagePtrPtr1, int int1, PointerByReference charPtrPtr1,
        SaMagickCore.ExceptionInfo ExceptionInfoPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/monitor.h:1</i>
   */
  public interface MagickBooleanType2 extends Callback {

    SaMagickCore.MagickBooleanType_callback apply(Pointer MagickProgressMonitor);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/monitor.h:16</i>
   */
  public interface MagickBooleanType_callback extends Callback {

    int apply(Pointer charPtr1, int MagickOffsetType, int MagickSizeType, Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:36</i>
   */
  public interface CloneSplayTree_arg1_callback extends Callback {

    Pointer apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:37</i>
   */
  public interface CloneSplayTree_arg2_callback extends Callback {

    Pointer apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:38</i>
   */
  public interface NewSplayTree_arg1_callback extends Callback {

    int apply(Pointer voidPtr1, Pointer voidPtr2);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:39</i>
   */
  public interface NewSplayTree_arg2_callback extends Callback {

    Pointer apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:40</i>
   */
  public interface NewSplayTree_arg3_callback extends Callback {

    Pointer apply(Pointer voidPtr1);
  }

  ;

  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:1</i>
   */
  public interface StreamHandler extends Callback {

    NativeSize apply(SaMagickCore.Image ImagePtr1, Pointer voidPtr1, NativeSize size_t1);
  }

  ;

  /**
   * Original signature : <code>MagickBooleanType AnimateImages(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/animate.h:1</i>
   */
  int AnimateImages(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType AnnotateImage(Image*, const DrawInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/annotate.h:1</i>
   */
  int AnnotateImage(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMultilineTypeMetrics(Image*, const DrawInfo*,
   * TypeMetric*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/annotate.h:3</i>
   */
  int GetMultilineTypeMetrics(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.TypeMetric TypeMetricPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetTypeMetrics(Image*, const DrawInfo*,
   * TypeMetric*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/annotate.h:5</i>
   */
  int GetTypeMetrics(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.TypeMetric TypeMetricPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ssize_t FormatMagickCaption(Image*, DrawInfo*, const
   * MagickBooleanType, TypeMetric*, char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/annotate.h:7</i>
   */
  SaMagickCore.ssize_t FormatMagickCaption(SaMagickCore.Image ImagePtr1,
      SaMagickCore.DrawInfo DrawInfoPtr1, int MagickBooleanType1,
      SaMagickCore.TypeMetric TypeMetricPtr1, PointerByReference charPtrPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* RemoveImageArtifact(Image*, const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:1</i> <br>
   *
   * @deprecated use the safer methods {@link #RemoveImageArtifact(SaMagickCore.Image,
   * java.lang.String)} and {@link #RemoveImageArtifact(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  Pointer RemoveImageArtifact(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>char* RemoveImageArtifact(Image*, const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:1</i>
   */
  Pointer RemoveImageArtifact(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>const char* GetNextImageArtifact(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:3</i>
   */
  String GetNextImageArtifact(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>const char* GetImageArtifact(const Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:5</i> <br>
   *
   * @deprecated use the safer methods {@link #GetImageArtifact(SaMagickCore.Image,
   * java.lang.String)} and {@link #GetImageArtifact(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  String GetImageArtifact(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>const char* GetImageArtifact(const Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:5</i>
   */
  String GetImageArtifact(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>MagickBooleanType CloneImageArtifacts(Image*, const Image*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:7</i>
   */
  int CloneImageArtifacts(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2);

  /**
   * Original signature : <code>MagickBooleanType DefineImageArtifact(Image*, const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:9</i> <br>
   *
   * @deprecated use the safer methods {@link #DefineImageArtifact(SaMagickCore.Image,
   * java.lang.String)} and {@link #DefineImageArtifact(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DefineImageArtifact(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>MagickBooleanType DefineImageArtifact(Image*, const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:9</i>
   */
  int DefineImageArtifact(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>MagickBooleanType DeleteImageArtifact(Image*, const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:11</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DeleteImageArtifact(SaMagickCore.Image,
   * java.lang.String)} and {@link #DeleteImageArtifact(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DeleteImageArtifact(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>MagickBooleanType DeleteImageArtifact(Image*, const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:11</i>
   */
  int DeleteImageArtifact(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageArtifact(Image*, const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetImageArtifact(SaMagickCore.Image,
   * java.lang.String, java.lang.String)} and {@link #SetImageArtifact(SaMagickCore.Image,
   * com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int SetImageArtifact(SaMagickCore.Image ImagePtr1, Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>MagickBooleanType SetImageArtifact(Image*, const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:13</i>
   */
  int SetImageArtifact(SaMagickCore.Image ImagePtr1, String charPtr1, String charPtr2);

  /**
   * Original signature : <code>void DestroyImageArtifacts(Image*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:15</i>
   */
  void DestroyImageArtifacts(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void ResetImageArtifactIterator(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/artifact.h:17</i>
   */
  void ResetImageArtifactIterator(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>ImageType GetImageType(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:1</i>
   */
  int GetImageType(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>ImageType IdentifyImageGray(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:3</i>
   */
  int IdentifyImageGray(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ImageType IdentifyImageType(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:5</i>
   */
  int IdentifyImageType(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IdentifyImageMonochrome(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:7</i>
   */
  int IdentifyImageMonochrome(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImageGray(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:9</i>
   */
  int IsImageGray(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImageMonochrome(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:11</i>
   */
  int IsImageMonochrome(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImageOpaque(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:13</i>
   */
  int IsImageOpaque(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageDepth(Image*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:15</i>
   */
  int SetImageDepth(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageType(Image*, const ImageType,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:17</i>
   */
  int SetImageType(SaMagickCore.Image ImagePtr1, int ImageType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>RectangleInfo GetImageBoundingBox(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:19</i>
   */
  SaMagickCore.RectangleInfo.ByValue GetImageBoundingBox(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>size_t GetImageDepth(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:21</i>
   */
  NativeSize GetImageDepth(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>size_t GetImageQuantumDepth(const Image*, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/attribute.h:23</i>
   */
  NativeSize GetImageQuantumDepth(SaMagickCore.Image ImagePtr1, int MagickBooleanType1);

  /**
   * Original signature : <code>CustomStreamInfo* AcquireCustomStreamInfo(ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:1</i>
   */
  PointerByReference AcquireCustomStreamInfo(SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>CustomStreamInfo* DestroyCustomStreamInfo(CustomStreamInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:3</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyCustomStreamInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyCustomStreamInfo(Pointer CustomStreamInfoPtr1);

  /**
   * Original signature : <code>CustomStreamInfo* DestroyCustomStreamInfo(CustomStreamInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:3</i>
   */
  PointerByReference DestroyCustomStreamInfo(PointerByReference CustomStreamInfoPtr1);

  /**
   * Original signature : <code>FILE* GetBlobFileHandle(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:5</i>
   */
  PointerByReference GetBlobFileHandle(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* BlobToImage(const ImageInfo*, const void*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:7</i>
   */
  SaMagickCore.Image BlobToImage(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer voidPtr1,
      NativeSize size_t1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PingBlob(const ImageInfo*, const void*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:9</i>
   */
  SaMagickCore.Image PingBlob(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer voidPtr1,
      NativeSize size_t1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CustomStreamToImage(const ImageInfo*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:11</i>
   */
  SaMagickCore.Image CustomStreamToImage(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType BlobToFile(char*, const void*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #BlobToFile(java.nio.ByteBuffer, com.sun.jna.Pointer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.ExceptionInfo)} and {@link
   * #BlobToFile(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int BlobToFile(Pointer charPtr1, Pointer voidPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType BlobToFile(char*, const void*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:13</i>
   */
  int BlobToFile(ByteBuffer charPtr1, Pointer voidPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType FileToImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:15</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #FileToImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #FileToImage(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int FileToImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType FileToImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:15</i>
   */
  int FileToImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetBlobError(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:17</i>
   */
  int GetBlobError(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType ImageToFile(Image*, char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:19</i> <br>
   *
   * @deprecated use the safer methods {@link #ImageToFile(SaMagickCore.Image, java.nio.ByteBuffer,
   * SaMagickCore.ExceptionInfo)} and {@link #ImageToFile(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ImageToFile(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ImageToFile(Image*, char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:19</i>
   */
  int ImageToFile(SaMagickCore.Image ImagePtr1, ByteBuffer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType InjectImageBlob(const ImageInfo*, Image*, Image*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/blob.h:21</i> <br>
   *
   * @deprecated use the safer methods {@link #InjectImageBlob(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, SaMagickCore.Image, java.lang.String, SaMagickCore.ExceptionInfo)} and
   * {@link #InjectImageBlob(SaMagickCore.ImageInfo, SaMagickCore.Image, SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InjectImageBlob(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.Image ImagePtr2, Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType InjectImageBlob(const ImageInfo*, Image*, Image*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/blob.h:21</i>
   */
  int InjectImageBlob(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.Image ImagePtr2, String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsBlobExempt(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:23</i>
   */
  int IsBlobExempt(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType IsBlobSeekable(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:25</i>
   */
  int IsBlobSeekable(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType IsBlobTemporary(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:27</i>
   */
  int IsBlobTemporary(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickSizeType GetBlobSize(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:29</i>
   */
  long GetBlobSize(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>StreamHandler GetBlobStreamHandler(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:31</i>
   */
  SaMagickCore.StreamHandler GetBlobStreamHandler(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void* GetBlobStreamData(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:33</i>
   */
  Pointer GetBlobStreamData(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void DestroyBlob(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/blob.h:35</i>
   */
  void DestroyBlob(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void DuplicateBlob(Image*, const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:37</i>
   */
  void DuplicateBlob(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2);

  /**
   * Original signature : <code>void* FileToBlob(const char*, const size_t, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:39</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #FileToBlob(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} and {@link #FileToBlob(com.sun.jna.Pointer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer FileToBlob(Pointer charPtr1, NativeSize size_t1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void* FileToBlob(const char*, const size_t, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:39</i>
   */
  Pointer FileToBlob(String charPtr1, NativeSize size_t1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void* ImageToBlob(const ImageInfo*, Image*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:41</i>
   */
  Pointer ImageToBlob(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void ImageToCustomStream(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:43</i>
   */
  void ImageToCustomStream(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void* ImagesToBlob(const ImageInfo*, Image*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:45</i>
   */
  Pointer ImagesToBlob(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void ImagesToCustomStream(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:47</i>
   */
  void ImagesToCustomStream(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void SetBlobExempt(Image*, const MagickBooleanType)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:49</i>
   */
  void SetBlobExempt(SaMagickCore.Image ImagePtr1, int MagickBooleanType1);

  /**
   * Original signature : <code>void SetCustomStreamData(CustomStreamInfo*, void*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:51</i> <br>
   *
   * @deprecated use the safer method {@link #SetCustomStreamData(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void SetCustomStreamData(Pointer CustomStreamInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>void SetCustomStreamData(CustomStreamInfo*, void*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:51</i>
   */
  void SetCustomStreamData(PointerByReference CustomStreamInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>void SetCustomStreamReader(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:53</i> <br>
   *
   * @deprecated use the safer method {@link #SetCustomStreamReader(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void SetCustomStreamReader(Pointer CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamReader(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:53</i>
   */
  void SetCustomStreamReader(PointerByReference CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamSeeker(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:55</i> <br>
   *
   * @deprecated use the safer method {@link #SetCustomStreamSeeker(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void SetCustomStreamSeeker(Pointer CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamSeeker(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:55</i>
   */
  void SetCustomStreamSeeker(PointerByReference CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamTeller(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:57</i> <br>
   *
   * @deprecated use the safer method {@link #SetCustomStreamTeller(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void SetCustomStreamTeller(Pointer CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamTeller(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:57</i>
   */
  void SetCustomStreamTeller(PointerByReference CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamWriter(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:59</i> <br>
   *
   * @deprecated use the safer method {@link #SetCustomStreamWriter(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void SetCustomStreamWriter(Pointer CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetCustomStreamWriter(CustomStreamInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/blob.h:59</i>
   */
  void SetCustomStreamWriter(PointerByReference CustomStreamInfoPtr1);

  /**
   * Original signature : <code>CacheType GetImagePixelCacheType(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:9</i>
   */
  int GetImagePixelCacheType(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>char* GetPixelCacheFilename(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:11</i>
   */
  String GetPixelCacheFilename(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void* GetVirtualMetacontent(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:14</i>
   */
  Pointer GetVirtualMetacontent(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickSizeType GetImageExtent(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:17</i>
   */
  long GetImageExtent(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void* AcquirePixelCachePixels(const Image*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:20</i>
   */
  Pointer AcquirePixelCachePixels(SaMagickCore.Image ImagePtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void* GetAuthenticMetacontent(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:22</i>
   */
  Pointer GetAuthenticMetacontent(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void* GetPixelCachePixels(Image*, MagickSizeType*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:24</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetPixelCachePixels(SaMagickCore.Image,
   * java.nio.LongBuffer, SaMagickCore.ExceptionInfo)} and {@link #GetPixelCachePixels(SaMagickCore.Image,
   * com.sun.jna.ptr.LongByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer GetPixelCachePixels(SaMagickCore.Image ImagePtr1, LongByReference MagickSizeTypePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void* GetPixelCachePixels(Image*, MagickSizeType*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache.h:24</i>
   */
  Pointer GetPixelCachePixels(SaMagickCore.Image ImagePtr1, LongBuffer MagickSizeTypePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>CacheView* AcquireAuthenticCacheView(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:21</i>
   */
  PointerByReference AcquireAuthenticCacheView(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>CacheView* AcquireVirtualCacheView(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:23</i>
   */
  PointerByReference AcquireVirtualCacheView(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>CacheView* CloneCacheView(const CacheView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:25</i> <br>
   *
   * @deprecated use the safer method {@link #CloneCacheView(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference CloneCacheView(Pointer CacheViewPtr1);

  /**
   * Original signature : <code>CacheView* CloneCacheView(const CacheView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:25</i>
   */
  PointerByReference CloneCacheView(PointerByReference CacheViewPtr1);

  /**
   * Original signature : <code>CacheView* DestroyCacheView(CacheView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:27</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyCacheView(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyCacheView(Pointer CacheViewPtr1);

  /**
   * Original signature : <code>CacheView* DestroyCacheView(CacheView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:27</i>
   */
  PointerByReference DestroyCacheView(PointerByReference CacheViewPtr1);

  /**
   * Original signature : <code>ClassType GetCacheViewStorageClass(const CacheView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:29</i> <br>
   *
   * @deprecated use the safer method {@link #GetCacheViewStorageClass(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  int GetCacheViewStorageClass(Pointer CacheViewPtr1);

  /**
   * Original signature : <code>ClassType GetCacheViewStorageClass(const CacheView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:29</i>
   */
  int GetCacheViewStorageClass(PointerByReference CacheViewPtr1);

  /**
   * Original signature : <code>ColorspaceType GetCacheViewColorspace(const CacheView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:31</i> <br>
   *
   * @deprecated use the safer method {@link #GetCacheViewColorspace(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  int GetCacheViewColorspace(Pointer CacheViewPtr1);

  /**
   * Original signature : <code>ColorspaceType GetCacheViewColorspace(const CacheView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:31</i>
   */
  int GetCacheViewColorspace(PointerByReference CacheViewPtr1);

  /**
   * Original signature : <code>Image* GetCacheViewImage(const CacheView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:33</i> <br>
   *
   * @deprecated use the safer method {@link #GetCacheViewImage(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  SaMagickCore.Image GetCacheViewImage(Pointer CacheViewPtr1);

  /**
   * Original signature : <code>Image* GetCacheViewImage(const CacheView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:33</i>
   */
  SaMagickCore.Image GetCacheViewImage(PointerByReference CacheViewPtr1);

  /**
   * Original signature : <code>void* GetCacheViewVirtualMetacontent(const CacheView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:36</i> <br>
   *
   * @deprecated use the safer method {@link #GetCacheViewVirtualMetacontent(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetCacheViewVirtualMetacontent(Pointer CacheViewPtr1);

  /**
   * Original signature : <code>void* GetCacheViewVirtualMetacontent(const CacheView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cache-view.h:36</i>
   */
  Pointer GetCacheViewVirtualMetacontent(PointerByReference CacheViewPtr1);

  /**
   * Original signature : <code>Image* ChannelFxImage(const Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:1</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ChannelFxImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #ChannelFxImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image ChannelFxImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ChannelFxImage(const Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:1</i>
   */
  SaMagickCore.Image ChannelFxImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CombineImages(const Image*, const, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:3</i>
   */
  SaMagickCore.Image CombineImages(SaMagickCore.Image ImagePtr1, int ColorspaceType,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SeparateImage(const Image*, const, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:5</i>
   */
  SaMagickCore.Image SeparateImage(SaMagickCore.Image ImagePtr1, int ChannelType,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SeparateImages(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:7</i>
   */
  SaMagickCore.Image SeparateImages(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetImageAlphaChannel(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:9</i>
   */
  int GetImageAlphaChannel(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageAlphaChannel(Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/channel.h:11</i>
   */
  int SetImageAlphaChannel(SaMagickCore.Image ImagePtr1, int AlphaChannelOption,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DecipherImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cipher.h:1</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DecipherImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #DecipherImage(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int DecipherImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DecipherImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cipher.h:1</i>
   */
  int DecipherImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType EncipherImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cipher.h:3</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #EncipherImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #EncipherImage(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int EncipherImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType EncipherImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cipher.h:3</i>
   */
  int EncipherImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType PasskeyDecipherImage(Image*, const StringInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cipher.h:5</i>
   */
  int PasskeyDecipherImage(SaMagickCore.Image ImagePtr1, SaMagickCore.StringInfo StringInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType PasskeyEncipherImage(Image*, const StringInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/cipher.h:7</i>
   */
  int PasskeyEncipherImage(SaMagickCore.Image ImagePtr1, SaMagickCore.StringInfo StringInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const char* GetClientPath()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/client.h:1</i>
   */
  String GetClientPath();

  /**
   * Original signature : <code>const char* GetClientName()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/client.h:3</i>
   */
  String GetClientName();

  /**
   * Original signature : <code>const char* SetClientName(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/client.h:5</i> <br>
   *
   * @deprecated use the safer methods {@link #SetClientName(java.lang.String)} and {@link
   * #SetClientName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  String SetClientName(Pointer charPtr1);

  /**
   * Original signature : <code>const char* SetClientName(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/client.h:5</i>
   */
  String SetClientName(String charPtr1);

  /**
   * Original signature : <code>const char* SetClientPath(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/client.h:7</i> <br>
   *
   * @deprecated use the safer methods {@link #SetClientPath(java.lang.String)} and {@link
   * #SetClientPath(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  String SetClientPath(Pointer charPtr1);

  /**
   * Original signature : <code>const char* SetClientPath(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/client.h:7</i>
   */
  String SetClientPath(String charPtr1);

  /**
   * Original signature : <code>char** GetCoderList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:9</i> <br>
   *
   * @deprecated use the safer methods {@link #GetCoderList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetCoderList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetCoderList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetCoderList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:9</i>
   */
  PointerByReference GetCoderList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const CoderInfo* GetCoderInfo(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:11</i> <br>
   *
   * @deprecated use the safer methods {@link #GetCoderInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetCoderInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.CoderInfo GetCoderInfo(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const CoderInfo* GetCoderInfo(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:11</i>
   */
  SaMagickCore.CoderInfo GetCoderInfo(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const CoderInfo** GetCoderInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetCoderInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetCoderInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.CoderInfo.ByReference[] GetCoderInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const CoderInfo** GetCoderInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:13</i>
   */
  SaMagickCore.CoderInfo.ByReference[] GetCoderInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListCoderInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:15</i> <br>
   *
   * @deprecated use the safer method {@link #ListCoderInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListCoderInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListCoderInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/coder.h:15</i>
   */
  int ListCoderInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetColorList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:25</i> <br>
   *
   * @deprecated use the safer methods {@link #GetColorList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetColorList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetColorList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetColorList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:25</i>
   */
  PointerByReference GetColorList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ColorInfo* GetColorInfo(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:27</i> <br>
   *
   * @deprecated use the safer methods {@link #GetColorInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetColorInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.ColorInfo GetColorInfo(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ColorInfo* GetColorInfo(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:27</i>
   */
  SaMagickCore.ColorInfo GetColorInfo(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ColorInfo** GetColorInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:29</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetColorInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetColorInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.ColorInfo.ByReference[] GetColorInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ColorInfo** GetColorInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:29</i>
   */
  SaMagickCore.ColorInfo.ByReference[] GetColorInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsEquivalentImage(const Image*, const Image*,
   * ssize_t*, ssize_t*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/color.h:31</i>
   */
  int IsEquivalentImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ssize_t x, SaMagickCore.ssize_t y, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListColorInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:33</i> <br>
   *
   * @deprecated use the safer method {@link #ListColorInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListColorInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListColorInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:33</i>
   */
  int ListColorInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType QueryColorCompliance(const char*, const
   * ComplianceType, PixelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/color.h:35</i> <br>
   *
   * @deprecated use the safer methods {@link #QueryColorCompliance(java.lang.String, int,
   * SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} and {@link #QueryColorCompliance(com.sun.jna.Pointer,
   * int, SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int QueryColorCompliance(Pointer charPtr1, int ComplianceType1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType QueryColorCompliance(const char*, const
   * ComplianceType, PixelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/color.h:35</i>
   */
  int QueryColorCompliance(String charPtr1, int ComplianceType1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType QueryColorname(const Image*, const PixelInfo*,
   * const ComplianceType, char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/color.h:37</i> <br>
   *
   * @deprecated use the safer methods {@link #QueryColorname(SaMagickCore.Image,
   * SaMagickCore.PixelInfo, int, java.nio.ByteBuffer, SaMagickCore.ExceptionInfo)} and {@link
   * #QueryColorname(SaMagickCore.Image, SaMagickCore.PixelInfo, int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int QueryColorname(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      int ComplianceType1, Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType QueryColorname(const Image*, const PixelInfo*,
   * const ComplianceType, char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/color.h:37</i>
   */
  int QueryColorname(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      int ComplianceType1, ByteBuffer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void ConcatenateColorComponent(const PixelInfo*, const, const
   * ComplianceType, char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:39</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ConcatenateColorComponent(SaMagickCore.PixelInfo,
   * int, int, java.nio.ByteBuffer)} and {@link #ConcatenateColorComponent(SaMagickCore.PixelInfo,
   * int, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ConcatenateColorComponent(SaMagickCore.PixelInfo PixelInfoPtr1, int PixelChannel,
      int ComplianceType1, Pointer charPtr1);

  /**
   * Original signature : <code>void ConcatenateColorComponent(const PixelInfo*, const, const
   * ComplianceType, char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:39</i>
   */
  void ConcatenateColorComponent(SaMagickCore.PixelInfo PixelInfoPtr1, int PixelChannel,
      int ComplianceType1, ByteBuffer charPtr1);

  /**
   * Original signature : <code>void GetColorTuple(const PixelInfo*, const MagickBooleanType,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:41</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetColorTuple(SaMagickCore.PixelInfo, int,
   * java.nio.ByteBuffer)} and {@link #GetColorTuple(SaMagickCore.PixelInfo, int,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void GetColorTuple(SaMagickCore.PixelInfo PixelInfoPtr1, int MagickBooleanType1,
      Pointer charPtr1);

  /**
   * Original signature : <code>void GetColorTuple(const PixelInfo*, const MagickBooleanType,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/color.h:41</i>
   */
  void GetColorTuple(SaMagickCore.PixelInfo PixelInfoPtr1, int MagickBooleanType1,
      ByteBuffer charPtr1);

  /**
   * Original signature : <code>MagickBooleanType AcquireImageColormap(Image*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colormap.h:1</i>
   */
  int AcquireImageColormap(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType CycleColormapImage(Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colormap.h:3</i>
   */
  int CycleColormapImage(SaMagickCore.Image ImagePtr1, int ssize_t,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SortColormapByIntensity(Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colormap.h:5</i>
   */
  int SortColormapByIntensity(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ColorspaceType GetImageColorspaceType(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:37</i>
   */
  int GetImageColorspaceType(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageColorspace(Image*, const ColorspaceType,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:39</i>
   */
  int SetImageColorspace(SaMagickCore.Image ImagePtr1, int ColorspaceType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageGray(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:41</i>
   */
  int SetImageGray(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageMonochrome(Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:43</i>
   */
  int SetImageMonochrome(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType TransformImageColorspace(Image*, const
   * ColorspaceType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/colorspace.h:45</i>
   */
  int TransformImageColorspace(SaMagickCore.Image ImagePtr1, int ColorspaceType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>double* GetImageDistortions(Image*, const Image*, const MetricType,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:16</i>
   */
  DoubleByReference GetImageDistortions(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CompareImages(Image*, const Image*, const MetricType,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:18</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #CompareImages(SaMagickCore.Image, SaMagickCore.Image,
   * int, java.nio.DoubleBuffer, SaMagickCore.ExceptionInfo)} and {@link
   * #CompareImages(SaMagickCore.Image, SaMagickCore.Image, int, com.sun.jna.ptr.DoubleByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image CompareImages(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CompareImages(Image*, const Image*, const MetricType,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:18</i>
   */
  SaMagickCore.Image CompareImages(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, DoubleBuffer doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SimilarityImage(const Image*, const Image*, const MetricType,
   * const double, RectangleInfo*, double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/compare.h:20</i> <br>
   *
   * @deprecated use the safer methods {@link #SimilarityImage(SaMagickCore.Image,
   * SaMagickCore.Image, int, double, SaMagickCore.RectangleInfo, java.nio.DoubleBuffer,
   * SaMagickCore.ExceptionInfo)} and {@link #SimilarityImage(SaMagickCore.Image,
   * SaMagickCore.Image, int, double, SaMagickCore.RectangleInfo, com.sun.jna.ptr.DoubleByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image SimilarityImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, double double1, SaMagickCore.RectangleInfo RectangleInfoPtr1,
      DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SimilarityImage(const Image*, const Image*, const MetricType,
   * const double, RectangleInfo*, double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/compare.h:20</i>
   */
  SaMagickCore.Image SimilarityImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, double double1, SaMagickCore.RectangleInfo RectangleInfoPtr1,
      DoubleBuffer doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetImageDistortion(Image*, const Image*, const
   * MetricType, double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/compare.h:22</i> <br>
   *
   * @deprecated use the safer methods {@link #GetImageDistortion(SaMagickCore.Image,
   * SaMagickCore.Image, int, java.nio.DoubleBuffer, SaMagickCore.ExceptionInfo)} and {@link
   * #GetImageDistortion(SaMagickCore.Image, SaMagickCore.Image, int,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int GetImageDistortion(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetImageDistortion(Image*, const Image*, const
   * MetricType, double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/compare.h:22</i>
   */
  int GetImageDistortion(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int MetricType1, DoubleBuffer doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImagesEqual(const Image*, const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:24</i>
   */
  int IsImagesEqual(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageColorMetric(Image*, const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compare.h:26</i>
   */
  int SetImageColorMetric(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType CompositeImage(Image*, const Image*, const
   * CompositeOperator, const MagickBooleanType, const, const, ExceptionInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:75</i>
   */
  int CompositeImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int CompositeOperator1, int MagickBooleanType1, int ssize_t, int ssize_t2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType TextureImage(Image*, const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/composite.h:77</i>
   */
  int TextureImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType HuffmanDecodeImage(Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:26</i>
   */
  int HuffmanDecodeImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType HuffmanEncodeImage(const ImageInfo*, Image*,
   * Image*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:28</i>
   */
  int HuffmanEncodeImage(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.Image ImagePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LZWEncodeImage(Image*, const size_t, unsigned
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:30</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #LZWEncodeImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.ByteBuffer,
   * SaMagickCore.ExceptionInfo)} and {@link #LZWEncodeImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int LZWEncodeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1, Pointer magick_restrict,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LZWEncodeImage(Image*, const size_t, unsigned
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:30</i>
   */
  int LZWEncodeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1, ByteBuffer magick_restrict,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType PackbitsEncodeImage(Image*, const size_t, unsigned
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:32</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #PackbitsEncodeImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.ByteBuffer,
   * SaMagickCore.ExceptionInfo)} and {@link #PackbitsEncodeImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int PackbitsEncodeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1, Pointer magick_restrict,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType PackbitsEncodeImage(Image*, const size_t, unsigned
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:32</i>
   */
  int PackbitsEncodeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      ByteBuffer magick_restrict, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ZLIBEncodeImage(Image*, const size_t, unsigned
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:34</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ZLIBEncodeImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.ByteBuffer,
   * SaMagickCore.ExceptionInfo)} and {@link #ZLIBEncodeImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ZLIBEncodeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1, Pointer magick_restrict,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ZLIBEncodeImage(Image*, const size_t, unsigned
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:34</i>
   */
  int ZLIBEncodeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1, ByteBuffer magick_restrict,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void Ascii85Encode(Image*, const unsigned char)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/compress.h:36</i>
   */
  void Ascii85Encode(SaMagickCore.Image ImagePtr1, byte char1);

  /**
   * Original signature : <code>void Ascii85Flush(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/compress.h:38</i>
   */
  void Ascii85Flush(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void Ascii85Initialize(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/compress.h:40</i>
   */
  void Ascii85Initialize(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>char** GetConfigureList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:9</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetConfigureList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetConfigureList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetConfigureList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetConfigureList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:9</i>
   */
  PointerByReference GetConfigureList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetConfigureOption(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:11</i> <br>
   *
   * @deprecated use the safer methods {@link #GetConfigureOption(java.lang.String)} and {@link
   * #GetConfigureOption(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetConfigureOption(Pointer charPtr1);

  /**
   * Original signature : <code>char* GetConfigureOption(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:11</i>
   */
  Pointer GetConfigureOption(String charPtr1);

  /**
   * Original signature : <code>char* GetConfigureValue(const ConfigureInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:13</i>
   */
  String GetConfigureValue(SaMagickCore.ConfigureInfo ConfigureInfoPtr1);

  /**
   * Original signature : <code>const ConfigureInfo* GetConfigureInfo(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:15</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetConfigureInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetConfigureInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.ConfigureInfo GetConfigureInfo(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ConfigureInfo* GetConfigureInfo(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:15</i>
   */
  SaMagickCore.ConfigureInfo GetConfigureInfo(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ConfigureInfo** GetConfigureInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:17</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetConfigureInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetConfigureInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.ConfigureInfo.ByReference[] GetConfigureInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const ConfigureInfo** GetConfigureInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:17</i>
   */
  SaMagickCore.ConfigureInfo.ByReference[] GetConfigureInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* DestroyConfigureOptions(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:19</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyConfigureOptions(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyConfigureOptions(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* DestroyConfigureOptions(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:19</i>
   */
  PointerByReference DestroyConfigureOptions(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* GetConfigurePaths(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:21</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetConfigurePaths(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetConfigurePaths(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetConfigurePaths(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* GetConfigurePaths(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:21</i>
   */
  PointerByReference GetConfigurePaths(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* GetConfigureOptions(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:23</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetConfigureOptions(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetConfigureOptions(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetConfigureOptions(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* GetConfigureOptions(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:23</i>
   */
  PointerByReference GetConfigureOptions(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListConfigureInfo(FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:25</i>
   * <br>
   *
   * @deprecated use the safer method {@link #ListConfigureInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListConfigureInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListConfigureInfo(FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/configure.h:25</i>
   */
  int ListConfigureInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ConstituteImage(const size_t, const size_t, const char*,
   * const, const void*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/constitute.h:1</i> <br>
   *
   * @deprecated use the safer methods {@link #ConstituteImage(com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String, int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} and {@link #ConstituteImage(com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image ConstituteImage(NativeSize size_t1, NativeSize size_t2, Pointer charPtr1,
      int StorageType, Pointer voidPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ConstituteImage(const size_t, const size_t, const char*,
   * const, const void*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/constitute.h:1</i>
   */
  SaMagickCore.Image ConstituteImage(NativeSize size_t1, NativeSize size_t2, String charPtr1,
      int StorageType, Pointer voidPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PingImage(const ImageInfo*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:3</i>
   */
  SaMagickCore.Image PingImage(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PingImages(ImageInfo*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:5</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #PingImages(SaMagickCore.ImageInfo, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #PingImages(SaMagickCore.ImageInfo,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image PingImages(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PingImages(ImageInfo*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:5</i>
   */
  SaMagickCore.Image PingImages(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ReadImage(const ImageInfo*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:7</i>
   */
  SaMagickCore.Image ReadImage(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ReadImages(ImageInfo*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:9</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ReadImages(SaMagickCore.ImageInfo, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #ReadImages(SaMagickCore.ImageInfo,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image ReadImages(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ReadImages(ImageInfo*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:9</i>
   */
  SaMagickCore.Image ReadImages(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ReadInlineImage(const ImageInfo*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:11</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ReadInlineImage(SaMagickCore.ImageInfo,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #ReadInlineImage(SaMagickCore.ImageInfo,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image ReadInlineImage(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ReadInlineImage(const ImageInfo*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:11</i>
   */
  SaMagickCore.Image ReadInlineImage(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType WriteImage(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:13</i>
   */
  int WriteImage(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType WriteImages(const ImageInfo*, Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:15</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #WriteImages(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #WriteImages(SaMagickCore.ImageInfo, SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int WriteImages(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType WriteImages(const ImageInfo*, Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/constitute.h:15</i>
   */
  int WriteImages(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* BorderImage(const Image*, const RectangleInfo*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/decorate.h:9</i>
   */
  SaMagickCore.Image BorderImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, int CompositeOperator,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* FrameImage(const Image*, const FrameInfo*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/decorate.h:11</i>
   */
  SaMagickCore.Image FrameImage(SaMagickCore.Image ImagePtr1, SaMagickCore.FrameInfo FrameInfoPtr1,
      int CompositeOperator, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType RaiseImage(Image*, const RectangleInfo*, const
   * MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/decorate.h:13</i>
   */
  int RaiseImage(SaMagickCore.Image ImagePtr1, SaMagickCore.RectangleInfo RectangleInfoPtr1,
      int MagickBooleanType1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetDelegateCommand(const ImageInfo*, Image*, const char*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/delegate.h:13</i> <br>
   *
   * @deprecated use the safer methods {@link #GetDelegateCommand(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, java.lang.String, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #GetDelegateCommand(SaMagickCore.ImageInfo, SaMagickCore.Image, com.sun.jna.Pointer,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer GetDelegateCommand(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      Pointer charPtr1, Pointer charPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetDelegateCommand(const ImageInfo*, Image*, const char*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/delegate.h:13</i>
   */
  Pointer GetDelegateCommand(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      String charPtr1, String charPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetDelegateList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:15</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetDelegateList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetDelegateList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetDelegateList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetDelegateList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:15</i>
   */
  PointerByReference GetDelegateList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetDelegateCommands(const DelegateInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:17</i>
   */
  String GetDelegateCommands(SaMagickCore.DelegateInfo DelegateInfoPtr1);

  /**
   * Original signature : <code>const DelegateInfo* GetDelegateInfo(const char*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:19</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetDelegateInfo(java.lang.String, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetDelegateInfo(com.sun.jna.Pointer,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.DelegateInfo GetDelegateInfo(Pointer charPtr1, Pointer charPtr2,
      SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>const DelegateInfo* GetDelegateInfo(const char*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:19</i>
   */
  SaMagickCore.DelegateInfo GetDelegateInfo(String charPtr1, String charPtr2,
      SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>const DelegateInfo** GetDelegateInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:21</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetDelegateInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetDelegateInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.DelegateInfo.ByReference[] GetDelegateInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const DelegateInfo** GetDelegateInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:21</i>
   */
  SaMagickCore.DelegateInfo.ByReference[] GetDelegateInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>int ExternalDelegateCommand(const, const, const char*, char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:23</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ExternalDelegateCommand(int, int, java.lang.String,
   * java.nio.ByteBuffer, SaMagickCore.ExceptionInfo)} and {@link #ExternalDelegateCommand(int, int,
   * com.sun.jna.Pointer, com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ExternalDelegateCommand(int MagickBooleanType, int MagickBooleanType2, Pointer charPtr1,
      Pointer charPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>int ExternalDelegateCommand(const, const, const char*, char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:23</i>
   */
  int ExternalDelegateCommand(int MagickBooleanType, int MagickBooleanType2, String charPtr1,
      ByteBuffer charPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ssize_t GetDelegateMode(const DelegateInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:25</i>
   */
  SaMagickCore.ssize_t GetDelegateMode(SaMagickCore.DelegateInfo DelegateInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetDelegateThreadSupport(const
   * DelegateInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:27</i>
   */
  int GetDelegateThreadSupport(SaMagickCore.DelegateInfo DelegateInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType InvokeDelegate(ImageInfo*, Image*, const char*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/delegate.h:29</i> <br>
   *
   * @deprecated use the safer methods {@link #InvokeDelegate(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, java.lang.String, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #InvokeDelegate(SaMagickCore.ImageInfo, SaMagickCore.Image, com.sun.jna.Pointer,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InvokeDelegate(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      Pointer charPtr1, Pointer charPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType InvokeDelegate(ImageInfo*, Image*, const char*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/delegate.h:29</i>
   */
  int InvokeDelegate(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      String charPtr1, String charPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListDelegateInfo(FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:31</i>
   * <br>
   *
   * @deprecated use the safer method {@link #ListDelegateInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListDelegateInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListDelegateInfo(FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/delegate.h:31</i>
   */
  int ListDelegateInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickSeekableStream(const MagickInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/deprecate.h:2</i>
   */
  int GetMagickSeekableStream(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>void* CropImageToHBITMAP(Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/deprecate.h:4</i>
   */
  Pointer CropImageToHBITMAP(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void* ImageToHBITMAP(Image*, ExceptionInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/deprecate.h:6</i>
   */
  Pointer ImageToHBITMAP(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DisplayImages(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/display.h:1</i>
   */
  int DisplayImages(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType RemoteDisplayCommand(const ImageInfo*, const
   * char*, const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/display.h:3</i> <br>
   *
   * @deprecated use the safer methods {@link #RemoteDisplayCommand(SaMagickCore.ImageInfo,
   * java.lang.String, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #RemoteDisplayCommand(SaMagickCore.ImageInfo, com.sun.jna.Pointer, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int RemoteDisplayCommand(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1, Pointer charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType RemoteDisplayCommand(const ImageInfo*, const
   * char*, const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/display.h:3</i>
   */
  int RemoteDisplayCommand(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1, String charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* AffineTransformImage(const Image*, const AffineMatrix*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:41</i>
   */
  SaMagickCore.Image AffineTransformImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.AffineMatrix AffineMatrixPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* DistortImage(const Image*, const DistortMethod, const size_t,
   * const double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/distort.h:43</i> <br>
   *
   * @deprecated use the safer methods {@link #DistortImage(SaMagickCore.Image, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, double[], SaMagickCore.ExceptionInfo)} and
   * {@link #DistortImage(SaMagickCore.Image, int, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image DistortImage(SaMagickCore.Image ImagePtr1, int DistortMethod1,
      NativeSize size_t1, DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>Image* DistortImage(const Image*, const DistortMethod, const size_t,
   * const double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/distort.h:43</i>
   */
  SaMagickCore.Image DistortImage(SaMagickCore.Image ImagePtr1, int DistortMethod1,
      NativeSize size_t1, double doublePtr1[], SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>Image* DistortResizeImage(const Image*, const size_t, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:45</i>
   */
  SaMagickCore.Image DistortResizeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* RotateImage(const Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distort.h:47</i>
   */
  SaMagickCore.Image RotateImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SparseColorImage(const Image*, const SparseColorMethod, const
   * size_t, const double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/distort.h:49</i> <br>
   *
   * @deprecated use the safer methods {@link #SparseColorImage(SaMagickCore.Image, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, double[], SaMagickCore.ExceptionInfo)} and
   * {@link #SparseColorImage(SaMagickCore.Image, int, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image SparseColorImage(SaMagickCore.Image ImagePtr1, int SparseColorMethod1,
      NativeSize size_t1, DoubleByReference doublePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SparseColorImage(const Image*, const SparseColorMethod, const
   * size_t, const double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/distort.h:49</i>
   */
  SaMagickCore.Image SparseColorImage(SaMagickCore.Image ImagePtr1, int SparseColorMethod1,
      NativeSize size_t1, double doublePtr1[], SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void DistributePixelCacheServer(const int, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/distribute-cache.h:1</i>
   */
  void DistributePixelCacheServer(int int1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>DrawInfo* AcquireDrawInfo()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/draw.h:185</i>
   */
  SaMagickCore.DrawInfo AcquireDrawInfo();

  /**
   * Original signature : <code>DrawInfo* CloneDrawInfo(const ImageInfo*, const DrawInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:187</i>
   */
  SaMagickCore.DrawInfo CloneDrawInfo(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.DrawInfo DrawInfoPtr1);

  /**
   * Original signature : <code>DrawInfo* DestroyDrawInfo(DrawInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:189</i>
   */
  SaMagickCore.DrawInfo DestroyDrawInfo(SaMagickCore.DrawInfo DrawInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawAffineImage(Image*, const Image*, const
   * AffineMatrix*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/draw.h:191</i>
   */
  int DrawAffineImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.AffineMatrix AffineMatrixPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawClipPath(Image*, const DrawInfo*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:193</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DrawClipPath(SaMagickCore.Image,
   * SaMagickCore.DrawInfo, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #DrawClipPath(SaMagickCore.Image, SaMagickCore.DrawInfo, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int DrawClipPath(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawClipPath(Image*, const DrawInfo*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:193</i>
   */
  int DrawClipPath(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawGradientImage(Image*, const DrawInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:195</i>
   */
  int DrawGradientImage(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawImage(Image*, const DrawInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:197</i>
   */
  int DrawImage(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawPatternPath(Image*, const DrawInfo*, const
   * char*, Image**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/draw.h:199</i> <br>
   *
   * @deprecated use the safer methods {@link #DrawPatternPath(SaMagickCore.Image,
   * SaMagickCore.DrawInfo, java.lang.String, SaMagickCore.Image.ByReference[],
   * SaMagickCore.ExceptionInfo)} and {@link #DrawPatternPath(SaMagickCore.Image,
   * SaMagickCore.DrawInfo, com.sun.jna.Pointer, SaMagickCore.Image.ByReference[],
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int DrawPatternPath(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      Pointer charPtr1, PointerByReference ImagePtrPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawPatternPath(Image*, const DrawInfo*, const
   * char*, Image**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/draw.h:199</i>
   */
  int DrawPatternPath(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      String charPtr1, SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawPatternPath(Image*, const DrawInfo*, const
   * char*, Image**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/draw.h:199</i>
   */
  int DrawPatternPath(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      Pointer charPtr1, SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DrawPrimitive(Image*, const DrawInfo*, const
   * PrimitiveInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/draw.h:201</i>
   */
  int DrawPrimitive(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.PrimitiveInfo PrimitiveInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void GetAffineMatrix(AffineMatrix*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:203</i>
   */
  void GetAffineMatrix(SaMagickCore.AffineMatrix AffineMatrixPtr1);

  /**
   * Original signature : <code>void GetDrawInfo(const ImageInfo*, DrawInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/draw.h:205</i>
   */
  void GetDrawInfo(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.DrawInfo DrawInfoPtr1);

  /**
   * Original signature : <code>Image* AdaptiveBlurImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:33</i>
   */
  SaMagickCore.Image AdaptiveBlurImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* AdaptiveSharpenImage(const Image*, const double, const
   * double, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:35</i>
   */
  SaMagickCore.Image AdaptiveSharpenImage(SaMagickCore.Image ImagePtr1, double double1,
      double double2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* BlurImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:37</i>
   */
  SaMagickCore.Image BlurImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ConvolveImage(const Image*, const KernelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:39</i>
   */
  SaMagickCore.Image ConvolveImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.KernelInfo KernelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* DespeckleImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:41</i>
   */
  SaMagickCore.Image DespeckleImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* EdgeImage(const Image*, const double, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:43</i>
   */
  SaMagickCore.Image EdgeImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* EmbossImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:45</i>
   */
  SaMagickCore.Image EmbossImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* GaussianBlurImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:47</i>
   */
  SaMagickCore.Image GaussianBlurImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* KuwaharaImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:49</i>
   */
  SaMagickCore.Image KuwaharaImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* LocalContrastImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:51</i>
   */
  SaMagickCore.Image LocalContrastImage(SaMagickCore.Image ImagePtr1, double double1,
      double double2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* MotionBlurImage(const Image*, const double, const double,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/effect.h:53</i>
   */
  SaMagickCore.Image MotionBlurImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      double double3, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PreviewImage(const Image*, const PreviewType,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:55</i>
   */
  SaMagickCore.Image PreviewImage(SaMagickCore.Image ImagePtr1, int PreviewType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* RotationalBlurImage(const Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:57</i>
   */
  SaMagickCore.Image RotationalBlurImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SelectiveBlurImage(const Image*, const double, const double,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/effect.h:59</i>
   */
  SaMagickCore.Image SelectiveBlurImage(SaMagickCore.Image ImagePtr1, double double1,
      double double2, double double3, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ShadeImage(const Image*, const, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:61</i>
   */
  SaMagickCore.Image ShadeImage(SaMagickCore.Image ImagePtr1, int MagickBooleanType, double double1,
      double double2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SharpenImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:63</i>
   */
  SaMagickCore.Image SharpenImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SpreadImage(const Image*, const, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/effect.h:65</i>
   */
  SaMagickCore.Image SpreadImage(SaMagickCore.Image ImagePtr1, int PixelInterpolateMethod,
      double double1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* UnsharpMaskImage(const Image*, const double, const double,
   * const double, const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/effect.h:67</i>
   */
  SaMagickCore.Image UnsharpMaskImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      double double3, double double4, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType AutoGammaImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:1</i>
   */
  int AutoGammaImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType AutoLevelImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:3</i>
   */
  int AutoLevelImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType BrightnessContrastImage(Image*, const double,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/enhance.h:5</i>
   */
  int BrightnessContrastImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ClutImage(Image*, const Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:7</i>
   */
  int ClutImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int PixelInterpolateMethod, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ColorDecisionListImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:9</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ColorDecisionListImage(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #ColorDecisionListImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ColorDecisionListImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ColorDecisionListImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:9</i>
   */
  int ColorDecisionListImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ContrastImage(Image*, const MagickBooleanType,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:11</i>
   */
  int ContrastImage(SaMagickCore.Image ImagePtr1, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ContrastStretchImage(Image*, const double, const
   * double, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:13</i>
   */
  int ContrastStretchImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType EqualizeImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:15</i>
   */
  int EqualizeImage(SaMagickCore.Image image, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GammaImage(Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:17</i>
   */
  int GammaImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GrayscaleImage(Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:19</i>
   */
  int GrayscaleImage(SaMagickCore.Image ImagePtr1, int PixelIntensityMethod,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType HaldClutImage(Image*, const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:21</i>
   */
  int HaldClutImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LevelImage(Image*, const double, const double,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/enhance.h:23</i>
   */
  int LevelImage(SaMagickCore.Image ImagePtr1, double double1, double double2, double double3,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LevelizeImage(Image*, const double, const double,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/enhance.h:25</i>
   */
  int LevelizeImage(SaMagickCore.Image ImagePtr1, double double1, double double2, double double3,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LevelImageColors(Image*, const PixelInfo*, const
   * PixelInfo*, const MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/enhance.h:27</i>
   */
  int LevelImageColors(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr2, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LinearStretchImage(Image*, const double, const
   * double, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:29</i>
   */
  int LinearStretchImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ModulateImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:31</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ModulateImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #ModulateImage(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ModulateImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ModulateImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:31</i>
   */
  int ModulateImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType NegateImage(Image*, const MagickBooleanType,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:33</i>
   */
  int NegateImage(SaMagickCore.Image ImagePtr1, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType NormalizeImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:35</i>
   */
  int NormalizeImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SigmoidalContrastImage(Image*, const
   * MagickBooleanType, const double, const double, ExceptionInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:37</i>
   */
  int SigmoidalContrastImage(SaMagickCore.Image ImagePtr1, int MagickBooleanType1, double double1,
      double double2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* EnhanceImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/enhance.h:39</i>
   */
  SaMagickCore.Image EnhanceImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetExceptionMessage(const int)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:86</i>
   */
  Pointer GetExceptionMessage(int int1);

  /**
   * Original signature : <code>char* GetLocaleExceptionMessage(const ExceptionType, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:88</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetLocaleExceptionMessage(int, java.lang.String)} and
   * {@link #GetLocaleExceptionMessage(int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  String GetLocaleExceptionMessage(int ExceptionType1, Pointer charPtr1);

  /**
   * Original signature : <code>char* GetLocaleExceptionMessage(const ExceptionType, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:88</i>
   */
  String GetLocaleExceptionMessage(int ExceptionType1, String charPtr1);

  /**
   * Original signature : <code>ErrorHandler SetErrorHandler(ErrorHandler)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:90</i>
   */
  SaMagickCore.ErrorHandler SetErrorHandler(SaMagickCore.ErrorHandler ErrorHandler1);

  /**
   * Original signature : <code>ExceptionInfo* AcquireExceptionInfo()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:92</i>
   */
  SaMagickCore.ExceptionInfo AcquireExceptionInfo();

  /**
   * Original signature : <code>ExceptionInfo* CloneExceptionInfo(ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:94</i>
   */
  SaMagickCore.ExceptionInfo CloneExceptionInfo(SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ExceptionInfo* DestroyExceptionInfo(ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:96</i>
   */
  SaMagickCore.ExceptionInfo DestroyExceptionInfo(SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>FatalErrorHandler SetFatalErrorHandler(FatalErrorHandler)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/exception.h:98</i>
   */
  SaMagickCore.FatalErrorHandler SetFatalErrorHandler(
      SaMagickCore.FatalErrorHandler FatalErrorHandler1);

  /**
   * Original signature : <code>ChannelFeatures* GetImageFeatures(const Image*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/feature.h:18</i>
   */
  SaMagickCore.ChannelFeatures GetImageFeatures(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CannyEdgeImage(const Image*, const double, const double,
   * const double, const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/feature.h:20</i>
   */
  SaMagickCore.Image CannyEdgeImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      double double3, double double4, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* HoughLineImage(const Image*, const size_t, const size_t,
   * const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/feature.h:22</i>
   */
  SaMagickCore.Image HoughLineImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, NativeSize size_t3, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* MeanShiftImage(const Image*, const size_t, const size_t,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/feature.h:24</i>
   */
  SaMagickCore.Image MeanShiftImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, double double1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ComplexImages(const Image*, const ComplexOperator,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:11</i>
   */
  SaMagickCore.Image ComplexImages(SaMagickCore.Image ImagePtr1, int ComplexOperator1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ForwardFourierTransformImage(const Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:13</i>
   */
  SaMagickCore.Image ForwardFourierTransformImage(SaMagickCore.Image ImagePtr1,
      int MagickBooleanType, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* InverseFourierTransformImage(const Image*, const Image*,
   * const, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fourier.h:15</i>
   */
  SaMagickCore.Image InverseFourierTransformImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.Image ImagePtr2, int MagickBooleanType,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* AddNoiseImage(const Image*, const NoiseType, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:11</i>
   */
  SaMagickCore.Image AddNoiseImage(SaMagickCore.Image ImagePtr1, int NoiseType1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* BlueShiftImage(const Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:13</i>
   */
  SaMagickCore.Image BlueShiftImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CharcoalImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:15</i>
   */
  SaMagickCore.Image CharcoalImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ColorizeImage(const Image*, const char*, const PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:17</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ColorizeImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} and {@link #ColorizeImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image ColorizeImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ColorizeImage(const Image*, const char*, const PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:17</i>
   */
  SaMagickCore.Image ColorizeImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ColorMatrixImage(const Image*, const KernelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:19</i>
   */
  SaMagickCore.Image ColorMatrixImage(SaMagickCore.Image ImagePtr1, SaMagickCore.KernelInfo kernel,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* FxImage(const Image*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:21</i> <br>
   *
   * @deprecated use the safer methods {@link #FxImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #FxImage(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image FxImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* FxImage(const Image*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:21</i>
   */
  SaMagickCore.Image FxImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ImplodeImage(const Image*, const double, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:23</i>
   */
  SaMagickCore.Image ImplodeImage(SaMagickCore.Image ImagePtr1, double double1,
      int PixelInterpolateMethod, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* MorphImages(const Image*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:25</i>
   */
  SaMagickCore.Image MorphImages(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PolaroidImage(const Image*, const DrawInfo*, const char*,
   * const double, const, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/fx.h:27</i> <br>
   *
   * @deprecated use the safer methods {@link #PolaroidImage(SaMagickCore.Image,
   * SaMagickCore.DrawInfo, java.lang.String, double, int, SaMagickCore.ExceptionInfo)} and {@link
   * #PolaroidImage(SaMagickCore.Image, SaMagickCore.DrawInfo, com.sun.jna.Pointer, double, int,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image PolaroidImage(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      Pointer charPtr1, double double1, int PixelInterpolateMethod,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* PolaroidImage(const Image*, const DrawInfo*, const char*,
   * const double, const, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/fx.h:27</i>
   */
  SaMagickCore.Image PolaroidImage(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      String charPtr1, double double1, int PixelInterpolateMethod,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SepiaToneImage(const Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:29</i>
   */
  SaMagickCore.Image SepiaToneImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ShadowImage(const Image*, const double, const double, const,
   * const, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:31</i>
   */
  SaMagickCore.Image ShadowImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      int ssize_t, int ssize_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SketchImage(const Image*, const double, const double, const
   * double, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:33</i>
   */
  SaMagickCore.Image SketchImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      double double3, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SteganoImage(const Image*, const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:35</i>
   */
  SaMagickCore.Image SteganoImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* StereoImage(const Image*, const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:37</i>
   */
  SaMagickCore.Image StereoImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* StereoAnaglyphImage(const Image*, const Image*, const, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:39</i>
   */
  SaMagickCore.Image StereoAnaglyphImage(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      int ssize_t, int ssize_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* SwirlImage(const Image*, double, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:41</i>
   */
  SaMagickCore.Image SwirlImage(SaMagickCore.Image ImagePtr1, double double1,
      int PixelInterpolateMethod, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* TintImage(const Image*, const char*, const PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:43</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #TintImage(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} and {@link #TintImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image TintImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* TintImage(const Image*, const char*, const PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:43</i>
   */
  SaMagickCore.Image TintImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* VignetteImage(const Image*, const double, const double,
   * const, const, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/fx.h:45</i>
   */
  SaMagickCore.Image VignetteImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      int ssize_t, int ssize_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* WaveImage(const Image*, const double, const double, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:47</i>
   */
  SaMagickCore.Image WaveImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      int PixelInterpolateMethod, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* WaveletDenoiseImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:49</i>
   */
  SaMagickCore.Image WaveletDenoiseImage(SaMagickCore.Image ImagePtr1, double double1,
      double double2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType PlasmaImage(Image*, const SegmentInfo*, size_t,
   * size_t, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:51</i>
   */
  int PlasmaImage(SaMagickCore.Image ImagePtr1, SaMagickCore.SegmentInfo SegmentInfoPtr1,
      NativeSize size_t1, NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SolarizeImage(Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/fx.h:53</i>
   */
  int SolarizeImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>double ExpandAffine(const AffineMatrix*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/gem.h:1</i>
   */
  double ExpandAffine(SaMagickCore.AffineMatrix AffineMatrixPtr1);

  /**
   * Original signature : <code>void ConvertHSLToRGB(const double, const double, const double,
   * double*, double*, double*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/gem.h:3</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ConvertHSLToRGB(double, double, double,
   * java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link
   * #ConvertHSLToRGB(double, double, double, com.sun.jna.ptr.DoubleByReference,
   * com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
   */
  @Deprecated
  void ConvertHSLToRGB(double double1, double double2, double double3, DoubleByReference doublePtr1,
      DoubleByReference doublePtr2, DoubleByReference doublePtr3);

  /**
   * Original signature : <code>void ConvertHSLToRGB(const double, const double, const double,
   * double*, double*, double*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/gem.h:3</i>
   */
  void ConvertHSLToRGB(double double1, double double2, double double3, DoubleBuffer doublePtr1,
      DoubleBuffer doublePtr2, DoubleBuffer doublePtr3);

  /**
   * Original signature : <code>void ConvertRGBToHSL(const double, const double, const double,
   * double*, double*, double*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/gem.h:5</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ConvertRGBToHSL(double, double, double,
   * java.nio.DoubleBuffer, java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link
   * #ConvertRGBToHSL(double, double, double, com.sun.jna.ptr.DoubleByReference,
   * com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
   */
  @Deprecated
  void ConvertRGBToHSL(double double1, double double2, double double3, DoubleByReference doublePtr1,
      DoubleByReference doublePtr2, DoubleByReference doublePtr3);

  /**
   * Original signature : <code>void ConvertRGBToHSL(const double, const double, const double,
   * double*, double*, double*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/gem.h:5</i>
   */
  void ConvertRGBToHSL(double double1, double double2, double double3, DoubleBuffer doublePtr1,
      DoubleBuffer doublePtr2, DoubleBuffer doublePtr3);

  /**
   * Original signature : <code>char* GetPageGeometry(const char*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:72</i> <br>
   *
   * @deprecated use the safer methods {@link #GetPageGeometry(java.lang.String)} and {@link
   * #GetPageGeometry(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetPageGeometry(Pointer charPtr1);

  /**
   * Original signature : <code>char* GetPageGeometry(const char*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:72</i>
   */
  Pointer GetPageGeometry(String charPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsGeometry(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:74</i> <br>
   *
   * @deprecated use the safer methods {@link #IsGeometry(java.lang.String)} and {@link
   * #IsGeometry(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsGeometry(Pointer charPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsGeometry(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:74</i>
   */
  int IsGeometry(String charPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsSceneGeometry(const char*, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:76</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #IsSceneGeometry(java.lang.String, int)} and {@link
   * #IsSceneGeometry(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  int IsSceneGeometry(Pointer charPtr1, int MagickBooleanType1);

  /**
   * Original signature : <code>MagickBooleanType IsSceneGeometry(const char*, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:76</i>
   */
  int IsSceneGeometry(String charPtr1, int MagickBooleanType1);

  /**
   * Original signature : <code>MagickStatusType GetGeometry(const char*, ssize_t*, ssize_t*,
   * size_t*, size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:78</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetGeometry(java.lang.String, SaMagickCore.ssize_t,
   * SaMagickCore.ssize_t, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link
   * #GetGeometry(com.sun.jna.Pointer, SaMagickCore.ssize_t, SaMagickCore.ssize_t,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)}
   * instead
   */
  @Deprecated
  int GetGeometry(Pointer charPtr1, SaMagickCore.ssize_t ssize_tPtr1,
      SaMagickCore.ssize_t ssize_tPtr2, NativeSizeByReference size_tPtr1,
      NativeSizeByReference size_tPtr2);

  /**
   * Original signature : <code>MagickStatusType GetGeometry(const char*, ssize_t*, ssize_t*,
   * size_t*, size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:78</i>
   */
  int GetGeometry(String charPtr1, SaMagickCore.ssize_t ssize_tPtr1,
      SaMagickCore.ssize_t ssize_tPtr2, NativeSizeByReference size_tPtr1,
      NativeSizeByReference size_tPtr2);

  /**
   * Original signature : <code>MagickStatusType ParseAbsoluteGeometry(const char*,
   * RectangleInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:80</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ParseAbsoluteGeometry(java.lang.String,
   * SaMagickCore.RectangleInfo)} and {@link #ParseAbsoluteGeometry(com.sun.jna.Pointer,
   * SaMagickCore.RectangleInfo)} instead
   */
  @Deprecated
  int ParseAbsoluteGeometry(Pointer charPtr1, SaMagickCore.RectangleInfo RectangleInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseAbsoluteGeometry(const char*,
   * RectangleInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:80</i>
   */
  int ParseAbsoluteGeometry(String charPtr1, SaMagickCore.RectangleInfo RectangleInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseAffineGeometry(const char*, AffineMatrix*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:82</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ParseAffineGeometry(java.lang.String,
   * SaMagickCore.AffineMatrix, SaMagickCore.ExceptionInfo)} and {@link
   * #ParseAffineGeometry(com.sun.jna.Pointer, SaMagickCore.AffineMatrix,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ParseAffineGeometry(Pointer charPtr1, SaMagickCore.AffineMatrix AffineMatrixPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseAffineGeometry(const char*, AffineMatrix*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:82</i>
   */
  int ParseAffineGeometry(String charPtr1, SaMagickCore.AffineMatrix AffineMatrixPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseGeometry(const char*, GeometryInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:84</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ParseGeometry(java.lang.String,
   * SaMagickCore.GeometryInfo)} and {@link #ParseGeometry(com.sun.jna.Pointer,
   * SaMagickCore.GeometryInfo)} instead
   */
  @Deprecated
  int ParseGeometry(Pointer charPtr1, SaMagickCore.GeometryInfo GeometryInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseGeometry(const char*, GeometryInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:84</i>
   */
  int ParseGeometry(String charPtr1, SaMagickCore.GeometryInfo GeometryInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseGravityGeometry(const Image*, const char*,
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:86</i> <br>
   *
   * @deprecated use the safer methods {@link #ParseGravityGeometry(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.RectangleInfo, SaMagickCore.ExceptionInfo)} and {@link
   * #ParseGravityGeometry(SaMagickCore.Image, com.sun.jna.Pointer, SaMagickCore.RectangleInfo,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ParseGravityGeometry(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseGravityGeometry(const Image*, const char*,
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:86</i>
   */
  int ParseGravityGeometry(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseMetaGeometry(const char*, ssize_t*, ssize_t*,
   * size_t*, size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:88</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ParseMetaGeometry(java.lang.String,
   * SaMagickCore.ssize_t, SaMagickCore.ssize_t, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link
   * #ParseMetaGeometry(com.sun.jna.Pointer, SaMagickCore.ssize_t, SaMagickCore.ssize_t,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)}
   * instead
   */
  @Deprecated
  int ParseMetaGeometry(Pointer charPtr1, SaMagickCore.ssize_t ssize_tPtr1,
      SaMagickCore.ssize_t ssize_tPtr2, NativeSizeByReference size_tPtr1,
      NativeSizeByReference size_tPtr2);

  /**
   * Original signature : <code>MagickStatusType ParseMetaGeometry(const char*, ssize_t*, ssize_t*,
   * size_t*, size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:88</i>
   */
  int ParseMetaGeometry(String charPtr1, SaMagickCore.ssize_t ssize_tPtr1,
      SaMagickCore.ssize_t ssize_tPtr2, NativeSizeByReference size_tPtr1,
      NativeSizeByReference size_tPtr2);

  /**
   * Original signature : <code>MagickStatusType ParsePageGeometry(const Image*, const char*,
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:90</i> <br>
   *
   * @deprecated use the safer methods {@link #ParsePageGeometry(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.RectangleInfo, SaMagickCore.ExceptionInfo)} and {@link
   * #ParsePageGeometry(SaMagickCore.Image, com.sun.jna.Pointer, SaMagickCore.RectangleInfo,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ParsePageGeometry(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParsePageGeometry(const Image*, const char*,
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:90</i>
   */
  int ParsePageGeometry(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseRegionGeometry(const Image*, const char*,
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:92</i> <br>
   *
   * @deprecated use the safer methods {@link #ParseRegionGeometry(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.RectangleInfo, SaMagickCore.ExceptionInfo)} and {@link
   * #ParseRegionGeometry(SaMagickCore.Image, com.sun.jna.Pointer, SaMagickCore.RectangleInfo,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ParseRegionGeometry(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickStatusType ParseRegionGeometry(const Image*, const char*,
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:92</i>
   */
  int ParseRegionGeometry(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void GravityAdjustGeometry(const size_t, const size_t, const
   * GravityType, RectangleInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/geometry.h:94</i>
   */
  void GravityAdjustGeometry(NativeSize size_t1, NativeSize size_t2, int GravityType1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1);

  /**
   * Original signature : <code>void SetGeometry(const Image*, RectangleInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:96</i>
   */
  void SetGeometry(SaMagickCore.Image ImagePtr1, SaMagickCore.RectangleInfo RectangleInfoPtr1);

  /**
   * Original signature : <code>void SetGeometryInfo(GeometryInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/geometry.h:98</i>
   */
  void SetGeometryInfo(SaMagickCore.GeometryInfo GeometryInfoPtr1);

  /**
   * Original signature : <code>PixelInfo* GetImageHistogram(const Image*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:1</i>
   */
  SaMagickCore.PixelInfo GetImageHistogram(SaMagickCore.Image ImagePtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* UniqueImageColors(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:3</i>
   */
  SaMagickCore.Image UniqueImageColors(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IdentifyPaletteImage(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:5</i>
   */
  int IdentifyPaletteImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsHistogramImage(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:7</i>
   */
  int IsHistogramImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsPaletteImage(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:9</i>
   */
  int IsPaletteImage(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType MinMaxStretchImage(Image*, const double, const
   * double, const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/histogram.h:11</i>
   */
  int MinMaxStretchImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      double double3, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>size_t GetNumberColors(const Image*, FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:13</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetNumberColors(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  NativeSize GetNumberColors(SaMagickCore.Image ImagePtr1, Pointer FILEPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>size_t GetNumberColors(const Image*, FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/histogram.h:13</i>
   */
  NativeSize GetNumberColors(SaMagickCore.Image ImagePtr1, PointerByReference FILEPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IdentifyImage(Image*, FILE*, const
   * MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/identify.h:1</i> <br>
   *
   * @deprecated use the safer method {@link #IdentifyImage(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, int, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int IdentifyImage(SaMagickCore.Image ImagePtr1, Pointer FILEPtr1, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IdentifyImage(Image*, FILE*, const
   * MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/identify.h:1</i>
   */
  int IdentifyImage(SaMagickCore.Image ImagePtr1, PointerByReference FILEPtr1,
      int MagickBooleanType1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ChannelType SetImageChannelMask(Image*, const ChannelType)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:149</i>
   */
  int SetImageChannelMask(SaMagickCore.Image ImagePtr1, int ChannelType1);

  /**
   * Original signature : <code>ExceptionType CatchImageException(Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:160</i>
   */
  int CatchImageException(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>FILE* GetImageInfoFile(const ImageInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:162</i>
   */
  PointerByReference GetImageInfoFile(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>Image* AcquireImage(const ImageInfo*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:164</i>
   */
  SaMagickCore.Image AcquireImage(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* AppendImages(const Image*, const, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:166</i>
   */
  SaMagickCore.Image AppendImages(SaMagickCore.Image ImagePtr1, int MagickBooleanType,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CloneImage(const Image*, const size_t, const size_t, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:168</i>
   */
  SaMagickCore.Image CloneImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, int MagickBooleanType, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* DestroyImage(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:170</i>
   */
  SaMagickCore.Image DestroyImage(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* GetImageMask(const Image*, const, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:172</i>
   */
  SaMagickCore.Image GetImageMask(SaMagickCore.Image ImagePtr1, int PixelMask,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* NewMagickImage(const ImageInfo*, const size_t, const size_t,
   * const PixelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:174</i>
   */
  SaMagickCore.Image NewMagickImage(SaMagickCore.ImageInfo ImageInfoPtr1, NativeSize size_t1,
      NativeSize size_t2, SaMagickCore.PixelInfo PixelInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ReferenceImage(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:176</i>
   */
  SaMagickCore.Image ReferenceImage(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* SmushImages(const Image*, const, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:178</i>
   */
  SaMagickCore.Image SmushImages(SaMagickCore.Image ImagePtr1, int MagickBooleanType, int ssize_t,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ImageInfo* AcquireImageInfo()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:180</i>
   */
  SaMagickCore.ImageInfo AcquireImageInfo();

  /**
   * Original signature : <code>ImageInfo* CloneImageInfo(const ImageInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:182</i>
   */
  SaMagickCore.ImageInfo CloneImageInfo(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>ImageInfo* DestroyImageInfo(ImageInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:184</i>
   */
  SaMagickCore.ImageInfo DestroyImageInfo(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ClipImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:186</i>
   */
  int ClipImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ClipImagePath(Image*, const char*, const
   * MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:188</i> <br>
   *
   * @deprecated use the safer methods {@link #ClipImagePath(SaMagickCore.Image, java.lang.String,
   * int, SaMagickCore.ExceptionInfo)} and {@link #ClipImagePath(SaMagickCore.Image,
   * com.sun.jna.Pointer, int, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ClipImagePath(SaMagickCore.Image ImagePtr1, Pointer charPtr1, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ClipImagePath(Image*, const char*, const
   * MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:188</i>
   */
  int ClipImagePath(SaMagickCore.Image ImagePtr1, String charPtr1, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType CopyImagePixels(Image*, const Image*, const
   * RectangleInfo*, const OffsetInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:190</i>
   */
  int CopyImagePixels(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.OffsetInfo OffsetInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsTaintImage(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:192</i>
   */
  int IsTaintImage(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType IsHighDynamicRangeImage(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:194</i>
   */
  int IsHighDynamicRangeImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImageObject(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:196</i>
   */
  int IsImageObject(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>MagickBooleanType ListMagickInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:198</i> <br>
   *
   * @deprecated use the safer method {@link #ListMagickInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListMagickInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListMagickInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:198</i>
   */
  int ListMagickInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ModifyImage(Image**, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:200</i> <br>
   *
   * @deprecated use the safer method {@link #ModifyImage(SaMagickCore.Image.ByReference[],
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ModifyImage(PointerByReference ImagePtrPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ModifyImage(Image**, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:200</i>
   */
  int ModifyImage(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ResetImagePage(Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:202</i> <br>
   *
   * @deprecated use the safer methods {@link #ResetImagePage(SaMagickCore.Image, java.lang.String)}
   * and {@link #ResetImagePage(SaMagickCore.Image, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int ResetImagePage(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>MagickBooleanType ResetImagePage(Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:202</i>
   */
  int ResetImagePage(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>MagickBooleanType ResetImagePixels(Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:204</i>
   */
  int ResetImagePixels(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageAlpha(Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:206</i>
   */
  int SetImageAlpha(SaMagickCore.Image ImagePtr1, int Quantum,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageBackgroundColor(Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:208</i>
   */
  int SetImageBackgroundColor(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageColor(Image*, const PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:210</i>
   */
  int SetImageColor(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageExtent(Image*, const size_t, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:212</i>
   */
  int SetImageExtent(SaMagickCore.Image ImagePtr1, NativeSize size_t1, NativeSize size_t2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageInfo(ImageInfo*, const unsigned int,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:214</i>
   */
  int SetImageInfo(SaMagickCore.ImageInfo ImageInfoPtr1, int int1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageMask(Image*, const PixelMask, const
   * Image*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:216</i>
   */
  int SetImageMask(SaMagickCore.Image ImagePtr1, int type, SaMagickCore.Image ImagePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageRegionMask(Image*, const PixelMask, const
   * RectangleInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:218</i>
   */
  int SetImageRegionMask(SaMagickCore.Image ImagePtr1, int type,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageStorageClass(Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:220</i>
   */
  int SetImageStorageClass(SaMagickCore.Image ImagePtr1, int ClassType,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType StripImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:222</i>
   */
  int StripImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SyncImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:224</i>
   */
  int SyncImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SyncImageSettings(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:226</i>
   */
  int SyncImageSettings(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SyncImagesSettings(ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:228</i>
   */
  int SyncImagesSettings(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>size_t InterpretImageFilename(const ImageInfo*, Image*, const char*,
   * int, char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:230</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #InterpretImageFilename(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, java.lang.String, int, java.nio.ByteBuffer, SaMagickCore.ExceptionInfo)}
   * and {@link #InterpretImageFilename(SaMagickCore.ImageInfo, SaMagickCore.Image,
   * com.sun.jna.Pointer, int, com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  NativeSize InterpretImageFilename(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.Image ImagePtr1, Pointer charPtr1, int int1, Pointer charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>size_t InterpretImageFilename(const ImageInfo*, Image*, const char*,
   * int, char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:230</i>
   */
  NativeSize InterpretImageFilename(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.Image ImagePtr1, String charPtr1, int int1, ByteBuffer charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ssize_t GetImageReferenceCount(Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:232</i>
   */
  SaMagickCore.ssize_t GetImageReferenceCount(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>VirtualPixelMethod GetImageVirtualPixelMethod(const Image*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:234</i>
   */
  int GetImageVirtualPixelMethod(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>VirtualPixelMethod SetImageVirtualPixelMethod(Image*, const
   * VirtualPixelMethod, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:236</i>
   */
  int SetImageVirtualPixelMethod(SaMagickCore.Image ImagePtr1, int VirtualPixelMethod1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void AcquireNextImage(const ImageInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:238</i>
   */
  void AcquireNextImage(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void DestroyImagePixels(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:240</i>
   */
  void DestroyImagePixels(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void DisassociateImageStream(Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:242</i>
   */
  void DisassociateImageStream(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void GetImageInfo(ImageInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image.h:244</i>
   */
  void GetImageInfo(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>void SetImageInfoBlob(ImageInfo*, const void*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:246</i>
   */
  void SetImageInfoBlob(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer voidPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void SetImageInfoFile(ImageInfo*, FILE*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:248</i> <br>
   *
   * @deprecated use the safer method {@link #SetImageInfoFile(SaMagickCore.ImageInfo,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  void SetImageInfoFile(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer FILEPtr1);

  /**
   * Original signature : <code>void SetImageInfoFile(ImageInfo*, FILE*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:248</i>
   */
  void SetImageInfoFile(SaMagickCore.ImageInfo ImageInfoPtr1, PointerByReference FILEPtr1);

  /**
   * Original signature : <code>void SetImageInfoCustomStream(ImageInfo*, CustomStreamInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:250</i> <br>
   *
   * @deprecated use the safer method {@link #SetImageInfoCustomStream(SaMagickCore.ImageInfo,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  void SetImageInfoCustomStream(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer CustomStreamInfoPtr1);

  /**
   * Original signature : <code>void SetImageInfoCustomStream(ImageInfo*, CustomStreamInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image.h:250</i>
   */
  void SetImageInfoCustomStream(SaMagickCore.ImageInfo ImageInfoPtr1,
      PointerByReference CustomStreamInfoPtr1);

  /**
   * Original signature : <code>char* GetImageViewException(const ImageView*, ExceptionType*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:6</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageViewException(com.sun.jna.ptr.PointerByReference,
   * java.nio.IntBuffer)} and {@link #GetImageViewException(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.ptr.IntByReference)} instead
   */
  @Deprecated
  Pointer GetImageViewException(Pointer ImageViewPtr1, IntByReference ExceptionTypePtr1);

  /**
   * Original signature : <code>char* GetImageViewException(const ImageView*, ExceptionType*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:6</i>
   */
  Pointer GetImageViewException(PointerByReference ImageViewPtr1, IntBuffer ExceptionTypePtr1);

  /**
   * Original signature : <code>char* GetImageViewException(const ImageView*, ExceptionType*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:6</i>
   */
  Pointer GetImageViewException(PointerByReference ImageViewPtr1, IntByReference ExceptionTypePtr1);

  /**
   * Original signature : <code>Quantum* GetImageViewVirtualPixels(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:8</i> <br>
   *
   * @deprecated use the safer method {@link #GetImageViewVirtualPixels(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  FloatByReference GetImageViewVirtualPixels(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>Quantum* GetImageViewVirtualPixels(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:8</i>
   */
  FloatByReference GetImageViewVirtualPixels(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>void* GetImageViewVirtualMetacontent(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:10</i> <br>
   *
   * @deprecated use the safer method {@link #GetImageViewVirtualMetacontent(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetImageViewVirtualMetacontent(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>void* GetImageViewVirtualMetacontent(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:10</i>
   */
  Pointer GetImageViewVirtualMetacontent(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>Image* GetImageViewImage(const ImageView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:12</i> <br>
   *
   * @deprecated use the safer method {@link #GetImageViewImage(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  SaMagickCore.Image GetImageViewImage(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>Image* GetImageViewImage(const ImageView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:12</i>
   */
  SaMagickCore.Image GetImageViewImage(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>ImageView* CloneImageView(const ImageView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:14</i> <br>
   *
   * @deprecated use the safer method {@link #CloneImageView(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference CloneImageView(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>ImageView* CloneImageView(const ImageView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:14</i>
   */
  PointerByReference CloneImageView(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>ImageView* DestroyImageView(ImageView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:16</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyImageView(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyImageView(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>ImageView* DestroyImageView(ImageView*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:16</i>
   */
  PointerByReference DestroyImageView(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>ImageView* NewImageView(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:18</i>
   */
  PointerByReference NewImageView(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ImageView* NewImageViewRegion(Image*, const, const, const size_t,
   * const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:20</i>
   */
  PointerByReference NewImageViewRegion(SaMagickCore.Image ImagePtr1, int ssize_t, int ssize_t2,
      NativeSize size_t1, NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType DuplexTransferImageViewIterator(ImageView*,
   * ImageView*, ImageView*, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:22</i> <br>
   *
   * @deprecated use the safer method {@link #DuplexTransferImageViewIterator(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DuplexTransferImageViewIterator(Pointer ImageViewPtr1, Pointer ImageViewPtr2,
      Pointer ImageViewPtr3, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType DuplexTransferImageViewIterator(ImageView*,
   * ImageView*, ImageView*, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:22</i>
   */
  int DuplexTransferImageViewIterator(PointerByReference ImageViewPtr1,
      PointerByReference ImageViewPtr2, PointerByReference ImageViewPtr3, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetImageViewIterator(ImageView*,
   * GetImageViewMethod, void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:24</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetImageViewIterator(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.GetImageViewMethod, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int GetImageViewIterator(Pointer ImageViewPtr1,
      SaMagickCore.GetImageViewMethod GetImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetImageViewIterator(ImageView*,
   * GetImageViewMethod, void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:24</i>
   */
  int GetImageViewIterator(PointerByReference ImageViewPtr1,
      SaMagickCore.GetImageViewMethod GetImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImageView(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:26</i> <br>
   *
   * @deprecated use the safer method {@link #IsImageView(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  int IsImageView(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsImageView(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:26</i>
   */
  int IsImageView(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageViewIterator(ImageView*,
   * SetImageViewMethod, void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:28</i>
   * <br>
   *
   * @deprecated use the safer method {@link #SetImageViewIterator(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.SetImageViewMethod, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int SetImageViewIterator(Pointer ImageViewPtr1,
      SaMagickCore.SetImageViewMethod SetImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetImageViewIterator(ImageView*,
   * SetImageViewMethod, void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:28</i>
   */
  int SetImageViewIterator(PointerByReference ImageViewPtr1,
      SaMagickCore.SetImageViewMethod SetImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType TransferImageViewIterator(ImageView*, ImageView*,
   * TransferImageViewMethod, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:30</i> <br>
   *
   * @deprecated use the safer method {@link #TransferImageViewIterator(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.TransferImageViewMethod, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int TransferImageViewIterator(Pointer ImageViewPtr1, Pointer ImageViewPtr2,
      SaMagickCore.TransferImageViewMethod TransferImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType TransferImageViewIterator(ImageView*, ImageView*,
   * TransferImageViewMethod, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:30</i>
   */
  int TransferImageViewIterator(PointerByReference ImageViewPtr1, PointerByReference ImageViewPtr2,
      SaMagickCore.TransferImageViewMethod TransferImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType UpdateImageViewIterator(ImageView*,
   * UpdateImageViewMethod, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:32</i> <br>
   *
   * @deprecated use the safer method {@link #UpdateImageViewIterator(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.UpdateImageViewMethod, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int UpdateImageViewIterator(Pointer ImageViewPtr1,
      SaMagickCore.UpdateImageViewMethod UpdateImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType UpdateImageViewIterator(ImageView*,
   * UpdateImageViewMethod, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/image-view.h:32</i>
   */
  int UpdateImageViewIterator(PointerByReference ImageViewPtr1,
      SaMagickCore.UpdateImageViewMethod UpdateImageViewMethod1, Pointer voidPtr1);

  /**
   * Original signature : <code>Quantum* GetImageViewAuthenticPixels(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:34</i> <br>
   *
   * @deprecated use the safer method {@link #GetImageViewAuthenticPixels(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  FloatByReference GetImageViewAuthenticPixels(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>Quantum* GetImageViewAuthenticPixels(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:34</i>
   */
  FloatByReference GetImageViewAuthenticPixels(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>RectangleInfo GetImageViewExtent(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:36</i> <br>
   *
   * @deprecated use the safer method {@link #GetImageViewExtent(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  SaMagickCore.RectangleInfo.ByValue GetImageViewExtent(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>RectangleInfo GetImageViewExtent(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:36</i>
   */
  SaMagickCore.RectangleInfo.ByValue GetImageViewExtent(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>void SetImageViewDescription(ImageView*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:38</i> <br>
   *
   * @deprecated use the safer methods {@link #SetImageViewDescription(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #SetImageViewDescription(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void SetImageViewDescription(Pointer ImageViewPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>void SetImageViewDescription(ImageView*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:38</i>
   */
  void SetImageViewDescription(PointerByReference ImageViewPtr1, String charPtr1);

  /**
   * Original signature : <code>void SetImageViewDescription(ImageView*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:38</i>
   */
  void SetImageViewDescription(PointerByReference ImageViewPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>void SetImageViewThreads(ImageView*, const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:40</i> <br>
   *
   * @deprecated use the safer method {@link #SetImageViewThreads(com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  void SetImageViewThreads(Pointer ImageViewPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void SetImageViewThreads(ImageView*, const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:40</i>
   */
  void SetImageViewThreads(PointerByReference ImageViewPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void* GetImageViewAuthenticMetacontent(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:42</i> <br>
   *
   * @deprecated use the safer method {@link #GetImageViewAuthenticMetacontent(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetImageViewAuthenticMetacontent(Pointer ImageViewPtr1);

  /**
   * Original signature : <code>void* GetImageViewAuthenticMetacontent(const ImageView*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/image-view.h:42</i>
   */
  Pointer GetImageViewAuthenticMetacontent(PointerByReference ImageViewPtr1);

  /**
   * Original signature : <code>Image* CoalesceImages(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:27</i>
   */
  SaMagickCore.Image CoalesceImages(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* DisposeImages(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:29</i>
   */
  SaMagickCore.Image DisposeImages(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CompareImagesLayers(const Image*, const LayerMethod,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:31</i>
   */
  SaMagickCore.Image CompareImagesLayers(SaMagickCore.Image ImagePtr1, int LayerMethod1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* MergeImageLayers(Image*, const LayerMethod,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:33</i>
   */
  SaMagickCore.Image MergeImageLayers(SaMagickCore.Image ImagePtr1, int LayerMethod1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* OptimizeImageLayers(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:35</i>
   */
  SaMagickCore.Image OptimizeImageLayers(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* OptimizePlusImageLayers(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:37</i>
   */
  SaMagickCore.Image OptimizePlusImageLayers(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void CompositeLayers(Image*, const, Image*, const, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:39</i>
   */
  void CompositeLayers(SaMagickCore.Image ImagePtr1, int CompositeOperator,
      SaMagickCore.Image ImagePtr2, int ssize_t, int ssize_t2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void OptimizeImageTransparency(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:41</i>
   */
  void OptimizeImageTransparency(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void RemoveDuplicateLayers(Image**, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:43</i> <br>
   *
   * @deprecated use the safer method {@link #RemoveDuplicateLayers(SaMagickCore.Image.ByReference[],
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  void RemoveDuplicateLayers(PointerByReference ImagePtrPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void RemoveDuplicateLayers(Image**, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:43</i>
   */
  void RemoveDuplicateLayers(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void RemoveZeroDelayLayers(Image**, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:45</i> <br>
   *
   * @deprecated use the safer method {@link #RemoveZeroDelayLayers(SaMagickCore.Image.ByReference[],
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  void RemoveZeroDelayLayers(PointerByReference ImagePtrPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void RemoveZeroDelayLayers(Image**, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/layer.h:45</i>
   */
  void RemoveZeroDelayLayers(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* DestroyLinkedList(LinkedListInfo*,
   * DestroyLinkedList_arg1_callback*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:2</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyLinkedList(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.DestroyLinkedList_arg1_callback)} instead
   */
  @Deprecated
  PointerByReference DestroyLinkedList(Pointer LinkedListInfoPtr1,
      SaMagickCore.DestroyLinkedList_arg1_callback arg1);

  /**
   * Original signature : <code>LinkedListInfo* DestroyLinkedList(LinkedListInfo*,
   * DestroyLinkedList_arg1_callback*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:2</i>
   */
  PointerByReference DestroyLinkedList(PointerByReference LinkedListInfoPtr1,
      SaMagickCore.DestroyLinkedList_arg1_callback arg1);

  /**
   * Original signature : <code>LinkedListInfo* NewLinkedList(const size_t)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:4</i>
   */
  PointerByReference NewLinkedList(NativeSize size_t1);

  /**
   * Original signature : <code>MagickBooleanType AppendValueToLinkedList(LinkedListInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:6</i>
   * <br>
   *
   * @deprecated use the safer method {@link #AppendValueToLinkedList(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int AppendValueToLinkedList(Pointer LinkedListInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType AppendValueToLinkedList(LinkedListInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:6</i>
   */
  int AppendValueToLinkedList(PointerByReference LinkedListInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType InsertValueInLinkedList(LinkedListInfo*, const
   * size_t, const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:8</i>
   * <br>
   *
   * @deprecated use the safer method {@link #InsertValueInLinkedList(com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int InsertValueInLinkedList(Pointer LinkedListInfoPtr1, NativeSize size_t1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType InsertValueInLinkedList(LinkedListInfo*, const
   * size_t, const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:8</i>
   */
  int InsertValueInLinkedList(PointerByReference LinkedListInfoPtr1, NativeSize size_t1,
      Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType InsertValueInSortedLinkedList(LinkedListInfo*,
   * InsertValueInSortedLinkedList_arg1_callback*, void**, const void*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:10</i> <br>
   *
   * @deprecated use the safer method {@link #InsertValueInSortedLinkedList(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.InsertValueInSortedLinkedList_arg1_callback, com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int InsertValueInSortedLinkedList(Pointer LinkedListInfoPtr1,
      SaMagickCore.InsertValueInSortedLinkedList_arg1_callback arg1, PointerByReference voidPtrPtr1,
      Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType InsertValueInSortedLinkedList(LinkedListInfo*,
   * InsertValueInSortedLinkedList_arg1_callback*, void**, const void*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:10</i>
   */
  int InsertValueInSortedLinkedList(PointerByReference LinkedListInfoPtr1,
      SaMagickCore.InsertValueInSortedLinkedList_arg1_callback arg1, PointerByReference voidPtrPtr1,
      Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsLinkedListEmpty(const LinkedListInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:12</i>
   * <br>
   *
   * @deprecated use the safer method {@link #IsLinkedListEmpty(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  int IsLinkedListEmpty(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsLinkedListEmpty(const LinkedListInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:12</i>
   */
  int IsLinkedListEmpty(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType LinkedListToArray(LinkedListInfo*, void**)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:14</i>
   * <br>
   *
   * @deprecated use the safer method {@link #LinkedListToArray(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  int LinkedListToArray(Pointer LinkedListInfoPtr1, PointerByReference voidPtrPtr1);

  /**
   * Original signature : <code>MagickBooleanType LinkedListToArray(LinkedListInfo*, void**)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:14</i>
   */
  int LinkedListToArray(PointerByReference LinkedListInfoPtr1, PointerByReference voidPtrPtr1);

  /**
   * Original signature : <code>size_t GetNumberOfElementsInLinkedList(const LinkedListInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:16</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetNumberOfElementsInLinkedList(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  NativeSize GetNumberOfElementsInLinkedList(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>size_t GetNumberOfElementsInLinkedList(const LinkedListInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:16</i>
   */
  NativeSize GetNumberOfElementsInLinkedList(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>void ClearLinkedList(LinkedListInfo*,
   * ClearLinkedList_arg1_callback*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:18</i> <br>
   *
   * @deprecated use the safer method {@link #ClearLinkedList(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ClearLinkedList_arg1_callback)} instead
   */
  @Deprecated
  void ClearLinkedList(Pointer LinkedListInfoPtr1, SaMagickCore.ClearLinkedList_arg1_callback arg1);

  /**
   * Original signature : <code>void ClearLinkedList(LinkedListInfo*,
   * ClearLinkedList_arg1_callback*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:18</i>
   */
  void ClearLinkedList(PointerByReference LinkedListInfoPtr1,
      SaMagickCore.ClearLinkedList_arg1_callback arg1);

  /**
   * Original signature : <code>void* GetLastValueInLinkedList(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:20</i> <br>
   *
   * @deprecated use the safer method {@link #GetLastValueInLinkedList(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetLastValueInLinkedList(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>void* GetLastValueInLinkedList(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:20</i>
   */
  Pointer GetLastValueInLinkedList(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>void* GetNextValueInLinkedList(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:22</i> <br>
   *
   * @deprecated use the safer method {@link #GetNextValueInLinkedList(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetNextValueInLinkedList(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>void* GetNextValueInLinkedList(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:22</i>
   */
  Pointer GetNextValueInLinkedList(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>void* GetValueFromLinkedList(LinkedListInfo*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:24</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetValueFromLinkedList(com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  Pointer GetValueFromLinkedList(Pointer LinkedListInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void* GetValueFromLinkedList(LinkedListInfo*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:24</i>
   */
  Pointer GetValueFromLinkedList(PointerByReference LinkedListInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void* RemoveElementByValueFromLinkedList(LinkedListInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:26</i>
   * <br>
   *
   * @deprecated use the safer method {@link #RemoveElementByValueFromLinkedList(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer RemoveElementByValueFromLinkedList(Pointer LinkedListInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>void* RemoveElementByValueFromLinkedList(LinkedListInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:26</i>
   */
  Pointer RemoveElementByValueFromLinkedList(PointerByReference LinkedListInfoPtr1,
      Pointer voidPtr1);

  /**
   * Original signature : <code>void* RemoveElementFromLinkedList(LinkedListInfo*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:28</i>
   * <br>
   *
   * @deprecated use the safer method {@link #RemoveElementFromLinkedList(com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  Pointer RemoveElementFromLinkedList(Pointer LinkedListInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void* RemoveElementFromLinkedList(LinkedListInfo*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:28</i>
   */
  Pointer RemoveElementFromLinkedList(PointerByReference LinkedListInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>void* RemoveLastElementFromLinkedList(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:30</i> <br>
   *
   * @deprecated use the safer method {@link #RemoveLastElementFromLinkedList(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer RemoveLastElementFromLinkedList(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>void* RemoveLastElementFromLinkedList(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:30</i>
   */
  Pointer RemoveLastElementFromLinkedList(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>void ResetLinkedListIterator(LinkedListInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:32</i> <br>
   *
   * @deprecated use the safer method {@link #ResetLinkedListIterator(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void ResetLinkedListIterator(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>void ResetLinkedListIterator(LinkedListInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/linked-list.h:32</i>
   */
  void ResetLinkedListIterator(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>Image* CloneImageList(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:1</i>
   */
  SaMagickCore.Image CloneImageList(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CloneImages(const Image*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:3</i> <br>
   *
   * @deprecated use the safer methods {@link #CloneImages(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #CloneImages(SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image CloneImages(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* CloneImages(const Image*, const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:3</i>
   */
  SaMagickCore.Image CloneImages(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* DestroyImageList(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/list.h:5</i>
   */
  SaMagickCore.Image DestroyImageList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* DuplicateImages(Image*, const size_t, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:7</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DuplicateImages(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String, SaMagickCore.ExceptionInfo)}
   * and {@link #DuplicateImages(SaMagickCore.Image, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image DuplicateImages(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* DuplicateImages(Image*, const size_t, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:7</i>
   */
  SaMagickCore.Image DuplicateImages(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* GetFirstImageInList(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:9</i>
   */
  SaMagickCore.Image GetFirstImageInList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* GetImageFromList(const Image*, const)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:11</i>
   */
  SaMagickCore.Image GetImageFromList(SaMagickCore.Image ImagePtr1, int ssize_t);

  /**
   * Original signature : <code>Image* GetLastImageInList(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:13</i>
   */
  SaMagickCore.Image GetLastImageInList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* GetNextImageInList(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:15</i>
   */
  SaMagickCore.Image GetNextImageInList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* GetPreviousImageInList(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:17</i>
   */
  SaMagickCore.Image GetPreviousImageInList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image** ImageListToArray(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:19</i>
   */
  SaMagickCore.Image.ByReference[] ImageListToArray(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* NewImageList()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/list.h:21</i>
   */
  SaMagickCore.Image NewImageList();

  /**
   * Original signature : <code>Image* RemoveImageFromList(Image**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:23</i> <br>
   *
   * @deprecated use the safer method {@link #RemoveImageFromList(SaMagickCore.Image.ByReference[])}
   * instead
   */
  @Deprecated
  SaMagickCore.Image RemoveImageFromList(PointerByReference ImagePtrPtr1);

  /**
   * Original signature : <code>Image* RemoveImageFromList(Image**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:23</i>
   */
  SaMagickCore.Image RemoveImageFromList(SaMagickCore.Image.ByReference ImagePtrPtr1[]);

  /**
   * Original signature : <code>Image* RemoveLastImageFromList(Image**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:25</i> <br>
   *
   * @deprecated use the safer method {@link #RemoveLastImageFromList(SaMagickCore.Image.ByReference[])}
   * instead
   */
  @Deprecated
  SaMagickCore.Image RemoveLastImageFromList(PointerByReference ImagePtrPtr1);

  /**
   * Original signature : <code>Image* RemoveLastImageFromList(Image**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:25</i>
   */
  SaMagickCore.Image RemoveLastImageFromList(SaMagickCore.Image.ByReference ImagePtrPtr1[]);

  /**
   * Original signature : <code>Image* RemoveFirstImageFromList(Image**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:27</i> <br>
   *
   * @deprecated use the safer method {@link #RemoveFirstImageFromList(SaMagickCore.Image.ByReference[])}
   * instead
   */
  @Deprecated
  SaMagickCore.Image RemoveFirstImageFromList(PointerByReference ImagePtrPtr1);

  /**
   * Original signature : <code>Image* RemoveFirstImageFromList(Image**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:27</i>
   */
  SaMagickCore.Image RemoveFirstImageFromList(SaMagickCore.Image.ByReference ImagePtrPtr1[]);

  /**
   * Original signature : <code>Image* SpliceImageIntoList(Image**, const size_t, const
   * Image*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:29</i>
   * <br>
   *
   * @deprecated use the safer method {@link #SpliceImageIntoList(SaMagickCore.Image.ByReference[],
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.Image)} instead
   */
  @Deprecated
  SaMagickCore.Image SpliceImageIntoList(PointerByReference ImagePtrPtr1, NativeSize size_t1,
      SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* SpliceImageIntoList(Image**, const size_t, const
   * Image*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:29</i>
   */
  SaMagickCore.Image SpliceImageIntoList(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      NativeSize size_t1, SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* SplitImageList(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/list.h:31</i>
   */
  SaMagickCore.Image SplitImageList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>Image* SyncNextImageInList(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:33</i>
   */
  SaMagickCore.Image SyncNextImageInList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>size_t GetImageListLength(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:35</i>
   */
  NativeSize GetImageListLength(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>ssize_t GetImageIndexInList(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:37</i>
   */
  SaMagickCore.ssize_t GetImageIndexInList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void AppendImageToList(Image**, const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:39</i> <br>
   *
   * @deprecated use the safer method {@link #AppendImageToList(SaMagickCore.Image.ByReference[],
   * SaMagickCore.Image)} instead
   */
  @Deprecated
  void AppendImageToList(PointerByReference ImagePtrPtr1, SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void AppendImageToList(Image**, const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:39</i>
   */
  void AppendImageToList(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void DeleteImageFromList(Image**)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/list.h:41</i> <br>
   *
   * @deprecated use the safer method {@link #DeleteImageFromList(SaMagickCore.Image.ByReference[])}
   * instead
   */
  @Deprecated
  void DeleteImageFromList(PointerByReference ImagePtrPtr1);

  /**
   * Original signature : <code>void DeleteImageFromList(Image**)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/list.h:41</i>
   */
  void DeleteImageFromList(SaMagickCore.Image.ByReference ImagePtrPtr1[]);

  /**
   * Original signature : <code>void DeleteImages(Image**, const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:43</i> <br>
   *
   * @deprecated use the safer methods {@link #DeleteImages(SaMagickCore.Image.ByReference[],
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #DeleteImages(SaMagickCore.Image.ByReference[],
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  void DeleteImages(PointerByReference ImagePtrPtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void DeleteImages(Image**, const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:43</i>
   */
  void DeleteImages(SaMagickCore.Image.ByReference ImagePtrPtr1[], String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void DeleteImages(Image**, const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:43</i>
   */
  void DeleteImages(SaMagickCore.Image.ByReference ImagePtrPtr1[], Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void InsertImageInList(Image**, Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:45</i> <br>
   *
   * @deprecated use the safer method {@link #InsertImageInList(SaMagickCore.Image.ByReference[],
   * SaMagickCore.Image)} instead
   */
  @Deprecated
  void InsertImageInList(PointerByReference ImagePtrPtr1, SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void InsertImageInList(Image**, Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:45</i>
   */
  void InsertImageInList(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void PrependImageToList(Image**, Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:47</i> <br>
   *
   * @deprecated use the safer method {@link #PrependImageToList(SaMagickCore.Image.ByReference[],
   * SaMagickCore.Image)} instead
   */
  @Deprecated
  void PrependImageToList(PointerByReference ImagePtrPtr1, SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void PrependImageToList(Image**, Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:47</i>
   */
  void PrependImageToList(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void ReplaceImageInList(Image**, Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:49</i> <br>
   *
   * @deprecated use the safer method {@link #ReplaceImageInList(SaMagickCore.Image.ByReference[],
   * SaMagickCore.Image)} instead
   */
  @Deprecated
  void ReplaceImageInList(PointerByReference ImagePtrPtr1, SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void ReplaceImageInList(Image**, Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:49</i>
   */
  void ReplaceImageInList(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void ReplaceImageInListReturnLast(Image**, Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:51</i> <br>
   *
   * @deprecated use the safer method {@link #ReplaceImageInListReturnLast(SaMagickCore.Image.ByReference[],
   * SaMagickCore.Image)} instead
   */
  @Deprecated
  void ReplaceImageInListReturnLast(PointerByReference ImagePtrPtr1, SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void ReplaceImageInListReturnLast(Image**, Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/list.h:51</i>
   */
  void ReplaceImageInListReturnLast(SaMagickCore.Image.ByReference ImagePtrPtr1[],
      SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>void ReverseImageList(Image**)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/list.h:53</i> <br>
   *
   * @deprecated use the safer method {@link #ReverseImageList(SaMagickCore.Image.ByReference[])}
   * instead
   */
  @Deprecated
  void ReverseImageList(PointerByReference ImagePtrPtr1);

  /**
   * Original signature : <code>void ReverseImageList(Image**)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/list.h:53</i>
   */
  void ReverseImageList(SaMagickCore.Image.ByReference ImagePtrPtr1[]);

  /**
   * Original signature : <code>void SyncImageList(Image*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/list.h:55</i>
   */
  void SyncImageList(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>char** GetLocaleList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:8</i> <br>
   *
   * @deprecated use the safer methods {@link #GetLocaleList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetLocaleList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetLocaleList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetLocaleList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:8</i>
   */
  PointerByReference GetLocaleList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetLocaleMessage(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:10</i> <br>
   *
   * @deprecated use the safer methods {@link #GetLocaleMessage(java.lang.String)} and {@link
   * #GetLocaleMessage(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  String GetLocaleMessage(Pointer charPtr1);

  /**
   * Original signature : <code>char* GetLocaleMessage(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:10</i>
   */
  String GetLocaleMessage(String charPtr1);

  /**
   * Original signature : <code>const LocaleInfo* GetLocaleInfo_(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:12</i> <br>
   *
   * @deprecated use the safer methods {@link #GetLocaleInfo_(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetLocaleInfo_(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.LocaleInfo GetLocaleInfo_(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const LocaleInfo* GetLocaleInfo_(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:12</i>
   */
  SaMagickCore.LocaleInfo GetLocaleInfo_(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const LocaleInfo** GetLocaleInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:14</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetLocaleInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetLocaleInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.LocaleInfo.ByReference[] GetLocaleInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const LocaleInfo** GetLocaleInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:14</i>
   */
  SaMagickCore.LocaleInfo.ByReference[] GetLocaleInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>double InterpretLocaleValue(const char*, char**)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:16</i> <br>
   *
   * @deprecated use the safer methods {@link #InterpretLocaleValue(java.lang.String,
   * com.sun.jna.ptr.PointerByReference)} and {@link #InterpretLocaleValue(com.sun.jna.Pointer,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  double InterpretLocaleValue(Pointer magick_restrict, PointerByReference magick_restrict2);

  /**
   * Original signature : <code>double InterpretLocaleValue(const char*, char**)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:16</i>
   */
  double InterpretLocaleValue(String magick_restrict, PointerByReference magick_restrict2);

  /**
   * Original signature : <code>int LocaleCompare(const char*, const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:18</i> <br>
   *
   * @deprecated use the safer methods {@link #LocaleCompare(java.lang.String, java.lang.String)}
   * and {@link #LocaleCompare(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int LocaleCompare(Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>int LocaleCompare(const char*, const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:18</i>
   */
  int LocaleCompare(String charPtr1, String charPtr2);

  /**
   * Original signature : <code>int LocaleNCompare(const char*, const char*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:20</i> <br>
   *
   * @deprecated use the safer methods {@link #LocaleNCompare(java.lang.String, java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #LocaleNCompare(com.sun.jna.Pointer,
   * com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  int LocaleNCompare(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

  /**
   * Original signature : <code>int LocaleNCompare(const char*, const char*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:20</i>
   */
  int LocaleNCompare(String charPtr1, String charPtr2, NativeSize size_t1);

  /**
   * Original signature : <code>LinkedListInfo* DestroyLocaleOptions(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:22</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyLocaleOptions(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyLocaleOptions(Pointer LinkedListInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* DestroyLocaleOptions(LinkedListInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:22</i>
   */
  PointerByReference DestroyLocaleOptions(PointerByReference LinkedListInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* GetLocaleOptions(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:24</i> <br>
   *
   * @deprecated use the safer methods {@link #GetLocaleOptions(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetLocaleOptions(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetLocaleOptions(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LinkedListInfo* GetLocaleOptions(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:24</i>
   */
  PointerByReference GetLocaleOptions(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListLocaleInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:26</i> <br>
   *
   * @deprecated use the safer method {@link #ListLocaleInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListLocaleInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListLocaleInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:26</i>
   */
  int ListLocaleInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>FormatLocaleString(char*, const size_t, const char*, null)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:28</i> <br>
   *
   * @deprecated use the safer methods {@link #FormatLocaleString(java.nio.ByteBuffer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String, java.lang.Object...)} and
   * {@link #FormatLocaleString(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.Pointer, java.lang.Object...)} instead
   */
  @Deprecated
  int FormatLocaleString(Pointer magick_restrict, NativeSize size_t1, Pointer magick_restrict2,
      Object... varArgs1);

  /**
   * Original signature : <code>FormatLocaleString(char*, const size_t, const char*, null)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/locale_.h:28</i>
   */
  int FormatLocaleString(ByteBuffer magick_restrict, NativeSize size_t1, String magick_restrict2,
      Object... varArgs1);

  /**
   * Original signature : <code>void LocaleLower(char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/locale_.h:31</i> <br>
   *
   * @deprecated use the safer methods {@link #LocaleLower(java.nio.ByteBuffer)} and {@link
   * #LocaleLower(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void LocaleLower(Pointer charPtr1);

  /**
   * Original signature : <code>void LocaleLower(char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/locale_.h:31</i>
   */
  void LocaleLower(ByteBuffer charPtr1);

  /**
   * Original signature : <code>void LocaleUpper(char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/locale_.h:33</i> <br>
   *
   * @deprecated use the safer methods {@link #LocaleUpper(java.nio.ByteBuffer)} and {@link
   * #LocaleUpper(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void LocaleUpper(Pointer charPtr1);

  /**
   * Original signature : <code>void LocaleUpper(char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/locale_.h:33</i>
   */
  void LocaleUpper(ByteBuffer charPtr1);

  /**
   * Original signature : <code>char** GetLogList(const char*, size_t*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:29</i> <br>
   *
   * @deprecated use the safer methods {@link #GetLogList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetLogList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetLogList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetLogList(const char*, size_t*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:29</i>
   */
  PointerByReference GetLogList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const char* GetLogName()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/log.h:31</i>
   */
  String GetLogName();

  /**
   * Original signature : <code>const char* SetLogName(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:33</i> <br>
   *
   * @deprecated use the safer methods {@link #SetLogName(java.lang.String)} and {@link
   * #SetLogName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  String SetLogName(Pointer charPtr1);

  /**
   * Original signature : <code>const char* SetLogName(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:33</i>
   */
  String SetLogName(String charPtr1);

  /**
   * Original signature : <code>LogInfo** GetLogInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:35</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetLogInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetLogInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetLogInfoList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LogInfo** GetLogInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:35</i>
   */
  PointerByReference GetLogInfoList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>LogEventType SetLogEventMask(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:37</i> <br>
   *
   * @deprecated use the safer methods {@link #SetLogEventMask(java.lang.String)} and {@link
   * #SetLogEventMask(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int SetLogEventMask(Pointer charPtr1);

  /**
   * Original signature : <code>LogEventType SetLogEventMask(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/log.h:37</i>
   */
  int SetLogEventMask(String charPtr1);

  /**
   * Original signature : <code>char** GetMagicList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:12</i> <br>
   *
   * @deprecated use the safer methods {@link #GetMagicList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetMagicList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetMagicList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetMagicList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:12</i>
   */
  PointerByReference GetMagicList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetMagicName(const MagicInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:14</i>
   */
  String GetMagicName(SaMagickCore.MagicInfo MagicInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListMagicInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:16</i> <br>
   *
   * @deprecated use the safer method {@link #ListMagicInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListMagicInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListMagicInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:16</i>
   */
  int ListMagicInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const MagicInfo* GetMagicInfo(const unsigned char*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:18</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetMagicInfo(byte[], com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} and {@link #GetMagicInfo(com.sun.jna.Pointer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.MagicInfo GetMagicInfo(Pointer charPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const MagicInfo* GetMagicInfo(const unsigned char*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:18</i>
   */
  SaMagickCore.MagicInfo GetMagicInfo(byte name[], NativeSize size_t1,
      SaMagickCore.ExceptionInfo exceptionInfo);

  /**
   * Original signature : <code>const MagicInfo** GetMagicInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:20</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetMagicInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetMagicInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.MagicInfo.ByReference[] GetMagicInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const MagicInfo** GetMagicInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:20</i>
   */
  SaMagickCore.MagicInfo.ByReference[] GetMagicInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>size_t GetMagicPatternExtent(ExceptionInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/magic.h:22</i>
   */
  NativeSize GetMagicPatternExtent(SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetMagickList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:40</i> <br>
   *
   * @deprecated use the safer methods {@link #GetMagickList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetMagickList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetMagickList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetMagickList(const char*, size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:40</i>
   */
  PointerByReference GetMagickList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>const char* GetMagickDescription(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:42</i>
   */
  String GetMagickDescription(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>const char* GetMagickMimeType(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:44</i>
   */
  String GetMagickMimeType(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>DecodeImageHandler* GetImageDecoder(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:46</i>
   */
  SaMagickCore.DecodeImageHandler GetImageDecoder(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>EncodeImageHandler* GetImageEncoder(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:48</i>
   */
  SaMagickCore.EncodeImageHandler GetImageEncoder(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>int GetMagickPrecision()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/magick.h:50</i>
   */
  int GetMagickPrecision();

  /**
   * Original signature : <code>int SetMagickPrecision(const int)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/magick.h:52</i>
   */
  int SetMagickPrecision(int int1);

  /**
   * Original signature : <code>MagickBooleanType GetImageMagick(const unsigned char*, const size_t,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:54</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageMagick(byte[], com.ochafik.lang.jnaerator.runtime.NativeSize,
   * java.nio.ByteBuffer)} and {@link #GetImageMagick(com.sun.jna.Pointer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int GetImageMagick(Pointer charPtr1, NativeSize size_t1, Pointer charPtr2);

  /**
   * Original signature : <code>MagickBooleanType GetImageMagick(const unsigned char*, const size_t,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:54</i>
   */
  int GetImageMagick(byte charPtr1[], NativeSize size_t1, ByteBuffer charPtr2);

  /**
   * Original signature : <code>MagickBooleanType GetMagickAdjoin(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:56</i>
   */
  int GetMagickAdjoin(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickBlobSupport(const MagickInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:58</i>
   */
  int GetMagickBlobSupport(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickDecoderSeekableStream(const
   * MagickInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:60</i>
   */
  int GetMagickDecoderSeekableStream(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickDecoderThreadSupport(const
   * MagickInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:62</i>
   */
  int GetMagickDecoderThreadSupport(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickEncoderSeekableStream(const
   * MagickInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:64</i>
   */
  int GetMagickEncoderSeekableStream(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickEncoderThreadSupport(const
   * MagickInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:66</i>
   */
  int GetMagickEncoderThreadSupport(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickEndianSupport(const MagickInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:68</i>
   */
  int GetMagickEndianSupport(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickRawSupport(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:70</i>
   */
  int GetMagickRawSupport(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickStealth(const MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:72</i>
   */
  int GetMagickStealth(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMagickUseExtension(const MagickInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:74</i>
   */
  int GetMagickUseExtension(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType IsMagickCoreInstantiated()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:76</i>
   */
  int IsMagickCoreInstantiated();

  /**
   * Original signature : <code>MagickBooleanType RegisterMagickInfo(MagickInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:78</i>
   */
  int RegisterMagickInfo(SaMagickCore.MagickInfo MagickInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType UnregisterMagickInfo(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:80</i> <br>
   *
   * @deprecated use the safer methods {@link #UnregisterMagickInfo(java.lang.String)} and {@link
   * #UnregisterMagickInfo(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int UnregisterMagickInfo(Pointer charPtr1);

  /**
   * Original signature : <code>MagickBooleanType UnregisterMagickInfo(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:80</i>
   */
  int UnregisterMagickInfo(String charPtr1);

  /**
   * Original signature : <code>MagickInfo* GetMagickInfo(const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:82</i> <br>
   *
   * @deprecated use the safer methods {@link #GetMagickInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetMagickInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.MagickInfo GetMagickInfo(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickInfo* GetMagickInfo(const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:82</i>
   */
  SaMagickCore.MagickInfo GetMagickInfo(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickInfo** GetMagickInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:84</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetMagickInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetMagickInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.MagickInfo.ByReference[] GetMagickInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickInfo** GetMagickInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:84</i>
   */
  SaMagickCore.MagickInfo.ByReference[] GetMagickInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickInfo* AcquireMagickInfo(const char*, const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:86</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #AcquireMagickInfo(java.lang.String, java.lang.String,
   * java.lang.String)} and {@link #AcquireMagickInfo(com.sun.jna.Pointer, com.sun.jna.Pointer,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.MagickInfo AcquireMagickInfo(Pointer charPtr1, Pointer charPtr2, Pointer charPtr3);

  /**
   * Original signature : <code>MagickInfo* AcquireMagickInfo(const char*, const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:86</i>
   */
  SaMagickCore.MagickInfo AcquireMagickInfo(String charPtr1, String charPtr2, String charPtr3);

  /**
   * Original signature : <code>void MagickCoreGenesis(const char*, const MagickBooleanType)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:88</i> <br>
   *
   * @deprecated use the safer methods {@link #MagickCoreGenesis(java.lang.String, int)} and {@link
   * #MagickCoreGenesis(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  void MagickCoreGenesis(Pointer charPtr1, int MagickBooleanType1);

  /**
   * Original signature : <code>void MagickCoreGenesis(const char*, const MagickBooleanType)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/magick.h:88</i>
   */
  void MagickCoreGenesis(String charPtr1, int MagickBooleanType1);

  /**
   * Original signature : <code>void MagickCoreTerminus()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/magick.h:90</i>
   */
  void MagickCoreTerminus();

  /**
   * Original signature : <code>double** AcquireMagickMatrix(const size_t, const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:2</i>
   */
  PointerByReference AcquireMagickMatrix(NativeSize size_t1, NativeSize size_t2);

  /**
   * Original signature : <code>double** RelinquishMagickMatrix(double**, const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:4</i>
   */
  PointerByReference RelinquishMagickMatrix(PointerByReference doublePtrPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>Image* MatrixToImage(const MatrixInfo*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:6</i> <br>
   *
   * @deprecated use the safer method {@link #MatrixToImage(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image MatrixToImage(Pointer MatrixInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* MatrixToImage(const MatrixInfo*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:6</i>
   */
  SaMagickCore.Image MatrixToImage(PointerByReference MatrixInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMatrixElement(const MatrixInfo*, const, const,
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:8</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetMatrixElement(com.sun.jna.ptr.PointerByReference,
   * int, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int GetMatrixElement(Pointer MatrixInfoPtr1, int ssize_t, int ssize_t2, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType GetMatrixElement(const MatrixInfo*, const, const,
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:8</i>
   */
  int GetMatrixElement(PointerByReference MatrixInfoPtr1, int ssize_t, int ssize_t2,
      Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType NullMatrix(MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:10</i> <br>
   *
   * @deprecated use the safer method {@link #NullMatrix(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  int NullMatrix(Pointer MatrixInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType NullMatrix(MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:10</i>
   */
  int NullMatrix(PointerByReference MatrixInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetMatrixElement(const MatrixInfo*, const, const,
   * const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:12</i>
   * <br>
   *
   * @deprecated use the safer method {@link #SetMatrixElement(com.sun.jna.ptr.PointerByReference,
   * int, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int SetMatrixElement(Pointer MatrixInfoPtr1, int ssize_t, int ssize_t2, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickBooleanType SetMatrixElement(const MatrixInfo*, const, const,
   * const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:12</i>
   */
  int SetMatrixElement(PointerByReference MatrixInfoPtr1, int ssize_t, int ssize_t2,
      Pointer voidPtr1);

  /**
   * Original signature : <code>MatrixInfo* AcquireMatrixInfo(const size_t, const size_t, const
   * size_t, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:14</i>
   */
  PointerByReference AcquireMatrixInfo(NativeSize size_t1, NativeSize size_t2, NativeSize size_t3,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MatrixInfo* DestroyMatrixInfo(MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:16</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyMatrixInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyMatrixInfo(Pointer MatrixInfoPtr1);

  /**
   * Original signature : <code>MatrixInfo* DestroyMatrixInfo(MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:16</i>
   */
  PointerByReference DestroyMatrixInfo(PointerByReference MatrixInfoPtr1);

  /**
   * Original signature : <code>size_t GetMatrixColumns(const MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:18</i> <br>
   *
   * @deprecated use the safer method {@link #GetMatrixColumns(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  NativeSize GetMatrixColumns(Pointer MatrixInfoPtr1);

  /**
   * Original signature : <code>size_t GetMatrixColumns(const MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:18</i>
   */
  NativeSize GetMatrixColumns(PointerByReference MatrixInfoPtr1);

  /**
   * Original signature : <code>size_t GetMatrixRows(const MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:20</i> <br>
   *
   * @deprecated use the safer method {@link #GetMatrixRows(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  NativeSize GetMatrixRows(Pointer MatrixInfoPtr1);

  /**
   * Original signature : <code>size_t GetMatrixRows(const MatrixInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/matrix.h:20</i>
   */
  NativeSize GetMatrixRows(PointerByReference MatrixInfoPtr1);

  /**
   * Original signature : <code>extern char** GetMimeList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:3</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetMimeList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetMimeList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetMimeList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char** GetMimeList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:3</i>
   */
  PointerByReference GetMimeList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char* MagickToMime(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:5</i> <br>
   *
   * @deprecated use the safer methods {@link #MagickToMime(java.lang.String)} and {@link
   * #MagickToMime(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer MagickToMime(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* MagickToMime(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:5</i>
   */
  Pointer MagickToMime(String charPtr1);

  /**
   * Original signature : <code>extern const char* GetMimeDescription(const MimeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:7</i> <br>
   *
   * @deprecated use the safer method {@link #GetMimeDescription(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetMimeDescription(Pointer MimeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetMimeDescription(const MimeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:7</i>
   */
  Pointer GetMimeDescription(PointerByReference MimeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetMimeType(const MimeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:9</i> <br>
   *
   * @deprecated use the safer method {@link #GetMimeType(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetMimeType(Pointer MimeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetMimeType(const MimeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:9</i>
   */
  Pointer GetMimeType(PointerByReference MimeInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListMimeInfo(FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:11</i> <br>
   *
   * @deprecated use the safer method {@link #ListMimeInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListMimeInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListMimeInfo(FILE*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:11</i>
   */
  int ListMimeInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType LoadMimeLists(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #LoadMimeLists(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #LoadMimeLists(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int LoadMimeLists(Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType LoadMimeLists(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:13</i>
   */
  int LoadMimeLists(String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const MimeInfo* GetMimeInfo(const char*, const unsigned
   * char*, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/mime.h:15</i> <br>
   *
   * @deprecated use the safer methods {@link #GetMimeInfo(java.lang.String, byte[],
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.ExceptionInfo)} and {@link
   * #GetMimeInfo(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetMimeInfo(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const MimeInfo* GetMimeInfo(const char*, const unsigned
   * char*, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/mime.h:15</i>
   */
  PointerByReference GetMimeInfo(String charPtr1, byte charPtr2[], NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const MimeInfo** GetMimeInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:17</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetMimeInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetMimeInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetMimeInfoList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const MimeInfo** GetMimeInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/mime.h:17</i>
   */
  PointerByReference GetMimeInfoList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetModuleList(const char*, const MagickModuleType, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:19</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetModuleList(java.lang.String, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetModuleList(com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetModuleList(Pointer charPtr1, int MagickModuleType1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetModuleList(const char*, const MagickModuleType, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:19</i>
   */
  PointerByReference GetModuleList(String charPtr1, int MagickModuleType1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ModuleInfo** GetModuleInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:21</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetModuleInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetModuleInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.ModuleInfo.ByReference[] GetModuleInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ModuleInfo** GetModuleInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:21</i>
   */
  SaMagickCore.ModuleInfo.ByReference[] GetModuleInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InvokeDynamicImageFilter(const char*,
   * Image**, const int, const char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/module.h:23</i> <br>
   *
   * @deprecated use the safer methods {@link #InvokeDynamicImageFilter(java.lang.String,
   * SaMagickCore.Image.ByReference[], int, java.lang.String[], SaMagickCore.ExceptionInfo)} and
   * {@link #InvokeDynamicImageFilter(com.sun.jna.Pointer, SaMagickCore.Image.ByReference[], int,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InvokeDynamicImageFilter(Pointer charPtr1, PointerByReference ImagePtrPtr1, int int1,
      PointerByReference charPtrPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InvokeDynamicImageFilter(const char*,
   * Image**, const int, const char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/module.h:23</i>
   */
  int InvokeDynamicImageFilter(String charPtr1, SaMagickCore.Image.ByReference ImagePtrPtr1[],
      int int1, String charPtrPtr1[], SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InvokeDynamicImageFilter(const char*,
   * Image**, const int, const char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/module.h:23</i>
   */
  int InvokeDynamicImageFilter(Pointer charPtr1, SaMagickCore.Image.ByReference ImagePtrPtr1[],
      int int1, PointerByReference charPtrPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListModuleInfo(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:25</i>
   * <br>
   *
   * @deprecated use the safer method {@link #ListModuleInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListModuleInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListModuleInfo(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:25</i>
   */
  int ListModuleInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ModuleInfo* GetModuleInfo(const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:27</i> <br>
   *
   * @deprecated use the safer methods {@link #GetModuleInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetModuleInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.ModuleInfo GetModuleInfo(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ModuleInfo* GetModuleInfo(const char*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/module.h:27</i>
   */
  SaMagickCore.ModuleInfo GetModuleInfo(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void DestroyModuleList()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/module.h:29</i>
   */
  void DestroyModuleList();

  /**
   * Original signature : <code>MagickProgressMonitor SetImageProgressMonitor(Image*, const
   * MagickProgressMonitor, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/monitor.h:3</i>
   */
  SaMagickCore.MagickProgressMonitor SetImageProgressMonitor(SaMagickCore.Image ImagePtr1,
      SaMagickCore.MagickProgressMonitor MagickProgressMonitor1, Pointer voidPtr1);

  /**
   * Original signature : <code>MagickProgressMonitor SetImageInfoProgressMonitor(ImageInfo*, const
   * MagickProgressMonitor, void*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/monitor.h:5</i>
   */
  SaMagickCore.MagickProgressMonitor SetImageInfoProgressMonitor(
      SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.MagickProgressMonitor MagickProgressMonitor1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern Image* MontageImages(const Image*, const MontageInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:29</i>
   */
  SaMagickCore.Image MontageImages(SaMagickCore.Image ImagePtr1,
      SaMagickCore.MontageInfo MontageInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* MontageImageList(const ImageInfo*, const MontageInfo*,
   * const Image*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/montage.h:31</i>
   */
  SaMagickCore.Image MontageImageList(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.MontageInfo MontageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MontageInfo* CloneMontageInfo(const ImageInfo*, const
   * MontageInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:33</i>
   */
  SaMagickCore.MontageInfo CloneMontageInfo(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.MontageInfo MontageInfoPtr1);

  /**
   * Original signature : <code>extern MontageInfo* DestroyMontageInfo(MontageInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:35</i>
   */
  SaMagickCore.MontageInfo DestroyMontageInfo(SaMagickCore.MontageInfo MontageInfoPtr1);

  /**
   * Original signature : <code>void GetMontageInfo(const ImageInfo*, MontageInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/montage.h:37</i>
   */
  void GetMontageInfo(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.MontageInfo MontageInfoPtr1);

  /**
   * Original signature : <code>extern KernelInfo* AcquireKernelInfo(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:88</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #AcquireKernelInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #AcquireKernelInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.KernelInfo AcquireKernelInfo(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern KernelInfo* AcquireKernelInfo(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:88</i>
   */
  SaMagickCore.KernelInfo AcquireKernelInfo(String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern KernelInfo* AcquireKernelBuiltIn(const KernelInfoType, const
   * GeometryInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:90</i>
   */
  SaMagickCore.KernelInfo AcquireKernelBuiltIn(int KernelInfoType1,
      SaMagickCore.GeometryInfo GeometryInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern KernelInfo* CloneKernelInfo(const KernelInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:92</i>
   */
  SaMagickCore.KernelInfo CloneKernelInfo(SaMagickCore.KernelInfo KernelInfoPtr1);

  /**
   * Original signature : <code>extern KernelInfo* DestroyKernelInfo(KernelInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:94</i>
   */
  SaMagickCore.KernelInfo DestroyKernelInfo(SaMagickCore.KernelInfo KernelInfoPtr1);

  /**
   * Original signature : <code>Image* MorphologyImage(const Image*, const MorphologyMethod, const,
   * const KernelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/morphology.h:96</i>
   */
  SaMagickCore.Image MorphologyImage(SaMagickCore.Image ImagePtr1, int MorphologyMethod1,
      int ssize_t, SaMagickCore.KernelInfo KernelInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern void ScaleGeometryKernelInfo(KernelInfo*, const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:98</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ScaleGeometryKernelInfo(SaMagickCore.KernelInfo,
   * java.lang.String)} and {@link #ScaleGeometryKernelInfo(SaMagickCore.KernelInfo,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void ScaleGeometryKernelInfo(SaMagickCore.KernelInfo KernelInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void ScaleGeometryKernelInfo(KernelInfo*, const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:98</i>
   */
  void ScaleGeometryKernelInfo(SaMagickCore.KernelInfo KernelInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern void ScaleKernelInfo(KernelInfo*, const double, const)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:100</i>
   */
  void ScaleKernelInfo(SaMagickCore.KernelInfo KernelInfoPtr1, double double1, int GeometryFlags);

  /**
   * Original signature : <code>extern void UnityAddKernelInfo(KernelInfo*, const double)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/morphology.h:102</i>
   */
  void UnityAddKernelInfo(SaMagickCore.KernelInfo KernelInfoPtr1, double double1);

  /**
   * Original signature : <code>extern const char* GetOpenCLDeviceName(const MagickCLDevice)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:9</i> <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLDeviceName(SaMagickCore.MagickCLDevice)} and
   * {@link #GetOpenCLDeviceName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetOpenCLDeviceName(Pointer MagickCLDevice1);

  /**
   * Original signature : <code>extern const char* GetOpenCLDeviceName(const MagickCLDevice)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:9</i>
   */
  Pointer GetOpenCLDeviceName(SaMagickCore.MagickCLDevice MagickCLDevice1);

  /**
   * Original signature : <code>extern const char* GetOpenCLDeviceVendorName(const
   * MagickCLDevice)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:11</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLDeviceVendorName(SaMagickCore.MagickCLDevice)}
   * and {@link #GetOpenCLDeviceVendorName(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetOpenCLDeviceVendorName(Pointer MagickCLDevice1);

  /**
   * Original signature : <code>extern const char* GetOpenCLDeviceVendorName(const
   * MagickCLDevice)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:11</i>
   */
  Pointer GetOpenCLDeviceVendorName(SaMagickCore.MagickCLDevice MagickCLDevice1);

  /**
   * Original signature : <code>extern const char* GetOpenCLDeviceVersion(const
   * MagickCLDevice)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLDeviceVersion(SaMagickCore.MagickCLDevice)}
   * and {@link #GetOpenCLDeviceVersion(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetOpenCLDeviceVersion(Pointer MagickCLDevice1);

  /**
   * Original signature : <code>extern const char* GetOpenCLDeviceVersion(const
   * MagickCLDevice)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:13</i>
   */
  Pointer GetOpenCLDeviceVersion(SaMagickCore.MagickCLDevice MagickCLDevice1);

  /**
   * Original signature : <code>KernelProfileRecord* GetOpenCLKernelProfileRecords(const
   * MagickCLDevice, size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:15</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLKernelProfileRecords(SaMagickCore.MagickCLDevice,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link
   * #GetOpenCLKernelProfileRecords(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)}
   * instead
   */
  @Deprecated
  PointerByReference GetOpenCLKernelProfileRecords(Pointer MagickCLDevice1,
      NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>KernelProfileRecord* GetOpenCLKernelProfileRecords(const
   * MagickCLDevice, size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:15</i>
   */
  PointerByReference GetOpenCLKernelProfileRecords(SaMagickCore.MagickCLDevice MagickCLDevice1,
      NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>double GetOpenCLDeviceBenchmarkScore(const MagickCLDevice)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:17</i> <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLDeviceBenchmarkScore(SaMagickCore.MagickCLDevice)}
   * and {@link #GetOpenCLDeviceBenchmarkScore(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  double GetOpenCLDeviceBenchmarkScore(Pointer MagickCLDevice1);

  /**
   * Original signature : <code>double GetOpenCLDeviceBenchmarkScore(const MagickCLDevice)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:17</i>
   */
  double GetOpenCLDeviceBenchmarkScore(SaMagickCore.MagickCLDevice MagickCLDevice1);

  /**
   * Original signature : <code>MagickCLDevice* GetOpenCLDevices(size_t*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:19</i>
   */
  PointerByReference GetOpenCLDevices(NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickCLDeviceType GetOpenCLDeviceType(const MagickCLDevice)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:21</i> <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLDeviceType(SaMagickCore.MagickCLDevice)} and
   * {@link #GetOpenCLDeviceType(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int GetOpenCLDeviceType(Pointer MagickCLDevice1);

  /**
   * Original signature : <code>MagickCLDeviceType GetOpenCLDeviceType(const MagickCLDevice)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:21</i>
   */
  int GetOpenCLDeviceType(SaMagickCore.MagickCLDevice MagickCLDevice1);

  /**
   * Original signature : <code>extern MagickBooleanType GetOpenCLDeviceEnabled(const
   * MagickCLDevice)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:23</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetOpenCLDeviceEnabled(SaMagickCore.MagickCLDevice)}
   * and {@link #GetOpenCLDeviceEnabled(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int GetOpenCLDeviceEnabled(Pointer MagickCLDevice1);

  /**
   * Original signature : <code>extern MagickBooleanType GetOpenCLDeviceEnabled(const
   * MagickCLDevice)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:23</i>
   */
  int GetOpenCLDeviceEnabled(SaMagickCore.MagickCLDevice MagickCLDevice1);

  /**
   * Original signature : <code>extern MagickBooleanType GetOpenCLEnabled()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:25</i>
   */
  int GetOpenCLEnabled();

  /**
   * Original signature : <code>extern MagickBooleanType SetOpenCLEnabled(const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:27</i>
   */
  int SetOpenCLEnabled(int MagickBooleanType1);

  /**
   * Original signature : <code>extern void SetOpenCLDeviceEnabled(MagickCLDevice, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:29</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetOpenCLDeviceEnabled(SaMagickCore.MagickCLDevice,
   * int)} and {@link #SetOpenCLDeviceEnabled(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  void SetOpenCLDeviceEnabled(Pointer MagickCLDevice1, int MagickBooleanType1);

  /**
   * Original signature : <code>extern void SetOpenCLDeviceEnabled(MagickCLDevice, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:29</i>
   */
  void SetOpenCLDeviceEnabled(SaMagickCore.MagickCLDevice MagickCLDevice1, int MagickBooleanType1);

  /**
   * Original signature : <code>extern void SetOpenCLKernelProfileEnabled(MagickCLDevice, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:31</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetOpenCLKernelProfileEnabled(SaMagickCore.MagickCLDevice,
   * int)} and {@link #SetOpenCLKernelProfileEnabled(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  void SetOpenCLKernelProfileEnabled(Pointer MagickCLDevice1, int MagickBooleanType1);

  /**
   * Original signature : <code>extern void SetOpenCLKernelProfileEnabled(MagickCLDevice, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/opencl.h:31</i>
   */
  void SetOpenCLKernelProfileEnabled(SaMagickCore.MagickCLDevice MagickCLDevice1,
      int MagickBooleanType1);

  /**
   * Original signature : <code>extern char** GetCommandOptions(const CommandOption)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:131</i>
   */
  PointerByReference GetCommandOptions(int CommandOption1);

  /**
   * Original signature : <code>extern char* GetNextImageOption(const ImageInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:133</i>
   */
  Pointer GetNextImageOption(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>extern char* RemoveImageOption(ImageInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:135</i> <br>
   *
   * @deprecated use the safer methods {@link #RemoveImageOption(SaMagickCore.ImageInfo,
   * java.lang.String)} and {@link #RemoveImageOption(SaMagickCore.ImageInfo, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  Pointer RemoveImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern char* RemoveImageOption(ImageInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:135</i>
   */
  Pointer RemoveImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern const char* CommandOptionToMnemonic(const CommandOption,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:137</i>
   */
  Pointer CommandOptionToMnemonic(int CommandOption1, int ssize_t);

  /**
   * Original signature : <code>extern const char* GetImageOption(const ImageInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:139</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageOption(SaMagickCore.ImageInfo,
   * java.lang.String)} and {@link #GetImageOption(SaMagickCore.ImageInfo, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  Pointer GetImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern const char* GetImageOption(const ImageInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:139</i>
   */
  Pointer GetImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType CloneImageOptions(ImageInfo*, const
   * ImageInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:141</i>
   */
  int CloneImageOptions(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.ImageInfo ImageInfoPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType DefineImageOption(ImageInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:143</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DefineImageOption(SaMagickCore.ImageInfo,
   * java.lang.String)} and {@link #DefineImageOption(SaMagickCore.ImageInfo, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DefineImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DefineImageOption(ImageInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:143</i>
   */
  int DefineImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageOption(ImageInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:145</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DeleteImageOption(SaMagickCore.ImageInfo,
   * java.lang.String)} and {@link #DeleteImageOption(SaMagickCore.ImageInfo, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DeleteImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageOption(ImageInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:145</i>
   */
  int DeleteImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsCommandOption(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:147</i> <br>
   *
   * @deprecated use the safer methods {@link #IsCommandOption(java.lang.String)} and {@link
   * #IsCommandOption(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsCommandOption(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsCommandOption(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:147</i>
   */
  int IsCommandOption(String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsOptionMember(const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:149</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #IsOptionMember(java.lang.String, java.lang.String)}
   * and {@link #IsOptionMember(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsOptionMember(Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType IsOptionMember(const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:149</i>
   */
  int IsOptionMember(String charPtr1, String charPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType ListCommandOptions(FILE*, const
   * CommandOption, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/option.h:151</i> <br>
   *
   * @deprecated use the safer method {@link #ListCommandOptions(com.sun.jna.ptr.PointerByReference,
   * int, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListCommandOptions(Pointer FILEPtr1, int CommandOption1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListCommandOptions(FILE*, const
   * CommandOption, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/option.h:151</i>
   */
  int ListCommandOptions(PointerByReference FILEPtr1, int CommandOption1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageOption(ImageInfo*, const char*,
   * const char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:153</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetImageOption(SaMagickCore.ImageInfo,
   * java.lang.String, java.lang.String)} and {@link #SetImageOption(SaMagickCore.ImageInfo,
   * com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int SetImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageOption(ImageInfo*, const char*,
   * const char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:153</i>
   */
  int SetImageOption(SaMagickCore.ImageInfo ImageInfoPtr1, String charPtr1, String charPtr2);

  /**
   * Original signature : <code>extern ssize_t GetCommandOptionFlags(const CommandOption, const
   * MagickBooleanType, const char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/option.h:155</i> <br>
   *
   * @deprecated use the safer methods {@link #GetCommandOptionFlags(int, int, java.lang.String)}
   * and {@link #GetCommandOptionFlags(int, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.ssize_t GetCommandOptionFlags(int CommandOption1, int MagickBooleanType1,
      Pointer charPtr1);

  /**
   * Original signature : <code>extern ssize_t GetCommandOptionFlags(const CommandOption, const
   * MagickBooleanType, const char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/option.h:155</i>
   */
  SaMagickCore.ssize_t GetCommandOptionFlags(int CommandOption1, int MagickBooleanType1,
      String charPtr1);

  /**
   * Original signature : <code>extern ssize_t ParseChannelOption(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:157</i> <br>
   *
   * @deprecated use the safer methods {@link #ParseChannelOption(java.lang.String)} and {@link
   * #ParseChannelOption(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.ssize_t ParseChannelOption(Pointer charPtr1);

  /**
   * Original signature : <code>extern ssize_t ParseChannelOption(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:157</i>
   */
  SaMagickCore.ssize_t ParseChannelOption(String charPtr1);

  /**
   * Original signature : <code>extern ssize_t ParsePixelChannelOption(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:159</i> <br>
   *
   * @deprecated use the safer methods {@link #ParsePixelChannelOption(java.lang.String)} and {@link
   * #ParsePixelChannelOption(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.ssize_t ParsePixelChannelOption(Pointer charPtr1);

  /**
   * Original signature : <code>extern ssize_t ParsePixelChannelOption(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:159</i>
   */
  SaMagickCore.ssize_t ParsePixelChannelOption(String charPtr1);

  /**
   * Original signature : <code>extern ssize_t ParseCommandOption(const CommandOption, const
   * MagickBooleanType, const char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/option.h:161</i> <br>
   *
   * @deprecated use the safer methods {@link #ParseCommandOption(int, int, java.lang.String)} and
   * {@link #ParseCommandOption(int, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.ssize_t ParseCommandOption(int CommandOption1, int MagickBooleanType1,
      Pointer charPtr1);

  /**
   * Original signature : <code>extern ssize_t ParseCommandOption(const CommandOption, const
   * MagickBooleanType, const char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/option.h:161</i>
   */
  SaMagickCore.ssize_t ParseCommandOption(int CommandOption1, int MagickBooleanType1,
      String charPtr1);

  /**
   * Original signature : <code>extern void DestroyImageOptions(ImageInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:163</i>
   */
  void DestroyImageOptions(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>extern void ResetImageOptions(const ImageInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:165</i>
   */
  void ResetImageOptions(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>extern void ResetImageOptionIterator(const ImageInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:167</i>
   */
  void ResetImageOptionIterator(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>OptionInfo* GetCommandOptionInfo(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:169</i> <br>
   *
   * @deprecated use the safer methods {@link #GetCommandOptionInfo(java.lang.String)} and {@link
   * #GetCommandOptionInfo(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.OptionInfo GetCommandOptionInfo(Pointer value);

  /**
   * Original signature : <code>OptionInfo* GetCommandOptionInfo(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/option.h:169</i>
   */
  SaMagickCore.OptionInfo GetCommandOptionInfo(String value);

  /**
   * Original signature : <code>Image* OilPaintImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/paint.h:2</i>
   */
  SaMagickCore.Image OilPaintImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType FloodfillPaintImage(Image*, const
   * DrawInfo*, const PixelInfo*, const, const, const MagickBooleanType, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/paint.h:4</i>
   */
  int FloodfillPaintImage(SaMagickCore.Image ImagePtr1, SaMagickCore.DrawInfo DrawInfoPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr1, int ssize_t, int ssize_t2, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GradientImage(Image*, const, const, const
   * StopInfo*, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/paint.h:6</i>
   */
  int GradientImage(SaMagickCore.Image ImagePtr1, int GradientType, int SpreadMethod,
      SaMagickCore.StopInfo StopInfoPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType OpaquePaintImage(Image*, const PixelInfo*,
   * const PixelInfo*, const MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/paint.h:8</i>
   */
  int OpaquePaintImage(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr2, int MagickBooleanType1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType TransparentPaintImage(Image*, const
   * PixelInfo*, const, const MagickBooleanType, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/paint.h:10</i>
   */
  int TransparentPaintImage(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      int Quantum, int MagickBooleanType1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType TransparentPaintImageChroma(Image*, const
   * PixelInfo*, const PixelInfo*, const, const MagickBooleanType, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/paint.h:12</i>
   */
  int TransparentPaintImageChroma(SaMagickCore.Image ImagePtr1,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.PixelInfo PixelInfoPtr2, int Quantum,
      int MagickBooleanType1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Pixel method declarations. <br> Original signature : <code>ChannelType
   * SetPixelChannelMask(Image*, const ChannelType)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:134</i>
   */
  int SetPixelChannelMask(SaMagickCore.Image ImagePtr1, int ChannelType1);

  /**
   * Original signature : <code>extern MagickBooleanType ExportImagePixels(const Image*, const,
   * const, const size_t, const size_t, const char*, const StorageType, void*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:136</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ExportImagePixels(SaMagickCore.Image, int, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * java.lang.String, int, com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} and {@link
   * #ExportImagePixels(SaMagickCore.Image, int, int, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ExportImagePixels(SaMagickCore.Image ImagePtr1, int ssize_t, int ssize_t2, NativeSize size_t1,
      NativeSize size_t2, Pointer charPtr1, int StorageType1, Pointer voidPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ExportImagePixels(const Image*, const,
   * const, const size_t, const size_t, const char*, const StorageType, void*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:136</i>
   */
  int ExportImagePixels(SaMagickCore.Image ImagePtr1, int ssize_t, int ssize_t2, NativeSize size_t1,
      NativeSize size_t2, String charPtr1, int StorageType1, Pointer voidPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ImportImagePixels(Image*, const, const,
   * const size_t, const size_t, const char*, const StorageType, const void*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:138</i> <br>
   *
   * @deprecated use the safer methods {@link #ImportImagePixels(SaMagickCore.Image, int, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * java.lang.String, int, com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} and {@link
   * #ImportImagePixels(SaMagickCore.Image, int, int, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ImportImagePixels(SaMagickCore.Image ImagePtr1, int ssize_t, int ssize_t2, NativeSize size_t1,
      NativeSize size_t2, Pointer charPtr1, int StorageType1, Pointer voidPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ImportImagePixels(Image*, const, const,
   * const size_t, const size_t, const char*, const StorageType, const void*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:138</i>
   */
  int ImportImagePixels(SaMagickCore.Image ImagePtr1, int ssize_t, int ssize_t2, NativeSize size_t1,
      NativeSize size_t2, String charPtr1, int StorageType1, Pointer voidPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelChannel(const Image*, const
   * CacheView_*, const PixelChannel, const PixelInterpolateMethod, const double, const double,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:140</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #InterpolatePixelChannel(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, int, int, double, double, java.nio.DoubleBuffer,
   * SaMagickCore.ExceptionInfo)} and {@link #InterpolatePixelChannel(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, int, int, double, double, com.sun.jna.ptr.DoubleByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InterpolatePixelChannel(SaMagickCore.Image ImagePtr1, Pointer CacheView_Ptr1,
      int PixelChannel1, int PixelInterpolateMethod1, double double1, double double2,
      DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelChannel(const Image*, const
   * CacheView_*, const PixelChannel, const PixelInterpolateMethod, const double, const double,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:140</i>
   */
  int InterpolatePixelChannel(SaMagickCore.Image ImagePtr1, PointerByReference CacheView_Ptr1,
      int PixelChannel1, int PixelInterpolateMethod1, double double1, double double2,
      DoubleBuffer doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelChannel(const Image*, const
   * CacheView_*, const PixelChannel, const PixelInterpolateMethod, const double, const double,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:140</i>
   */
  int InterpolatePixelChannel(SaMagickCore.Image ImagePtr1, PointerByReference CacheView_Ptr1,
      int PixelChannel1, int PixelInterpolateMethod1, double double1, double double2,
      DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelChannels(const Image*,
   * const CacheView_*, const Image*, const PixelInterpolateMethod, const double, const double,
   * Quantum*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:142</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #InterpolatePixelChannels(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.Image, int, double, double,
   * java.nio.FloatBuffer, SaMagickCore.ExceptionInfo)} and {@link #InterpolatePixelChannels(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.Image, int, double, double,
   * com.sun.jna.ptr.FloatByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InterpolatePixelChannels(SaMagickCore.Image ImagePtr1, Pointer CacheView_Ptr1,
      SaMagickCore.Image ImagePtr2, int PixelInterpolateMethod1, double double1, double double2,
      FloatByReference QuantumPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelChannels(const Image*,
   * const CacheView_*, const Image*, const PixelInterpolateMethod, const double, const double,
   * Quantum*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:142</i>
   */
  int InterpolatePixelChannels(SaMagickCore.Image ImagePtr1, PointerByReference CacheView_Ptr1,
      SaMagickCore.Image ImagePtr2, int PixelInterpolateMethod1, double double1, double double2,
      FloatBuffer QuantumPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelChannels(const Image*,
   * const CacheView_*, const Image*, const PixelInterpolateMethod, const double, const double,
   * Quantum*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:142</i>
   */
  int InterpolatePixelChannels(SaMagickCore.Image ImagePtr1, PointerByReference CacheView_Ptr1,
      SaMagickCore.Image ImagePtr2, int PixelInterpolateMethod1, double double1, double double2,
      FloatByReference QuantumPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelInfo(const Image*, const
   * CacheView_*, const PixelInterpolateMethod, const double, const double, PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:144</i>
   * <br>
   *
   * @deprecated use the safer method {@link #InterpolatePixelInfo(SaMagickCore.Image,
   * com.sun.jna.ptr.PointerByReference, int, double, double, SaMagickCore.PixelInfo,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InterpolatePixelInfo(SaMagickCore.Image ImagePtr1, Pointer CacheView_Ptr1,
      int PixelInterpolateMethod1, double double1, double double2,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InterpolatePixelInfo(const Image*, const
   * CacheView_*, const PixelInterpolateMethod, const double, const double, PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:144</i>
   */
  int InterpolatePixelInfo(SaMagickCore.Image ImagePtr1, PointerByReference CacheView_Ptr1,
      int PixelInterpolateMethod1, double double1, double double2,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsFuzzyEquivalencePixel(const Image*, const
   * Quantum*, const Image*, const Quantum*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:146</i> <br>
   *
   * @deprecated use the safer methods {@link #IsFuzzyEquivalencePixel(SaMagickCore.Image,
   * java.nio.FloatBuffer, SaMagickCore.Image, java.nio.FloatBuffer)} and {@link
   * #IsFuzzyEquivalencePixel(SaMagickCore.Image, com.sun.jna.ptr.FloatByReference,
   * SaMagickCore.Image, com.sun.jna.ptr.FloatByReference)} instead
   */
  @Deprecated
  int IsFuzzyEquivalencePixel(SaMagickCore.Image ImagePtr1, FloatByReference QuantumPtr1,
      SaMagickCore.Image ImagePtr2, FloatByReference QuantumPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType IsFuzzyEquivalencePixel(const Image*, const
   * Quantum*, const Image*, const Quantum*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:146</i>
   */
  int IsFuzzyEquivalencePixel(SaMagickCore.Image ImagePtr1, FloatBuffer QuantumPtr1,
      SaMagickCore.Image ImagePtr2, FloatBuffer QuantumPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType IsFuzzyEquivalencePixelInfo(const
   * PixelInfo*, const PixelInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/pixel.h:148</i>
   */
  int IsFuzzyEquivalencePixelInfo(SaMagickCore.PixelInfo PixelInfoPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType SetPixelMetaChannels(Image*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:150</i>
   */
  int SetPixelMetaChannels(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickRealType GetPixelInfoIntensity(const Image*, const
   * PixelInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:152</i>
   */
  double GetPixelInfoIntensity(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1);

  /**
   * Original signature : <code>extern MagickRealType GetPixelIntensity(const Image*, const
   * Quantum*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:154</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetPixelIntensity(SaMagickCore.Image,
   * java.nio.FloatBuffer)} and {@link #GetPixelIntensity(SaMagickCore.Image,
   * com.sun.jna.ptr.FloatByReference)} instead
   */
  @Deprecated
  double GetPixelIntensity(SaMagickCore.Image ImagePtr1, FloatByReference QuantumPtr1);

  /**
   * Original signature : <code>extern MagickRealType GetPixelIntensity(const Image*, const
   * Quantum*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:154</i>
   */
  double GetPixelIntensity(SaMagickCore.Image ImagePtr1, FloatBuffer QuantumPtr1);

  /**
   * Original signature : <code>extern PixelChannelMap* AcquirePixelChannelMap()</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:156</i>
   */
  SaMagickCore.PixelChannelMap AcquirePixelChannelMap();

  /**
   * Original signature : <code>extern PixelChannelMap* ClonePixelChannelMap(PixelChannelMap*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:158</i>
   */
  SaMagickCore.PixelChannelMap ClonePixelChannelMap(
      SaMagickCore.PixelChannelMap PixelChannelMapPtr1);

  /**
   * Original signature : <code>extern PixelChannelMap* DestroyPixelChannelMap(PixelChannelMap*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:160</i>
   */
  SaMagickCore.PixelChannelMap DestroyPixelChannelMap(
      SaMagickCore.PixelChannelMap PixelChannelMapPtr1);

  /**
   * Original signature : <code>PixelInfo* ClonePixelInfo(const PixelInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:162</i>
   */
  SaMagickCore.PixelInfo ClonePixelInfo(SaMagickCore.PixelInfo PixelInfoPtr1);

  /**
   * Original signature : <code>extern MagickRealType DecodePixelGamma(const MagickRealType)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:164</i>
   */
  double DecodePixelGamma(double MagickRealType1);

  /**
   * Original signature : <code>extern MagickRealType EncodePixelGamma(const MagickRealType)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:166</i>
   */
  double EncodePixelGamma(double MagickRealType1);

  /**
   * Original signature : <code>extern void ConformPixelInfo(Image*, const PixelInfo*, PixelInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:168</i>
   */
  void ConformPixelInfo(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1,
      SaMagickCore.PixelInfo PixelInfoPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern void GetPixelInfo(const Image*, PixelInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:170</i>
   */
  void GetPixelInfo(SaMagickCore.Image ImagePtr1, SaMagickCore.PixelInfo PixelInfoPtr1);

  /**
   * Original signature : <code>extern void InitializePixelChannelMap(Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/pixel.h:172</i>
   */
  void InitializePixelChannelMap(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>extern char* GetPolicyValue(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:21</i> <br>
   *
   * @deprecated use the safer methods {@link #GetPolicyValue(java.lang.String)} and {@link
   * #GetPolicyValue(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetPolicyValue(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* GetPolicyValue(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:21</i>
   */
  Pointer GetPolicyValue(String charPtr1);

  /**
   * Original signature : <code>extern char** GetPolicyList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:23</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetPolicyList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetPolicyList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetPolicyList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char** GetPolicyList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:23</i>
   */
  PointerByReference GetPolicyList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>PolicyInfo** GetPolicyInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:25</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetPolicyInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetPolicyInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetPolicyInfoList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>PolicyInfo** GetPolicyInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:25</i>
   */
  PointerByReference GetPolicyInfoList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsRightsAuthorized(const PolicyDomain,
   * const PolicyRights, const char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/policy.h:27</i> <br>
   *
   * @deprecated use the safer methods {@link #IsRightsAuthorized(int, int, java.lang.String)} and
   * {@link #IsRightsAuthorized(int, int, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsRightsAuthorized(int PolicyDomain1, int PolicyRights1, Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsRightsAuthorized(const PolicyDomain,
   * const PolicyRights, const char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/policy.h:27</i>
   */
  int IsRightsAuthorized(int PolicyDomain1, int PolicyRights1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListPolicyInfo(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:29</i>
   * <br>
   *
   * @deprecated use the safer method {@link #ListPolicyInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListPolicyInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListPolicyInfo(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:29</i>
   */
  int ListPolicyInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetMagickSecurityPolicy(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:31</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetMagickSecurityPolicy(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #SetMagickSecurityPolicy(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int SetMagickSecurityPolicy(Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetMagickSecurityPolicy(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/policy.h:31</i>
   */
  int SetMagickSecurityPolicy(String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetMagickSecurityPolicyValue(const
   * PolicyDomain, const char*, const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/policy.h:33</i> <br>
   *
   * @deprecated use the safer methods {@link #SetMagickSecurityPolicyValue(int, java.lang.String,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #SetMagickSecurityPolicyValue(int,
   * com.sun.jna.Pointer, com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int SetMagickSecurityPolicyValue(int PolicyDomain1, Pointer charPtr1, Pointer charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetMagickSecurityPolicyValue(const
   * PolicyDomain, const char*, const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/policy.h:33</i>
   */
  int SetMagickSecurityPolicyValue(int PolicyDomain1, String charPtr1, String charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>double GetImageTotalInkDensity(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/prepress.h:2</i>
   */
  double GetImageTotalInkDensity(SaMagickCore.Image image,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* GetNextImageProfile(const Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:10</i>
   */
  Pointer GetNextImageProfile(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>StringInfo* GetImageProfile(const Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:12</i> <br>
   *
   * @deprecated use the safer methods {@link #GetImageProfile(SaMagickCore.Image,
   * java.lang.String)} and {@link #GetImageProfile(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  SaMagickCore.StringInfo GetImageProfile(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>StringInfo* GetImageProfile(const Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:12</i>
   */
  SaMagickCore.StringInfo GetImageProfile(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType CloneImageProfiles(Image*, const
   * Image*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:14</i>
   */
  int CloneImageProfiles(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageProfile(Image*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:16</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DeleteImageProfile(SaMagickCore.Image,
   * java.lang.String)} and {@link #DeleteImageProfile(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DeleteImageProfile(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageProfile(Image*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:16</i>
   */
  int DeleteImageProfile(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ProfileImage(Image*, const char*, const
   * void*, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/profile.h:18</i> <br>
   *
   * @deprecated use the safer methods {@link #ProfileImage(SaMagickCore.Image, java.lang.String,
   * com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} and {@link #ProfileImage(SaMagickCore.Image, com.sun.jna.Pointer,
   * com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ProfileImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1, Pointer voidPtr1,
      NativeSize size_t1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ProfileImage(Image*, const char*, const
   * void*, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/profile.h:18</i>
   */
  int ProfileImage(SaMagickCore.Image ImagePtr1, String charPtr1, Pointer voidPtr1,
      NativeSize size_t1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageProfile(Image*, const char*, const
   * StringInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/profile.h:20</i> <br>
   *
   * @deprecated use the safer methods {@link #SetImageProfile(SaMagickCore.Image, java.lang.String,
   * SaMagickCore.StringInfo, SaMagickCore.ExceptionInfo)} and {@link
   * #SetImageProfile(SaMagickCore.Image, com.sun.jna.Pointer, SaMagickCore.StringInfo,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int SetImageProfile(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.StringInfo StringInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageProfile(Image*, const char*, const
   * StringInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/profile.h:20</i>
   */
  int SetImageProfile(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.StringInfo StringInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>StringInfo* RemoveImageProfile(Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:22</i> <br>
   *
   * @deprecated use the safer methods {@link #RemoveImageProfile(SaMagickCore.Image,
   * java.lang.String)} and {@link #RemoveImageProfile(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  SaMagickCore.StringInfo RemoveImageProfile(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>StringInfo* RemoveImageProfile(Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:22</i>
   */
  SaMagickCore.StringInfo RemoveImageProfile(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>extern void DestroyImageProfiles(Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:24</i>
   */
  void DestroyImageProfiles(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>extern void ResetImageProfileIterator(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/profile.h:26</i>
   */
  void ResetImageProfileIterator(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>extern char* InterpretImageProperties(ImageInfo*, Image*, const
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:2</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #InterpretImageProperties(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #InterpretImageProperties(SaMagickCore.ImageInfo, SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer InterpretImageProperties(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.Image ImagePtr1, Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char* InterpretImageProperties(ImageInfo*, Image*, const
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:2</i>
   */
  Pointer InterpretImageProperties(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.Image ImagePtr1, String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char* RemoveImageProperty(Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:4</i> <br>
   *
   * @deprecated use the safer methods {@link #RemoveImageProperty(SaMagickCore.Image,
   * java.lang.String)} and {@link #RemoveImageProperty(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  Pointer RemoveImageProperty(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern char* RemoveImageProperty(Image*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:4</i>
   */
  Pointer RemoveImageProperty(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>extern const char* GetNextImageProperty(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:6</i>
   */
  Pointer GetNextImageProperty(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>extern const char* GetImageProperty(const Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:8</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageProperty(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #GetImageProperty(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer GetImageProperty(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetImageProperty(const Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:8</i>
   */
  Pointer GetImageProperty(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetMagickProperty(ImageInfo*, Image*, const
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:10</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetMagickProperty(SaMagickCore.ImageInfo,
   * SaMagickCore.Image, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #GetMagickProperty(SaMagickCore.ImageInfo, SaMagickCore.Image, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer GetMagickProperty(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetMagickProperty(ImageInfo*, Image*, const
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:10</i>
   */
  Pointer GetMagickProperty(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType CloneImageProperties(Image*, const
   * Image*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:12</i>
   */
  int CloneImageProperties(SaMagickCore.Image ImagePtr1, SaMagickCore.Image ImagePtr2);

  /**
   * Original signature : <code>extern MagickBooleanType DefineImageProperty(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:14</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DefineImageProperty(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #DefineImageProperty(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int DefineImageProperty(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DefineImageProperty(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:14</i>
   */
  int DefineImageProperty(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageProperty(Image*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:16</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DeleteImageProperty(SaMagickCore.Image,
   * java.lang.String)} and {@link #DeleteImageProperty(SaMagickCore.Image, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int DeleteImageProperty(SaMagickCore.Image ImagePtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageProperty(Image*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:16</i>
   */
  int DeleteImageProperty(SaMagickCore.Image ImagePtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType FormatImageProperty(Image*, const char*,
   * const char*, null)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:18</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #FormatImageProperty(SaMagickCore.Image,
   * java.lang.String, java.lang.String, java.lang.Object...)} and {@link
   * #FormatImageProperty(SaMagickCore.Image, com.sun.jna.Pointer, com.sun.jna.Pointer,
   * java.lang.Object...)} instead
   */
  @Deprecated
  int FormatImageProperty(SaMagickCore.Image ImagePtr1, Pointer charPtr1, Pointer charPtr2,
      Object... varArgs1);

  /**
   * Original signature : <code>extern MagickBooleanType FormatImageProperty(Image*, const char*,
   * const char*, null)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:18</i>
   */
  int FormatImageProperty(SaMagickCore.Image ImagePtr1, String charPtr1, String charPtr2,
      Object... varArgs1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageProperty(Image*, const char*, const
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:20</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetImageProperty(SaMagickCore.Image,
   * java.lang.String, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #SetImageProperty(SaMagickCore.Image, com.sun.jna.Pointer, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int SetImageProperty(SaMagickCore.Image ImagePtr1, Pointer charPtr1, Pointer charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageProperty(Image*, const char*, const
   * char*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:20</i>
   */
  int SetImageProperty(SaMagickCore.Image ImagePtr1, String charPtr1, String charPtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern void DestroyImageProperties(Image*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:22</i>
   */
  void DestroyImageProperties(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>extern void ResetImagePropertyIterator(const Image*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/property.h:24</i>
   */
  void ResetImagePropertyIterator(SaMagickCore.Image ImagePtr1);

  /**
   * Original signature : <code>extern MagickBooleanType CompressImageColormap(Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:16</i>
   */
  int CompressImageColormap(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageQuantizeError(Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:18</i>
   */
  int GetImageQuantizeError(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType PosterizeImage(Image*, const size_t, const
   * DitherMethod, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/quantize.h:20</i>
   */
  int PosterizeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1, int DitherMethod1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType QuantizeImage(const QuantizeInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:22</i>
   */
  int QuantizeImage(SaMagickCore.QuantizeInfo QuantizeInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType QuantizeImages(const QuantizeInfo*, Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:24</i>
   */
  int QuantizeImages(SaMagickCore.QuantizeInfo QuantizeInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType RemapImage(const QuantizeInfo*, Image*,
   * const Image*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/quantize.h:26</i>
   */
  int RemapImage(SaMagickCore.QuantizeInfo QuantizeInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.Image ImagePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType RemapImages(const QuantizeInfo*, Image*,
   * const Image*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/quantize.h:28</i>
   */
  int RemapImages(SaMagickCore.QuantizeInfo QuantizeInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.Image ImagePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern QuantizeInfo* AcquireQuantizeInfo(const ImageInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:30</i>
   */
  SaMagickCore.QuantizeInfo AcquireQuantizeInfo(SaMagickCore.ImageInfo ImageInfoPtr1);

  /**
   * Original signature : <code>extern QuantizeInfo* CloneQuantizeInfo(const QuantizeInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:32</i>
   */
  SaMagickCore.QuantizeInfo CloneQuantizeInfo(SaMagickCore.QuantizeInfo QuantizeInfoPtr1);

  /**
   * Original signature : <code>extern QuantizeInfo* DestroyQuantizeInfo(QuantizeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:34</i>
   */
  SaMagickCore.QuantizeInfo DestroyQuantizeInfo(SaMagickCore.QuantizeInfo QuantizeInfoPtr1);

  /**
   * Original signature : <code>void GetQuantizeInfo(QuantizeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/quantize.h:36</i>
   */
  void GetQuantizeInfo(SaMagickCore.QuantizeInfo QuantizeInfoPtr1);

  /**
   * Method declarations. <br> Original signature : <code>extern double
   * GetRandomValue(RandomInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:7</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetRandomValue(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  double GetRandomValue(Pointer RandomInfoPtr1);

  /**
   * Method declarations. <br> Original signature : <code>extern double
   * GetRandomValue(RandomInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:7</i>
   */
  double GetRandomValue(PointerByReference RandomInfoPtr1);

  /**
   * Method declarations. <br> Original signature : <code>extern double
   * GetPseudoRandomValue(RandomInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/random_.h:12</i> <br>
   *
   * @deprecated use the safer method {@link #GetPseudoRandomValue(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  double GetPseudoRandomValue(Pointer RandomInfoPtr1);

  /**
   * Method declarations. <br> Original signature : <code>extern double
   * GetPseudoRandomValue(RandomInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/random_.h:12</i>
   */
  double GetPseudoRandomValue(PointerByReference RandomInfoPtr1);

  /**
   * Original signature : <code>extern RandomInfo* AcquireRandomInfo()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:14</i>
   */
  PointerByReference AcquireRandomInfo();

  /**
   * Original signature : <code>extern RandomInfo* DestroyRandomInfo(RandomInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:16</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyRandomInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyRandomInfo(Pointer RandomInfoPtr1);

  /**
   * Original signature : <code>extern RandomInfo* DestroyRandomInfo(RandomInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:16</i>
   */
  PointerByReference DestroyRandomInfo(PointerByReference RandomInfoPtr1);

  /**
   * Original signature : <code>StringInfo* GetRandomKey(RandomInfo*, const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:18</i> <br>
   *
   * @deprecated use the safer method {@link #GetRandomKey(com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  SaMagickCore.StringInfo GetRandomKey(Pointer RandomInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>StringInfo* GetRandomKey(RandomInfo*, const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:18</i>
   */
  SaMagickCore.StringInfo GetRandomKey(PointerByReference RandomInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>long GetRandomSecretKey(const RandomInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:20</i> <br>
   *
   * @deprecated use the safer method {@link #GetRandomSecretKey(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  NativeLong GetRandomSecretKey(Pointer RandomInfoPtr1);

  /**
   * Original signature : <code>long GetRandomSecretKey(const RandomInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:20</i>
   */
  NativeLong GetRandomSecretKey(PointerByReference RandomInfoPtr1);

  /**
   * Original signature : <code>extern void SetRandomKey(RandomInfo*, const size_t, unsigned
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:22</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetRandomKey(com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.ByteBuffer)} and {@link
   * #SetRandomKey(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void SetRandomKey(Pointer RandomInfoPtr1, NativeSize size_t1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetRandomKey(RandomInfo*, const size_t, unsigned
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:22</i>
   */
  void SetRandomKey(PointerByReference RandomInfoPtr1, NativeSize size_t1, ByteBuffer charPtr1);

  /**
   * Original signature : <code>extern void SetRandomKey(RandomInfo*, const size_t, unsigned
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:22</i>
   */
  void SetRandomKey(PointerByReference RandomInfoPtr1, NativeSize size_t1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetRandomSecretKey(const unsigned long)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:24</i>
   */
  void SetRandomSecretKey(NativeLong long1);

  /**
   * Original signature : <code>extern void SetRandomTrueRandom(const)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/random_.h:26</i>
   */
  void SetRandomTrueRandom(int MagickBooleanType);

  /**
   * Original signature : <code>char* GetNextImageRegistry()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/registry.h:8</i>
   */
  Pointer GetNextImageRegistry();

  /**
   * Original signature : <code>extern MagickBooleanType DefineImageRegistry(const RegistryType,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/registry.h:10</i> <br>
   *
   * @deprecated use the safer methods {@link #DefineImageRegistry(int, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #DefineImageRegistry(int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int DefineImageRegistry(int RegistryType1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DefineImageRegistry(const RegistryType,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/registry.h:10</i>
   */
  int DefineImageRegistry(int RegistryType1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageRegistry(const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:12</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #DeleteImageRegistry(java.lang.String)} and {@link
   * #DeleteImageRegistry(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int DeleteImageRegistry(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteImageRegistry(const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:12</i>
   */
  int DeleteImageRegistry(String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageRegistry(const RegistryType, const
   * char*, const void*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/registry.h:14</i> <br>
   *
   * @deprecated use the safer methods {@link #SetImageRegistry(int, java.lang.String,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} and {@link #SetImageRegistry(int,
   * com.sun.jna.Pointer, com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int SetImageRegistry(int RegistryType1, Pointer charPtr1, Pointer voidPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetImageRegistry(const RegistryType, const
   * char*, const void*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/registry.h:14</i>
   */
  int SetImageRegistry(int RegistryType1, String charPtr1, Pointer voidPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern void* GetImageRegistry(const RegistryType, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:16</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageRegistry(int, java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetImageRegistry(int, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer GetImageRegistry(int RegistryType1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern void* GetImageRegistry(const RegistryType, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:16</i>
   */
  Pointer GetImageRegistry(int RegistryType1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern void* RemoveImageRegistry(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:18</i> <br>
   *
   * @deprecated use the safer methods {@link #RemoveImageRegistry(java.lang.String)} and {@link
   * #RemoveImageRegistry(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer RemoveImageRegistry(Pointer charPtr1);

  /**
   * Original signature : <code>extern void* RemoveImageRegistry(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:18</i>
   */
  Pointer RemoveImageRegistry(String charPtr1);

  /**
   * Original signature : <code>extern void ResetImageRegistryIterator()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/registry.h:20</i>
   */
  void ResetImageRegistryIterator();

  /**
   * Original signature : <code>extern MagickBooleanType ResamplePixelColor(ResampleFilter*, const
   * double, const double, PixelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resample.h:49</i> <br>
   *
   * @deprecated use the safer method {@link #ResamplePixelColor(com.sun.jna.ptr.PointerByReference,
   * double, double, SaMagickCore.PixelInfo, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ResamplePixelColor(Pointer ResampleFilterPtr1, double double1, double double2,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ResamplePixelColor(ResampleFilter*, const
   * double, const double, PixelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resample.h:49</i>
   */
  int ResamplePixelColor(PointerByReference ResampleFilterPtr1, double double1, double double2,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetResampleFilterInterpolateMethod(ResampleFilter*,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:51</i>
   * <br>
   *
   * @deprecated use the safer method {@link #SetResampleFilterInterpolateMethod(com.sun.jna.ptr.PointerByReference,
   * int)} instead
   */
  @Deprecated
  int SetResampleFilterInterpolateMethod(Pointer ResampleFilterPtr1, int PixelInterpolateMethod);

  /**
   * Original signature : <code>extern MagickBooleanType SetResampleFilterInterpolateMethod(ResampleFilter*,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:51</i>
   */
  int SetResampleFilterInterpolateMethod(PointerByReference ResampleFilterPtr1,
      int PixelInterpolateMethod);

  /**
   * Original signature : <code>extern MagickBooleanType SetResampleFilterVirtualPixelMethod(ResampleFilter*,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:53</i>
   * <br>
   *
   * @deprecated use the safer method {@link #SetResampleFilterVirtualPixelMethod(com.sun.jna.ptr.PointerByReference,
   * int)} instead
   */
  @Deprecated
  int SetResampleFilterVirtualPixelMethod(Pointer ResampleFilterPtr1, int VirtualPixelMethod);

  /**
   * Original signature : <code>extern MagickBooleanType SetResampleFilterVirtualPixelMethod(ResampleFilter*,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:53</i>
   */
  int SetResampleFilterVirtualPixelMethod(PointerByReference ResampleFilterPtr1,
      int VirtualPixelMethod);

  /**
   * Original signature : <code>extern ResampleFilter* AcquireResampleFilter(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:55</i>
   */
  PointerByReference AcquireResampleFilter(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern ResampleFilter* DestroyResampleFilter(ResampleFilter*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:57</i>
   * <br>
   *
   * @deprecated use the safer method {@link #DestroyResampleFilter(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyResampleFilter(Pointer ResampleFilterPtr1);

  /**
   * Original signature : <code>extern ResampleFilter* DestroyResampleFilter(ResampleFilter*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:57</i>
   */
  PointerByReference DestroyResampleFilter(PointerByReference ResampleFilterPtr1);

  /**
   * Original signature : <code>extern void ScaleResampleFilter(ResampleFilter*, const double, const
   * double, const double, const double)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resample.h:59</i> <br>
   *
   * @deprecated use the safer method {@link #ScaleResampleFilter(com.sun.jna.ptr.PointerByReference,
   * double, double, double, double)} instead
   */
  @Deprecated
  void ScaleResampleFilter(Pointer ResampleFilterPtr1, double double1, double double2,
      double double3, double double4);

  /**
   * Original signature : <code>extern void ScaleResampleFilter(ResampleFilter*, const double, const
   * double, const double, const double)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resample.h:59</i>
   */
  void ScaleResampleFilter(PointerByReference ResampleFilterPtr1, double double1, double double2,
      double double3, double double4);

  /**
   * Original signature : <code>extern void SetResampleFilter(ResampleFilter*, const
   * FilterType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:61</i>
   * <br>
   *
   * @deprecated use the safer method {@link #SetResampleFilter(com.sun.jna.ptr.PointerByReference,
   * int)} instead
   */
  @Deprecated
  void SetResampleFilter(Pointer ResampleFilterPtr1, int FilterType1);

  /**
   * Original signature : <code>extern void SetResampleFilter(ResampleFilter*, const
   * FilterType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resample.h:61</i>
   */
  void SetResampleFilter(PointerByReference ResampleFilterPtr1, int FilterType1);

  /**
   * Original signature : <code>extern Image* AdaptiveResizeImage(const Image*, const size_t, const
   * size_t, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:3</i>
   */
  SaMagickCore.Image AdaptiveResizeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* InterpolativeResizeImage(const Image*, const size_t,
   * const size_t, const, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resize.h:5</i>
   */
  SaMagickCore.Image InterpolativeResizeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, int PixelInterpolateMethod, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* LiquidRescaleImage(const Image*, const size_t, const
   * size_t, const double, const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resize.h:7</i>
   */
  SaMagickCore.Image LiquidRescaleImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* MagnifyImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:9</i>
   */
  SaMagickCore.Image MagnifyImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* MinifyImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:11</i>
   */
  SaMagickCore.Image MinifyImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ResampleImage(const Image*, const double, const
   * double, const, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/resize.h:13</i>
   */
  SaMagickCore.Image ResampleImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      int FilterType, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ResizeImage(const Image*, const size_t, const size_t,
   * const, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:15</i>
   */
  SaMagickCore.Image ResizeImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, int FilterType, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* SampleImage(const Image*, const size_t, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:17</i>
   */
  SaMagickCore.Image SampleImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ScaleImage(const Image*, const size_t, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:19</i>
   */
  SaMagickCore.Image ScaleImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ThumbnailImage(const Image*, const size_t, const
   * size_t, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resize.h:21</i>
   */
  SaMagickCore.Image ThumbnailImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>int AcquireUniqueFileResource(char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:16</i> <br>
   *
   * @deprecated use the safer methods {@link #AcquireUniqueFileResource(java.nio.ByteBuffer)} and
   * {@link #AcquireUniqueFileResource(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int AcquireUniqueFileResource(Pointer charPtr1);

  /**
   * Original signature : <code>int AcquireUniqueFileResource(char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:16</i>
   */
  int AcquireUniqueFileResource(ByteBuffer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType AcquireMagickResource(const ResourceType,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:18</i>
   */
  int AcquireMagickResource(int ResourceType1, int MagickSizeType);

  /**
   * Original signature : <code>extern MagickBooleanType GetPathTemplate(char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:20</i> <br>
   *
   * @deprecated use the safer methods {@link #GetPathTemplate(java.nio.ByteBuffer)} and {@link
   * #GetPathTemplate(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int GetPathTemplate(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetPathTemplate(char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:20</i>
   */
  int GetPathTemplate(ByteBuffer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListMagickResourceInfo(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:22</i>
   * <br>
   *
   * @deprecated use the safer method {@link #ListMagickResourceInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListMagickResourceInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListMagickResourceInfo(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:22</i>
   */
  int ListMagickResourceInfo(PointerByReference FILEPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType RelinquishUniqueFileResource(const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:24</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #RelinquishUniqueFileResource(java.lang.String)} and
   * {@link #RelinquishUniqueFileResource(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int RelinquishUniqueFileResource(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType RelinquishUniqueFileResource(const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:24</i>
   */
  int RelinquishUniqueFileResource(String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SetMagickResourceLimit(const ResourceType,
   * const)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:26</i>
   */
  int SetMagickResourceLimit(int ResourceType1, int MagickSizeType);

  /**
   * Original signature : <code>extern MagickSizeType GetMagickResource(const ResourceType)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:28</i>
   */
  long GetMagickResource(int ResourceType1);

  /**
   * Original signature : <code>extern MagickSizeType GetMagickResourceLimit(const
   * ResourceType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:30</i>
   */
  long GetMagickResourceLimit(int ResourceType1);

  /**
   * Original signature : <code>void RelinquishMagickResource(const ResourceType, const
   * MagickSizeType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/resource_.h:32</i>
   */
  void RelinquishMagickResource(int ResourceType1, long MagickSizeType1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageDynamicThreshold(const Image*,
   * const double, const double, PixelInfo*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/segment.h:2</i>
   */
  int GetImageDynamicThreshold(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.PixelInfo PixelInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SegmentImage(Image*, const, const
   * MagickBooleanType, const double, const double, ExceptionInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/segment.h:4</i>
   */
  int SegmentImage(SaMagickCore.Image ImagePtr1, int ColorspaceType, int MagickBooleanType1,
      double double1, double double2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>SemaphoreInfo* AcquireSemaphoreInfo()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:3</i>
   */
  PointerByReference AcquireSemaphoreInfo();

  /**
   * Original signature : <code>extern void ActivateSemaphoreInfo(SemaphoreInfo**)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:5</i>
   */
  void ActivateSemaphoreInfo(PointerByReference SemaphoreInfoPtrPtr1);

  /**
   * Original signature : <code>extern void LockSemaphoreInfo(SemaphoreInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:7</i> <br>
   *
   * @deprecated use the safer method {@link #LockSemaphoreInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void LockSemaphoreInfo(Pointer SemaphoreInfoPtr1);

  /**
   * Original signature : <code>extern void LockSemaphoreInfo(SemaphoreInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:7</i>
   */
  void LockSemaphoreInfo(PointerByReference SemaphoreInfoPtr1);

  /**
   * Original signature : <code>extern void RelinquishSemaphoreInfo(SemaphoreInfo**)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:9</i>
   */
  void RelinquishSemaphoreInfo(PointerByReference SemaphoreInfoPtrPtr1);

  /**
   * Original signature : <code>extern void UnlockSemaphoreInfo(SemaphoreInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:11</i> <br>
   *
   * @deprecated use the safer method {@link #UnlockSemaphoreInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void UnlockSemaphoreInfo(Pointer SemaphoreInfoPtr1);

  /**
   * Original signature : <code>extern void UnlockSemaphoreInfo(SemaphoreInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/semaphore.h:11</i>
   */
  void UnlockSemaphoreInfo(PointerByReference SemaphoreInfoPtr1);

  /**
   * Original signature : <code>extern Image* DeskewImage(const Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/shear.h:2</i>
   */
  SaMagickCore.Image DeskewImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* IntegralRotateImage(const Image*, size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/shear.h:4</i>
   */
  SaMagickCore.Image IntegralRotateImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ShearImage(const Image*, const double, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/shear.h:6</i>
   */
  SaMagickCore.Image ShearImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ShearRotateImage(const Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/shear.h:8</i>
   */
  SaMagickCore.Image ShearRotateImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType SignatureImage(Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/signature.h:2</i>
   */
  int SignatureImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType AddValueToSplayTree(SplayTreeInfo*, const
   * void*, const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:3</i>
   * <br>
   *
   * @deprecated use the safer method {@link #AddValueToSplayTree(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int AddValueToSplayTree(Pointer SplayTreeInfoPtr1, Pointer voidPtr1, Pointer voidPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType AddValueToSplayTree(SplayTreeInfo*, const
   * void*, const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:3</i>
   */
  int AddValueToSplayTree(PointerByReference SplayTreeInfoPtr1, Pointer voidPtr1, Pointer voidPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteNodeByValueFromSplayTree(SplayTreeInfo*,
   * const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:5</i>
   * <br>
   *
   * @deprecated use the safer method {@link #DeleteNodeByValueFromSplayTree(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int DeleteNodeByValueFromSplayTree(Pointer SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteNodeByValueFromSplayTree(SplayTreeInfo*,
   * const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:5</i>
   */
  int DeleteNodeByValueFromSplayTree(PointerByReference SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteNodeFromSplayTree(SplayTreeInfo*,
   * const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:7</i>
   * <br>
   *
   * @deprecated use the safer method {@link #DeleteNodeFromSplayTree(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int DeleteNodeFromSplayTree(Pointer SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType DeleteNodeFromSplayTree(SplayTreeInfo*,
   * const void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:7</i>
   */
  int DeleteNodeFromSplayTree(PointerByReference SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern const void* GetNextKeyInSplayTree(SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:9</i> <br>
   *
   * @deprecated use the safer method {@link #GetNextKeyInSplayTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetNextKeyInSplayTree(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern const void* GetNextKeyInSplayTree(SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:9</i>
   */
  Pointer GetNextKeyInSplayTree(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern const void* GetNextValueInSplayTree(SplayTreeInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:11</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetNextValueInSplayTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetNextValueInSplayTree(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern const void* GetNextValueInSplayTree(SplayTreeInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:11</i>
   */
  Pointer GetNextValueInSplayTree(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern const void* GetRootValueFromSplayTree(SplayTreeInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:13</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetRootValueFromSplayTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetRootValueFromSplayTree(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern const void* GetRootValueFromSplayTree(SplayTreeInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:13</i>
   */
  Pointer GetRootValueFromSplayTree(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern const void* GetValueFromSplayTree(SplayTreeInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:15</i>
   * <br>
   *
   * @deprecated use the safer method {@link #GetValueFromSplayTree(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetValueFromSplayTree(Pointer SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern const void* GetValueFromSplayTree(SplayTreeInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:15</i>
   */
  Pointer GetValueFromSplayTree(PointerByReference SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern int CompareSplayTreeString(const void*, const void*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:17</i>
   */
  int CompareSplayTreeString(Pointer voidPtr1, Pointer voidPtr2);

  /**
   * Original signature : <code>extern int CompareSplayTreeStringInfo(const void*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:19</i>
   */
  int CompareSplayTreeStringInfo(Pointer voidPtr1, Pointer voidPtr2);

  /**
   * Original signature : <code>extern SplayTreeInfo* CloneSplayTree(SplayTreeInfo*,
   * CloneSplayTree_arg1_callback*, CloneSplayTree_arg2_callback*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:21</i> <br>
   *
   * @deprecated use the safer method {@link #CloneSplayTree(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.CloneSplayTree_arg1_callback, SaMagickCore.CloneSplayTree_arg2_callback)} instead
   */
  @Deprecated
  PointerByReference CloneSplayTree(Pointer SplayTreeInfoPtr1,
      SaMagickCore.CloneSplayTree_arg1_callback arg1,
      SaMagickCore.CloneSplayTree_arg2_callback arg2);

  /**
   * Original signature : <code>extern SplayTreeInfo* CloneSplayTree(SplayTreeInfo*,
   * CloneSplayTree_arg1_callback*, CloneSplayTree_arg2_callback*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:21</i>
   */
  PointerByReference CloneSplayTree(PointerByReference SplayTreeInfoPtr1,
      SaMagickCore.CloneSplayTree_arg1_callback arg1,
      SaMagickCore.CloneSplayTree_arg2_callback arg2);

  /**
   * Original signature : <code>extern SplayTreeInfo* DestroySplayTree(SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:23</i> <br>
   *
   * @deprecated use the safer method {@link #DestroySplayTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroySplayTree(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern SplayTreeInfo* DestroySplayTree(SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:23</i>
   */
  PointerByReference DestroySplayTree(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern SplayTreeInfo* NewSplayTree(NewSplayTree_arg1_callback*,
   * NewSplayTree_arg2_callback*, NewSplayTree_arg3_callback*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:25</i>
   */
  PointerByReference NewSplayTree(SaMagickCore.NewSplayTree_arg1_callback arg1,
      SaMagickCore.NewSplayTree_arg2_callback arg2, SaMagickCore.NewSplayTree_arg3_callback arg3);

  /**
   * Original signature : <code>size_t GetNumberOfNodesInSplayTree(const SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:27</i> <br>
   *
   * @deprecated use the safer method {@link #GetNumberOfNodesInSplayTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  NativeSize GetNumberOfNodesInSplayTree(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>size_t GetNumberOfNodesInSplayTree(const SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:27</i>
   */
  NativeSize GetNumberOfNodesInSplayTree(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern void* RemoveNodeByValueFromSplayTree(SplayTreeInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:29</i>
   * <br>
   *
   * @deprecated use the safer method {@link #RemoveNodeByValueFromSplayTree(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer RemoveNodeByValueFromSplayTree(Pointer SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern void* RemoveNodeByValueFromSplayTree(SplayTreeInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:29</i>
   */
  Pointer RemoveNodeByValueFromSplayTree(PointerByReference SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern void* RemoveNodeFromSplayTree(SplayTreeInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:31</i>
   * <br>
   *
   * @deprecated use the safer method {@link #RemoveNodeFromSplayTree(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer RemoveNodeFromSplayTree(Pointer SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern void* RemoveNodeFromSplayTree(SplayTreeInfo*, const
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:31</i>
   */
  Pointer RemoveNodeFromSplayTree(PointerByReference SplayTreeInfoPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern void ResetSplayTree(SplayTreeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:33</i> <br>
   *
   * @deprecated use the safer method {@link #ResetSplayTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void ResetSplayTree(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern void ResetSplayTree(SplayTreeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:33</i>
   */
  void ResetSplayTree(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern void ResetSplayTreeIterator(SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:35</i> <br>
   *
   * @deprecated use the safer method {@link #ResetSplayTreeIterator(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void ResetSplayTreeIterator(Pointer SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern void ResetSplayTreeIterator(SplayTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/splay-tree.h:35</i>
   */
  void ResetSplayTreeIterator(PointerByReference SplayTreeInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InvokeStaticImageFilter(const char*,
   * Image**, const int, const char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:2</i> <br>
   *
   * @deprecated use the safer methods {@link #InvokeStaticImageFilter(java.lang.String,
   * SaMagickCore.Image.ByReference[], int, java.lang.String[], SaMagickCore.ExceptionInfo)} and
   * {@link #InvokeStaticImageFilter(com.sun.jna.Pointer, SaMagickCore.Image.ByReference[], int,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int InvokeStaticImageFilter(Pointer charPtr1, PointerByReference ImagePtrPtr1, int int1,
      PointerByReference charPtrPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InvokeStaticImageFilter(const char*,
   * Image**, const int, const char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:2</i>
   */
  int InvokeStaticImageFilter(String charPtr1, SaMagickCore.Image.ByReference ImagePtrPtr1[],
      int int1, String charPtrPtr1[], SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType InvokeStaticImageFilter(const char*,
   * Image**, const int, const char**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:2</i>
   */
  int InvokeStaticImageFilter(Pointer charPtr1, SaMagickCore.Image.ByReference ImagePtrPtr1[],
      int int1, PointerByReference charPtrPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType RegisterStaticModule(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:4</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #RegisterStaticModule(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #RegisterStaticModule(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int RegisterStaticModule(Pointer charPtr1, SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>extern MagickBooleanType RegisterStaticModule(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:4</i>
   */
  int RegisterStaticModule(String charPtr1, SaMagickCore.ExceptionInfo exception);

  /**
   * Original signature : <code>extern MagickBooleanType UnregisterStaticModule(const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:6</i> <br>
   *
   * @deprecated use the safer methods {@link #UnregisterStaticModule(java.lang.String)} and {@link
   * #UnregisterStaticModule(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int UnregisterStaticModule(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType UnregisterStaticModule(const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:6</i>
   */
  int UnregisterStaticModule(String charPtr1);

  /**
   * Original signature : <code>extern size_t RegisterAAIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:8</i>
   */
  NativeSize RegisterAAIImage();

  /**
   * Original signature : <code>extern size_t RegisterARTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:10</i>
   */
  NativeSize RegisterARTImage();

  /**
   * Original signature : <code>extern size_t RegisterAVIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:12</i>
   */
  NativeSize RegisterAVIImage();

  /**
   * Original signature : <code>extern size_t RegisterAVSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:14</i>
   */
  NativeSize RegisterAVSImage();

  /**
   * Original signature : <code>extern size_t RegisterBIEImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:16</i>
   */
  NativeSize RegisterBIEImage();

  /**
   * Original signature : <code>extern size_t RegisterBGRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:18</i>
   */
  NativeSize RegisterBGRImage();

  /**
   * Original signature : <code>extern size_t RegisterBMPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:20</i>
   */
  NativeSize RegisterBMPImage();

  /**
   * Original signature : <code>extern size_t RegisterBRAILLEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:22</i>
   */
  NativeSize RegisterBRAILLEImage();

  /**
   * Original signature : <code>extern size_t RegisterCALSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:24</i>
   */
  NativeSize RegisterCALSImage();

  /**
   * Original signature : <code>extern size_t RegisterCAPTIONImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:26</i>
   */
  NativeSize RegisterCAPTIONImage();

  /**
   * Original signature : <code>extern size_t RegisterCINImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:28</i>
   */
  NativeSize RegisterCINImage();

  /**
   * Original signature : <code>extern size_t RegisterCIPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:30</i>
   */
  NativeSize RegisterCIPImage();

  /**
   * Original signature : <code>extern size_t RegisterCLIPImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:32</i>
   */
  NativeSize RegisterCLIPImage();

  /**
   * Original signature : <code>extern size_t RegisterCLIPBOARDImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:34</i>
   */
  NativeSize RegisterCLIPBOARDImage();

  /**
   * Original signature : <code>extern size_t RegisterCMYKImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:36</i>
   */
  NativeSize RegisterCMYKImage();

  /**
   * Original signature : <code>extern size_t RegisterCUTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:38</i>
   */
  NativeSize RegisterCUTImage();

  /**
   * Original signature : <code>extern size_t RegisterDCMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:40</i>
   */
  NativeSize RegisterDCMImage();

  /**
   * Original signature : <code>extern size_t RegisterDCXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:42</i>
   */
  NativeSize RegisterDCXImage();

  /**
   * Original signature : <code>extern size_t RegisterDDSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:44</i>
   */
  NativeSize RegisterDDSImage();

  /**
   * Original signature : <code>extern size_t RegisterDEBUGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:46</i>
   */
  NativeSize RegisterDEBUGImage();

  /**
   * Original signature : <code>extern size_t RegisterDIBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:48</i>
   */
  NativeSize RegisterDIBImage();

  /**
   * Original signature : <code>extern size_t RegisterDJVUImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:50</i>
   */
  NativeSize RegisterDJVUImage();

  /**
   * Original signature : <code>extern size_t RegisterDNGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:52</i>
   */
  NativeSize RegisterDNGImage();

  /**
   * Original signature : <code>extern size_t RegisterDPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:54</i>
   */
  NativeSize RegisterDPSImage();

  /**
   * Original signature : <code>extern size_t RegisterDPXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:56</i>
   */
  NativeSize RegisterDPXImage();

  /**
   * Original signature : <code>extern size_t RegisterEMFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:58</i>
   */
  NativeSize RegisterEMFImage();

  /**
   * Original signature : <code>extern size_t RegisterEPDFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:60</i>
   */
  NativeSize RegisterEPDFImage();

  /**
   * Original signature : <code>extern size_t RegisterEPIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:62</i>
   */
  NativeSize RegisterEPIImage();

  /**
   * Original signature : <code>extern size_t RegisterEPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:64</i>
   */
  NativeSize RegisterEPSImage();

  /**
   * Original signature : <code>extern size_t RegisterEPS2Image()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:66</i>
   */
  NativeSize RegisterEPS2Image();

  /**
   * Original signature : <code>extern size_t RegisterEPSFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:68</i>
   */
  NativeSize RegisterEPSFImage();

  /**
   * Original signature : <code>extern size_t RegisterEPSIImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:70</i>
   */
  NativeSize RegisterEPSIImage();

  /**
   * Original signature : <code>extern size_t RegisterEPTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:72</i>
   */
  NativeSize RegisterEPTImage();

  /**
   * Original signature : <code>extern size_t RegisterEXRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:74</i>
   */
  NativeSize RegisterEXRImage();

  /**
   * Original signature : <code>extern size_t RegisterFAXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:76</i>
   */
  NativeSize RegisterFAXImage();

  /**
   * Original signature : <code>extern size_t RegisterFITSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:78</i>
   */
  NativeSize RegisterFITSImage();

  /**
   * Original signature : <code>extern size_t RegisterFLIFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:80</i>
   */
  NativeSize RegisterFLIFImage();

  /**
   * Original signature : <code>extern size_t RegisterFPXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:82</i>
   */
  NativeSize RegisterFPXImage();

  /**
   * Original signature : <code>extern size_t RegisterG3Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:84</i>
   */
  NativeSize RegisterG3Image();

  /**
   * Original signature : <code>extern size_t RegisterGIFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:86</i>
   */
  NativeSize RegisterGIFImage();

  /**
   * Original signature : <code>extern size_t RegisterGIF87Image()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:88</i>
   */
  NativeSize RegisterGIF87Image();

  /**
   * Original signature : <code>extern size_t RegisterGRADIENTImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:90</i>
   */
  NativeSize RegisterGRADIENTImage();

  /**
   * Original signature : <code>extern size_t RegisterGRANITEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:92</i>
   */
  NativeSize RegisterGRANITEImage();

  /**
   * Original signature : <code>extern size_t RegisterGRAYImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:94</i>
   */
  NativeSize RegisterGRAYImage();

  /**
   * Original signature : <code>extern size_t RegisterHALDImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:96</i>
   */
  NativeSize RegisterHALDImage();

  /**
   * Original signature : <code>extern size_t RegisterHDRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:98</i>
   */
  NativeSize RegisterHDRImage();

  /**
   * Original signature : <code>extern size_t RegisterHEICImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:100</i>
   */
  NativeSize RegisterHEICImage();

  /**
   * Original signature : <code>extern size_t RegisterHImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:102</i>
   */
  NativeSize RegisterHImage();

  /**
   * Original signature : <code>extern size_t RegisterHISTOGRAMImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:104</i>
   */
  NativeSize RegisterHISTOGRAMImage();

  /**
   * Original signature : <code>extern size_t RegisterHRZImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:106</i>
   */
  NativeSize RegisterHRZImage();

  /**
   * Original signature : <code>extern size_t RegisterHTMLImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:108</i>
   */
  NativeSize RegisterHTMLImage();

  /**
   * Original signature : <code>extern size_t RegisterICBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:110</i>
   */
  NativeSize RegisterICBImage();

  /**
   * Original signature : <code>extern size_t RegisterICONImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:112</i>
   */
  NativeSize RegisterICONImage();

  /**
   * Original signature : <code>extern size_t RegisterINFOImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:114</i>
   */
  NativeSize RegisterINFOImage();

  /**
   * Original signature : <code>extern size_t RegisterINLINEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:116</i>
   */
  NativeSize RegisterINLINEImage();

  /**
   * Original signature : <code>extern size_t RegisterIPLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:118</i>
   */
  NativeSize RegisterIPLImage();

  /**
   * Original signature : <code>extern size_t RegisterJBGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:120</i>
   */
  NativeSize RegisterJBGImage();

  /**
   * Original signature : <code>extern size_t RegisterJBIGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:122</i>
   */
  NativeSize RegisterJBIGImage();

  /**
   * Original signature : <code>extern size_t RegisterJNXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:124</i>
   */
  NativeSize RegisterJNXImage();

  /**
   * Original signature : <code>extern size_t RegisterJPEGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:126</i>
   */
  NativeSize RegisterJPEGImage();

  /**
   * Original signature : <code>extern size_t RegisterJSONImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:128</i>
   */
  NativeSize RegisterJSONImage();

  /**
   * Original signature : <code>extern size_t RegisterJP2Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:130</i>
   */
  NativeSize RegisterJP2Image();

  /**
   * Original signature : <code>extern size_t RegisterLABELImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:132</i>
   */
  NativeSize RegisterLABELImage();

  /**
   * Original signature : <code>extern size_t RegisterMACImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:134</i>
   */
  NativeSize RegisterMACImage();

  /**
   * Original signature : <code>extern size_t RegisterMAGICKImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:136</i>
   */
  NativeSize RegisterMAGICKImage();

  /**
   * Original signature : <code>extern size_t RegisterMAPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:138</i>
   */
  NativeSize RegisterMAPImage();

  /**
   * Original signature : <code>extern size_t RegisterMASKImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:140</i>
   */
  NativeSize RegisterMASKImage();

  /**
   * Original signature : <code>extern size_t RegisterMATImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:142</i>
   */
  NativeSize RegisterMATImage();

  /**
   * Original signature : <code>extern size_t RegisterMATTEImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:144</i>
   */
  NativeSize RegisterMATTEImage();

  /**
   * Original signature : <code>extern size_t RegisterMETAImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:146</i>
   */
  NativeSize RegisterMETAImage();

  /**
   * Original signature : <code>extern size_t RegisterMIFFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:148</i>
   */
  NativeSize RegisterMIFFImage();

  /**
   * Original signature : <code>extern size_t RegisterMNGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:150</i>
   */
  NativeSize RegisterMNGImage();

  /**
   * Original signature : <code>extern size_t RegisterMONOImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:152</i>
   */
  NativeSize RegisterMONOImage();

  /**
   * Original signature : <code>extern size_t RegisterMPCImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:154</i>
   */
  NativeSize RegisterMPCImage();

  /**
   * Original signature : <code>extern size_t RegisterMPEGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:156</i>
   */
  NativeSize RegisterMPEGImage();

  /**
   * Original signature : <code>extern size_t RegisterMPRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:158</i>
   */
  NativeSize RegisterMPRImage();

  /**
   * Original signature : <code>extern size_t RegisterMSLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:160</i>
   */
  NativeSize RegisterMSLImage();

  /**
   * Original signature : <code>extern size_t RegisterMTVImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:162</i>
   */
  NativeSize RegisterMTVImage();

  /**
   * Original signature : <code>extern size_t RegisterMVGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:164</i>
   */
  NativeSize RegisterMVGImage();

  /**
   * Original signature : <code>extern size_t RegisterNETSCAPEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:166</i>
   */
  NativeSize RegisterNETSCAPEImage();

  /**
   * Original signature : <code>extern size_t RegisterNULLImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:168</i>
   */
  NativeSize RegisterNULLImage();

  /**
   * Original signature : <code>extern size_t RegisterP7Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:170</i>
   */
  NativeSize RegisterP7Image();

  /**
   * Original signature : <code>extern size_t RegisterPBMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:172</i>
   */
  NativeSize RegisterPBMImage();

  /**
   * Original signature : <code>extern size_t RegisterOTBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:174</i>
   */
  NativeSize RegisterOTBImage();

  /**
   * Original signature : <code>extern size_t RegisterPALMImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:176</i>
   */
  NativeSize RegisterPALMImage();

  /**
   * Original signature : <code>extern size_t RegisterPANGOImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:178</i>
   */
  NativeSize RegisterPANGOImage();

  /**
   * Original signature : <code>extern size_t RegisterPATTERNImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:180</i>
   */
  NativeSize RegisterPATTERNImage();

  /**
   * Original signature : <code>extern size_t RegisterPCDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:182</i>
   */
  NativeSize RegisterPCDImage();

  /**
   * Original signature : <code>extern size_t RegisterPCDSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:184</i>
   */
  NativeSize RegisterPCDSImage();

  /**
   * Original signature : <code>extern size_t RegisterPCLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:186</i>
   */
  NativeSize RegisterPCLImage();

  /**
   * Original signature : <code>extern size_t RegisterPCTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:188</i>
   */
  NativeSize RegisterPCTImage();

  /**
   * Original signature : <code>extern size_t RegisterPCXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:190</i>
   */
  NativeSize RegisterPCXImage();

  /**
   * Original signature : <code>extern size_t RegisterPDBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:192</i>
   */
  NativeSize RegisterPDBImage();

  /**
   * Original signature : <code>extern size_t RegisterPDFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:194</i>
   */
  NativeSize RegisterPDFImage();

  /**
   * Original signature : <code>extern size_t RegisterPESImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:196</i>
   */
  NativeSize RegisterPESImage();

  /**
   * Original signature : <code>extern size_t RegisterPGXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:198</i>
   */
  NativeSize RegisterPGXImage();

  /**
   * Original signature : <code>extern size_t RegisterPICImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:200</i>
   */
  NativeSize RegisterPICImage();

  /**
   * Original signature : <code>extern size_t RegisterPICTImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:202</i>
   */
  NativeSize RegisterPICTImage();

  /**
   * Original signature : <code>extern size_t RegisterPIXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:204</i>
   */
  NativeSize RegisterPIXImage();

  /**
   * Original signature : <code>extern size_t RegisterPGMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:206</i>
   */
  NativeSize RegisterPGMImage();

  /**
   * Original signature : <code>extern size_t RegisterPLASMAImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:208</i>
   */
  NativeSize RegisterPLASMAImage();

  /**
   * Original signature : <code>extern size_t RegisterPMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:210</i>
   */
  NativeSize RegisterPMImage();

  /**
   * Original signature : <code>extern size_t RegisterPNGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:212</i>
   */
  NativeSize RegisterPNGImage();

  /**
   * Original signature : <code>extern size_t RegisterPNMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:214</i>
   */
  NativeSize RegisterPNMImage();

  /**
   * Original signature : <code>extern size_t RegisterPPMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:216</i>
   */
  NativeSize RegisterPPMImage();

  /**
   * Original signature : <code>extern size_t RegisterPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:218</i>
   */
  NativeSize RegisterPSImage();

  /**
   * Original signature : <code>extern size_t RegisterPS2Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:220</i>
   */
  NativeSize RegisterPS2Image();

  /**
   * Original signature : <code>extern size_t RegisterPS3Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:222</i>
   */
  NativeSize RegisterPS3Image();

  /**
   * Original signature : <code>extern size_t RegisterPSDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:224</i>
   */
  NativeSize RegisterPSDImage();

  /**
   * Original signature : <code>extern size_t RegisterPTIFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:226</i>
   */
  NativeSize RegisterPTIFImage();

  /**
   * Original signature : <code>extern size_t RegisterPWPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:228</i>
   */
  NativeSize RegisterPWPImage();

  /**
   * Original signature : <code>extern size_t RegisterRASImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:230</i>
   */
  NativeSize RegisterRASImage();

  /**
   * Original signature : <code>extern size_t RegisterRAWImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:232</i>
   */
  NativeSize RegisterRAWImage();

  /**
   * Original signature : <code>extern size_t RegisterRGBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:234</i>
   */
  NativeSize RegisterRGBImage();

  /**
   * Original signature : <code>extern size_t RegisterRGBAImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:236</i>
   */
  NativeSize RegisterRGBAImage();

  /**
   * Original signature : <code>extern size_t RegisterRGFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:238</i>
   */
  NativeSize RegisterRGFImage();

  /**
   * Original signature : <code>extern size_t RegisterRLAImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:240</i>
   */
  NativeSize RegisterRLAImage();

  /**
   * Original signature : <code>extern size_t RegisterRLEImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:242</i>
   */
  NativeSize RegisterRLEImage();

  /**
   * Original signature : <code>extern size_t RegisterSCRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:244</i>
   */
  NativeSize RegisterSCRImage();

  /**
   * Original signature : <code>extern size_t RegisterSCREENSHOTImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:246</i>
   */
  NativeSize RegisterSCREENSHOTImage();

  /**
   * Original signature : <code>extern size_t RegisterSCTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:248</i>
   */
  NativeSize RegisterSCTImage();

  /**
   * Original signature : <code>extern size_t RegisterSFWImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:250</i>
   */
  NativeSize RegisterSFWImage();

  /**
   * Original signature : <code>extern size_t RegisterSGIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:252</i>
   */
  NativeSize RegisterSGIImage();

  /**
   * Original signature : <code>extern size_t RegisterSHTMLImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:254</i>
   */
  NativeSize RegisterSHTMLImage();

  /**
   * Original signature : <code>extern size_t RegisterSIXELImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:256</i>
   */
  NativeSize RegisterSIXELImage();

  /**
   * Original signature : <code>extern size_t RegisterSTEGANOImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:258</i>
   */
  NativeSize RegisterSTEGANOImage();

  /**
   * Original signature : <code>extern size_t RegisterSUNImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:260</i>
   */
  NativeSize RegisterSUNImage();

  /**
   * Original signature : <code>extern size_t RegisterSVGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:262</i>
   */
  NativeSize RegisterSVGImage();

  /**
   * Original signature : <code>extern size_t RegisterTEXTImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:264</i>
   */
  NativeSize RegisterTEXTImage();

  /**
   * Original signature : <code>extern size_t RegisterTGAImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:266</i>
   */
  NativeSize RegisterTGAImage();

  /**
   * Original signature : <code>extern size_t RegisterTHUMBNAILImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:268</i>
   */
  NativeSize RegisterTHUMBNAILImage();

  /**
   * Original signature : <code>extern size_t RegisterTIFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:270</i>
   */
  NativeSize RegisterTIFImage();

  /**
   * Original signature : <code>extern size_t RegisterTIFFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:272</i>
   */
  NativeSize RegisterTIFFImage();

  /**
   * Original signature : <code>extern size_t RegisterTILEImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:274</i>
   */
  NativeSize RegisterTILEImage();

  /**
   * Original signature : <code>extern size_t RegisterTIMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:276</i>
   */
  NativeSize RegisterTIMImage();

  /**
   * Original signature : <code>extern size_t RegisterTTFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:278</i>
   */
  NativeSize RegisterTTFImage();

  /**
   * Original signature : <code>extern size_t RegisterTXTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:280</i>
   */
  NativeSize RegisterTXTImage();

  /**
   * Original signature : <code>extern size_t RegisterUILImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:282</i>
   */
  NativeSize RegisterUILImage();

  /**
   * Original signature : <code>extern size_t RegisterURLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:284</i>
   */
  NativeSize RegisterURLImage();

  /**
   * Original signature : <code>extern size_t RegisterUYVYImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:286</i>
   */
  NativeSize RegisterUYVYImage();

  /**
   * Original signature : <code>extern size_t RegisterVDAImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:288</i>
   */
  NativeSize RegisterVDAImage();

  /**
   * Original signature : <code>extern size_t RegisterVICARImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:290</i>
   */
  NativeSize RegisterVICARImage();

  /**
   * Original signature : <code>extern size_t RegisterVIDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:292</i>
   */
  NativeSize RegisterVIDImage();

  /**
   * Original signature : <code>extern size_t RegisterVIFFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:294</i>
   */
  NativeSize RegisterVIFFImage();

  /**
   * Original signature : <code>extern size_t RegisterVIPSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:296</i>
   */
  NativeSize RegisterVIPSImage();

  /**
   * Original signature : <code>extern size_t RegisterVSTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:298</i>
   */
  NativeSize RegisterVSTImage();

  /**
   * Original signature : <code>extern size_t RegisterWBMPImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:300</i>
   */
  NativeSize RegisterWBMPImage();

  /**
   * Original signature : <code>extern size_t RegisterWEBPImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:302</i>
   */
  NativeSize RegisterWEBPImage();

  /**
   * Original signature : <code>extern size_t RegisterWMFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:304</i>
   */
  NativeSize RegisterWMFImage();

  /**
   * Original signature : <code>extern size_t RegisterWPGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:306</i>
   */
  NativeSize RegisterWPGImage();

  /**
   * Original signature : <code>extern size_t RegisterXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:308</i>
   */
  NativeSize RegisterXImage();

  /**
   * Original signature : <code>extern size_t RegisterXBMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:310</i>
   */
  NativeSize RegisterXBMImage();

  /**
   * Original signature : <code>extern size_t RegisterXCImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:312</i>
   */
  NativeSize RegisterXCImage();

  /**
   * Original signature : <code>extern size_t RegisterXCFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:314</i>
   */
  NativeSize RegisterXCFImage();

  /**
   * Original signature : <code>extern size_t RegisterXPMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:316</i>
   */
  NativeSize RegisterXPMImage();

  /**
   * Original signature : <code>extern size_t RegisterXPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:318</i>
   */
  NativeSize RegisterXPSImage();

  /**
   * Original signature : <code>extern size_t RegisterXTRNImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:320</i>
   */
  NativeSize RegisterXTRNImage();

  /**
   * Original signature : <code>extern size_t RegisterXVImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:322</i>
   */
  NativeSize RegisterXVImage();

  /**
   * Original signature : <code>extern size_t RegisterXWDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:324</i>
   */
  NativeSize RegisterXWDImage();

  /**
   * Original signature : <code>extern size_t RegisterYCBCRImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:326</i>
   */
  NativeSize RegisterYCBCRImage();

  /**
   * Original signature : <code>extern size_t RegisterYUVImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:328</i>
   */
  NativeSize RegisterYUVImage();

  /**
   * Original signature : <code>extern void UnregisterAAIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:330</i>
   */
  void UnregisterAAIImage();

  /**
   * Original signature : <code>extern void UnregisterARTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:332</i>
   */
  void UnregisterARTImage();

  /**
   * Original signature : <code>extern void UnregisterAVIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:334</i>
   */
  void UnregisterAVIImage();

  /**
   * Original signature : <code>extern void UnregisterAVSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:336</i>
   */
  void UnregisterAVSImage();

  /**
   * Original signature : <code>extern void UnregisterBIEImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:338</i>
   */
  void UnregisterBIEImage();

  /**
   * Original signature : <code>extern void UnregisterBGRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:340</i>
   */
  void UnregisterBGRImage();

  /**
   * Original signature : <code>extern void UnregisterBMPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:342</i>
   */
  void UnregisterBMPImage();

  /**
   * Original signature : <code>extern void UnregisterBRAILLEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:344</i>
   */
  void UnregisterBRAILLEImage();

  /**
   * Original signature : <code>extern void UnregisterCALSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:346</i>
   */
  void UnregisterCALSImage();

  /**
   * Original signature : <code>extern void UnregisterCAPTIONImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:348</i>
   */
  void UnregisterCAPTIONImage();

  /**
   * Original signature : <code>extern void UnregisterCINImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:350</i>
   */
  void UnregisterCINImage();

  /**
   * Original signature : <code>extern void UnregisterCIPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:352</i>
   */
  void UnregisterCIPImage();

  /**
   * Original signature : <code>extern void UnregisterCLIPImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:354</i>
   */
  void UnregisterCLIPImage();

  /**
   * Original signature : <code>extern void UnregisterCLIPBOARDImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:356</i>
   */
  void UnregisterCLIPBOARDImage();

  /**
   * Original signature : <code>extern void UnregisterCMYKImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:358</i>
   */
  void UnregisterCMYKImage();

  /**
   * Original signature : <code>extern void UnregisterCUTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:360</i>
   */
  void UnregisterCUTImage();

  /**
   * Original signature : <code>extern void UnregisterDCMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:362</i>
   */
  void UnregisterDCMImage();

  /**
   * Original signature : <code>extern void UnregisterDCXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:364</i>
   */
  void UnregisterDCXImage();

  /**
   * Original signature : <code>extern void UnregisterDDSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:366</i>
   */
  void UnregisterDDSImage();

  /**
   * Original signature : <code>extern void UnregisterDEBUGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:368</i>
   */
  void UnregisterDEBUGImage();

  /**
   * Original signature : <code>extern void UnregisterDIBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:370</i>
   */
  void UnregisterDIBImage();

  /**
   * Original signature : <code>extern void UnregisterDJVUImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:372</i>
   */
  void UnregisterDJVUImage();

  /**
   * Original signature : <code>extern void UnregisterDNGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:374</i>
   */
  void UnregisterDNGImage();

  /**
   * Original signature : <code>extern void UnregisterDPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:376</i>
   */
  void UnregisterDPSImage();

  /**
   * Original signature : <code>extern void UnregisterDPXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:378</i>
   */
  void UnregisterDPXImage();

  /**
   * Original signature : <code>extern void UnregisterEMFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:380</i>
   */
  void UnregisterEMFImage();

  /**
   * Original signature : <code>extern void UnregisterEPDFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:382</i>
   */
  void UnregisterEPDFImage();

  /**
   * Original signature : <code>extern void UnregisterEPIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:384</i>
   */
  void UnregisterEPIImage();

  /**
   * Original signature : <code>extern void UnregisterEPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:386</i>
   */
  void UnregisterEPSImage();

  /**
   * Original signature : <code>extern void UnregisterEPS2Image()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:388</i>
   */
  void UnregisterEPS2Image();

  /**
   * Original signature : <code>extern void UnregisterEPSFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:390</i>
   */
  void UnregisterEPSFImage();

  /**
   * Original signature : <code>extern void UnregisterEPSIImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:392</i>
   */
  void UnregisterEPSIImage();

  /**
   * Original signature : <code>extern void UnregisterEPTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:394</i>
   */
  void UnregisterEPTImage();

  /**
   * Original signature : <code>extern void UnregisterEXRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:396</i>
   */
  void UnregisterEXRImage();

  /**
   * Original signature : <code>extern void UnregisterFAXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:398</i>
   */
  void UnregisterFAXImage();

  /**
   * Original signature : <code>extern void UnregisterFITSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:400</i>
   */
  void UnregisterFITSImage();

  /**
   * Original signature : <code>extern void UnregisterFLIFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:402</i>
   */
  void UnregisterFLIFImage();

  /**
   * Original signature : <code>extern void UnregisterFPXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:404</i>
   */
  void UnregisterFPXImage();

  /**
   * Original signature : <code>extern void UnregisterG3Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:406</i>
   */
  void UnregisterG3Image();

  /**
   * Original signature : <code>extern void UnregisterGIFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:408</i>
   */
  void UnregisterGIFImage();

  /**
   * Original signature : <code>extern void UnregisterGIF87Image()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:410</i>
   */
  void UnregisterGIF87Image();

  /**
   * Original signature : <code>extern void UnregisterGRADIENTImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:412</i>
   */
  void UnregisterGRADIENTImage();

  /**
   * Original signature : <code>extern void UnregisterGRANITEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:414</i>
   */
  void UnregisterGRANITEImage();

  /**
   * Original signature : <code>extern void UnregisterGRAYImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:416</i>
   */
  void UnregisterGRAYImage();

  /**
   * Original signature : <code>extern void UnregisterHALDImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:418</i>
   */
  void UnregisterHALDImage();

  /**
   * Original signature : <code>extern void UnregisterHDRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:420</i>
   */
  void UnregisterHDRImage();

  /**
   * Original signature : <code>extern void UnregisterHEICImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:422</i>
   */
  void UnregisterHEICImage();

  /**
   * Original signature : <code>extern void UnregisterHImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:424</i>
   */
  void UnregisterHImage();

  /**
   * Original signature : <code>extern void UnregisterHISTOGRAMImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:426</i>
   */
  void UnregisterHISTOGRAMImage();

  /**
   * Original signature : <code>extern void UnregisterHRZImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:428</i>
   */
  void UnregisterHRZImage();

  /**
   * Original signature : <code>extern void UnregisterHTMLImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:430</i>
   */
  void UnregisterHTMLImage();

  /**
   * Original signature : <code>extern void UnregisterICBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:432</i>
   */
  void UnregisterICBImage();

  /**
   * Original signature : <code>extern void UnregisterICONImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:434</i>
   */
  void UnregisterICONImage();

  /**
   * Original signature : <code>extern void UnregisterINFOImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:436</i>
   */
  void UnregisterINFOImage();

  /**
   * Original signature : <code>extern void UnregisterINLINEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:438</i>
   */
  void UnregisterINLINEImage();

  /**
   * Original signature : <code>extern void UnregisterIPLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:440</i>
   */
  void UnregisterIPLImage();

  /**
   * Original signature : <code>extern void UnregisterJBGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:442</i>
   */
  void UnregisterJBGImage();

  /**
   * Original signature : <code>extern void UnregisterJBIGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:444</i>
   */
  void UnregisterJBIGImage();

  /**
   * Original signature : <code>extern void UnregisterJNXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:446</i>
   */
  void UnregisterJNXImage();

  /**
   * Original signature : <code>extern void UnregisterJPEGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:448</i>
   */
  void UnregisterJPEGImage();

  /**
   * Original signature : <code>extern void UnregisterJP2Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:450</i>
   */
  void UnregisterJP2Image();

  /**
   * Original signature : <code>extern void UnregisterJSONImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:452</i>
   */
  void UnregisterJSONImage();

  /**
   * Original signature : <code>extern void UnregisterLABELImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:454</i>
   */
  void UnregisterLABELImage();

  /**
   * Original signature : <code>extern void UnregisterLOCALEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:456</i>
   */
  void UnregisterLOCALEImage();

  /**
   * Original signature : <code>extern void UnregisterMACImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:458</i>
   */
  void UnregisterMACImage();

  /**
   * Original signature : <code>extern void UnregisterMAGICKImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:460</i>
   */
  void UnregisterMAGICKImage();

  /**
   * Original signature : <code>extern void UnregisterMAPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:462</i>
   */
  void UnregisterMAPImage();

  /**
   * Original signature : <code>extern void UnregisterMASKImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:464</i>
   */
  void UnregisterMASKImage();

  /**
   * Original signature : <code>extern void UnregisterMATImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:466</i>
   */
  void UnregisterMATImage();

  /**
   * Original signature : <code>extern void UnregisterMATTEImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:468</i>
   */
  void UnregisterMATTEImage();

  /**
   * Original signature : <code>extern void UnregisterMETAImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:470</i>
   */
  void UnregisterMETAImage();

  /**
   * Original signature : <code>extern void UnregisterMIFFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:472</i>
   */
  void UnregisterMIFFImage();

  /**
   * Original signature : <code>extern void UnregisterMNGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:474</i>
   */
  void UnregisterMNGImage();

  /**
   * Original signature : <code>extern void UnregisterMONOImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:476</i>
   */
  void UnregisterMONOImage();

  /**
   * Original signature : <code>extern void UnregisterMPCImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:478</i>
   */
  void UnregisterMPCImage();

  /**
   * Original signature : <code>extern void UnregisterMPEGImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:480</i>
   */
  void UnregisterMPEGImage();

  /**
   * Original signature : <code>extern void UnregisterMPRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:482</i>
   */
  void UnregisterMPRImage();

  /**
   * Original signature : <code>extern void UnregisterMSLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:484</i>
   */
  void UnregisterMSLImage();

  /**
   * Original signature : <code>extern void UnregisterMTVImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:486</i>
   */
  void UnregisterMTVImage();

  /**
   * Original signature : <code>extern void UnregisterMVGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:488</i>
   */
  void UnregisterMVGImage();

  /**
   * Original signature : <code>extern void UnregisterNETSCAPEImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:490</i>
   */
  void UnregisterNETSCAPEImage();

  /**
   * Original signature : <code>extern void UnregisterNULLImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:492</i>
   */
  void UnregisterNULLImage();

  /**
   * Original signature : <code>extern void UnregisterP7Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:494</i>
   */
  void UnregisterP7Image();

  /**
   * Original signature : <code>extern void UnregisterPBMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:496</i>
   */
  void UnregisterPBMImage();

  /**
   * Original signature : <code>extern void UnregisterOTBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:498</i>
   */
  void UnregisterOTBImage();

  /**
   * Original signature : <code>extern void UnregisterPALMImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:500</i>
   */
  void UnregisterPALMImage();

  /**
   * Original signature : <code>extern void UnregisterPANGOImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:502</i>
   */
  void UnregisterPANGOImage();

  /**
   * Original signature : <code>extern void UnregisterPATTERNImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:504</i>
   */
  void UnregisterPATTERNImage();

  /**
   * Original signature : <code>extern void UnregisterPCDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:506</i>
   */
  void UnregisterPCDImage();

  /**
   * Original signature : <code>extern void UnregisterPCDSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:508</i>
   */
  void UnregisterPCDSImage();

  /**
   * Original signature : <code>extern void UnregisterPCLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:510</i>
   */
  void UnregisterPCLImage();

  /**
   * Original signature : <code>extern void UnregisterPCTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:512</i>
   */
  void UnregisterPCTImage();

  /**
   * Original signature : <code>extern void UnregisterPCXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:514</i>
   */
  void UnregisterPCXImage();

  /**
   * Original signature : <code>extern void UnregisterPDBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:516</i>
   */
  void UnregisterPDBImage();

  /**
   * Original signature : <code>extern void UnregisterPDFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:518</i>
   */
  void UnregisterPDFImage();

  /**
   * Original signature : <code>extern void UnregisterPESImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:520</i>
   */
  void UnregisterPESImage();

  /**
   * Original signature : <code>extern void UnregisterPGXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:522</i>
   */
  void UnregisterPGXImage();

  /**
   * Original signature : <code>extern void UnregisterPICImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:524</i>
   */
  void UnregisterPICImage();

  /**
   * Original signature : <code>extern void UnregisterPICTImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:526</i>
   */
  void UnregisterPICTImage();

  /**
   * Original signature : <code>extern void UnregisterPIXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:528</i>
   */
  void UnregisterPIXImage();

  /**
   * Original signature : <code>extern void UnregisterPLASMAImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:530</i>
   */
  void UnregisterPLASMAImage();

  /**
   * Original signature : <code>extern void UnregisterPGMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:532</i>
   */
  void UnregisterPGMImage();

  /**
   * Original signature : <code>extern void UnregisterPMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:534</i>
   */
  void UnregisterPMImage();

  /**
   * Original signature : <code>extern void UnregisterPNGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:536</i>
   */
  void UnregisterPNGImage();

  /**
   * Original signature : <code>extern void UnregisterPNMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:538</i>
   */
  void UnregisterPNMImage();

  /**
   * Original signature : <code>extern void UnregisterPPMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:540</i>
   */
  void UnregisterPPMImage();

  /**
   * Original signature : <code>extern void UnregisterPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:542</i>
   */
  void UnregisterPSImage();

  /**
   * Original signature : <code>extern void UnregisterPS2Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:544</i>
   */
  void UnregisterPS2Image();

  /**
   * Original signature : <code>extern void UnregisterPS3Image()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:546</i>
   */
  void UnregisterPS3Image();

  /**
   * Original signature : <code>extern void UnregisterPSDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:548</i>
   */
  void UnregisterPSDImage();

  /**
   * Original signature : <code>extern void UnregisterPTIFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:550</i>
   */
  void UnregisterPTIFImage();

  /**
   * Original signature : <code>extern void UnregisterPWPImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:552</i>
   */
  void UnregisterPWPImage();

  /**
   * Original signature : <code>extern void UnregisterRASImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:554</i>
   */
  void UnregisterRASImage();

  /**
   * Original signature : <code>extern void UnregisterRAWImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:556</i>
   */
  void UnregisterRAWImage();

  /**
   * Original signature : <code>extern void UnregisterRGBImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:558</i>
   */
  void UnregisterRGBImage();

  /**
   * Original signature : <code>extern void UnregisterRGBAImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:560</i>
   */
  void UnregisterRGBAImage();

  /**
   * Original signature : <code>extern void UnregisterRGFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:562</i>
   */
  void UnregisterRGFImage();

  /**
   * Original signature : <code>extern void UnregisterRLAImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:564</i>
   */
  void UnregisterRLAImage();

  /**
   * Original signature : <code>extern void UnregisterRLEImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:566</i>
   */
  void UnregisterRLEImage();

  /**
   * Original signature : <code>extern void UnregisterSCRImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:568</i>
   */
  void UnregisterSCRImage();

  /**
   * Original signature : <code>extern void UnregisterSCREENSHOTImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:570</i>
   */
  void UnregisterSCREENSHOTImage();

  /**
   * Original signature : <code>extern void UnregisterSCTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:572</i>
   */
  void UnregisterSCTImage();

  /**
   * Original signature : <code>extern void UnregisterSFWImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:574</i>
   */
  void UnregisterSFWImage();

  /**
   * Original signature : <code>extern void UnregisterSGIImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:576</i>
   */
  void UnregisterSGIImage();

  /**
   * Original signature : <code>extern void UnregisterSHTMLImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:578</i>
   */
  void UnregisterSHTMLImage();

  /**
   * Original signature : <code>extern void UnregisterSIXELImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:580</i>
   */
  void UnregisterSIXELImage();

  /**
   * Original signature : <code>extern void UnregisterSTEGANOImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:582</i>
   */
  void UnregisterSTEGANOImage();

  /**
   * Original signature : <code>extern void UnregisterSUNImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:584</i>
   */
  void UnregisterSUNImage();

  /**
   * Original signature : <code>extern void UnregisterSVGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:586</i>
   */
  void UnregisterSVGImage();

  /**
   * Original signature : <code>extern void UnregisterTEXTImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:588</i>
   */
  void UnregisterTEXTImage();

  /**
   * Original signature : <code>extern void UnregisterTGAImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:590</i>
   */
  void UnregisterTGAImage();

  /**
   * Original signature : <code>extern void UnregisterTHUMBNAILImage()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:592</i>
   */
  void UnregisterTHUMBNAILImage();

  /**
   * Original signature : <code>extern void UnregisterTIFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:594</i>
   */
  void UnregisterTIFImage();

  /**
   * Original signature : <code>extern void UnregisterTIFFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:596</i>
   */
  void UnregisterTIFFImage();

  /**
   * Original signature : <code>extern void UnregisterTILEImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:598</i>
   */
  void UnregisterTILEImage();

  /**
   * Original signature : <code>extern void UnregisterTIMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:600</i>
   */
  void UnregisterTIMImage();

  /**
   * Original signature : <code>extern void UnregisterTTFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:602</i>
   */
  void UnregisterTTFImage();

  /**
   * Original signature : <code>extern void UnregisterTXTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:604</i>
   */
  void UnregisterTXTImage();

  /**
   * Original signature : <code>extern void UnregisterUILImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:606</i>
   */
  void UnregisterUILImage();

  /**
   * Original signature : <code>extern void UnregisterURLImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:608</i>
   */
  void UnregisterURLImage();

  /**
   * Original signature : <code>extern void UnregisterUYVYImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:610</i>
   */
  void UnregisterUYVYImage();

  /**
   * Original signature : <code>extern void UnregisterVDAImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:612</i>
   */
  void UnregisterVDAImage();

  /**
   * Original signature : <code>extern void UnregisterVICARImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:614</i>
   */
  void UnregisterVICARImage();

  /**
   * Original signature : <code>extern void UnregisterVIDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:616</i>
   */
  void UnregisterVIDImage();

  /**
   * Original signature : <code>extern void UnregisterVIFFImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:618</i>
   */
  void UnregisterVIFFImage();

  /**
   * Original signature : <code>extern void UnregisterVIPSImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:620</i>
   */
  void UnregisterVIPSImage();

  /**
   * Original signature : <code>extern void UnregisterVSTImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:622</i>
   */
  void UnregisterVSTImage();

  /**
   * Original signature : <code>extern void UnregisterWBMPImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:624</i>
   */
  void UnregisterWBMPImage();

  /**
   * Original signature : <code>extern void UnregisterWEBPImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:626</i>
   */
  void UnregisterWEBPImage();

  /**
   * Original signature : <code>extern void UnregisterWMFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:628</i>
   */
  void UnregisterWMFImage();

  /**
   * Original signature : <code>extern void UnregisterWPGImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:630</i>
   */
  void UnregisterWPGImage();

  /**
   * Original signature : <code>extern void UnregisterXImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:632</i>
   */
  void UnregisterXImage();

  /**
   * Original signature : <code>extern void UnregisterXBMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:634</i>
   */
  void UnregisterXBMImage();

  /**
   * Original signature : <code>extern void UnregisterXCImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:636</i>
   */
  void UnregisterXCImage();

  /**
   * Original signature : <code>extern void UnregisterXCFImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:638</i>
   */
  void UnregisterXCFImage();

  /**
   * Original signature : <code>extern void UnregisterXPMImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:640</i>
   */
  void UnregisterXPMImage();

  /**
   * Original signature : <code>extern void UnregisterXPSImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:642</i>
   */
  void UnregisterXPSImage();

  /**
   * Original signature : <code>extern void UnregisterXTRNImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:644</i>
   */
  void UnregisterXTRNImage();

  /**
   * Original signature : <code>extern void UnregisterXVImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:646</i>
   */
  void UnregisterXVImage();

  /**
   * Original signature : <code>extern void UnregisterXWDImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:648</i>
   */
  void UnregisterXWDImage();

  /**
   * Original signature : <code>extern void UnregisterYCBCRImage()</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/static.h:650</i>
   */
  void UnregisterYCBCRImage();

  /**
   * Original signature : <code>extern void UnregisterYUVImage()</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/static.h:652</i>
   */
  void UnregisterYUVImage();

  /**
   * Original signature : <code>extern void RegisterStaticModules()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:654</i>
   */
  void RegisterStaticModules();

  /**
   * Original signature : <code>extern void UnregisterStaticModules()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/static.h:656</i>
   */
  void UnregisterStaticModules();

  /**
   * Original signature : <code>ChannelStatistics* GetImageStatistics(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:88</i>
   */
  SaMagickCore.ChannelStatistics GetImageStatistics(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ChannelMoments* GetImageMoments(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:90</i>
   */
  SaMagickCore.ChannelMoments GetImageMoments(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>ChannelPerceptualHash* GetImagePerceptualHash(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:92</i>
   */
  SaMagickCore.ChannelPerceptualHash GetImagePerceptualHash(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* EvaluateImages(const Image*, const
   * MagickEvaluateOperator, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/statistic.h:94</i>
   */
  SaMagickCore.Image EvaluateImages(SaMagickCore.Image ImagePtr1, int MagickEvaluateOperator1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* PolynomialImage(const Image*, const size_t, const
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:96</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #PolynomialImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, double[], SaMagickCore.ExceptionInfo)} and
   * {@link #PolynomialImage(SaMagickCore.Image, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image PolynomialImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* PolynomialImage(const Image*, const size_t, const
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:96</i>
   */
  SaMagickCore.Image PolynomialImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      double doublePtr1[], SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* StatisticImage(const Image*, const StatisticType,
   * const size_t, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/statistic.h:98</i>
   */
  SaMagickCore.Image StatisticImage(SaMagickCore.Image ImagePtr1, int StatisticType1,
      NativeSize size_t1, NativeSize size_t2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType EvaluateImage(Image*, const
   * MagickEvaluateOperator, const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/statistic.h:100</i>
   */
  int EvaluateImage(SaMagickCore.Image ImagePtr1, int MagickEvaluateOperator1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType FunctionImage(Image*, const MagickFunction,
   * const size_t, const double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/statistic.h:102</i> <br>
   *
   * @deprecated use the safer methods {@link #FunctionImage(SaMagickCore.Image, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, double[], SaMagickCore.ExceptionInfo)} and
   * {@link #FunctionImage(SaMagickCore.Image, int, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int FunctionImage(SaMagickCore.Image ImagePtr1, int MagickFunction1, NativeSize size_t1,
      DoubleByReference doublePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType FunctionImage(Image*, const MagickFunction,
   * const size_t, const double*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/statistic.h:102</i>
   */
  int FunctionImage(SaMagickCore.Image ImagePtr1, int MagickFunction1, NativeSize size_t1,
      double doublePtr1[], SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageEntropy(const Image*, double*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:104</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageEntropy(SaMagickCore.Image,
   * java.nio.DoubleBuffer, SaMagickCore.ExceptionInfo)} and {@link #GetImageEntropy(SaMagickCore.Image,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int GetImageEntropy(SaMagickCore.Image ImagePtr1, DoubleByReference doublePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageEntropy(const Image*, double*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:104</i>
   */
  int GetImageEntropy(SaMagickCore.Image ImagePtr1, DoubleBuffer doublePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageExtrema(const Image*, size_t*,
   * size_t*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:106</i>
   */
  int GetImageExtrema(SaMagickCore.Image ImagePtr1, NativeSizeByReference size_tPtr1,
      NativeSizeByReference size_tPtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageMean(const Image*, double*,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:108</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageMean(SaMagickCore.Image,
   * java.nio.DoubleBuffer, java.nio.DoubleBuffer, SaMagickCore.ExceptionInfo)} and {@link
   * #GetImageMean(SaMagickCore.Image, com.sun.jna.ptr.DoubleByReference,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int GetImageMean(SaMagickCore.Image ImagePtr1, DoubleByReference doublePtr1,
      DoubleByReference doublePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageMean(const Image*, double*,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:108</i>
   */
  int GetImageMean(SaMagickCore.Image ImagePtr1, DoubleBuffer doublePtr1, DoubleBuffer doublePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageKurtosis(const Image*, double*,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:110</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageKurtosis(SaMagickCore.Image,
   * java.nio.DoubleBuffer, java.nio.DoubleBuffer, SaMagickCore.ExceptionInfo)} and {@link
   * #GetImageKurtosis(SaMagickCore.Image, com.sun.jna.ptr.DoubleByReference,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int GetImageKurtosis(SaMagickCore.Image ImagePtr1, DoubleByReference doublePtr1,
      DoubleByReference doublePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageKurtosis(const Image*, double*,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:110</i>
   */
  int GetImageKurtosis(SaMagickCore.Image ImagePtr1, DoubleBuffer doublePtr1,
      DoubleBuffer doublePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageRange(const Image*, double*,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:112</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetImageRange(SaMagickCore.Image,
   * java.nio.DoubleBuffer, java.nio.DoubleBuffer, SaMagickCore.ExceptionInfo)} and {@link
   * #GetImageRange(SaMagickCore.Image, com.sun.jna.ptr.DoubleByReference,
   * com.sun.jna.ptr.DoubleByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int GetImageRange(SaMagickCore.Image ImagePtr1, DoubleByReference doublePtr1,
      DoubleByReference doublePtr2, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetImageRange(const Image*, double*,
   * double*, ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/statistic.h:112</i>
   */
  int GetImageRange(SaMagickCore.Image ImagePtr1, DoubleBuffer doublePtr1, DoubleBuffer doublePtr2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ReadStream(const ImageInfo*, StreamHandler,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:3</i>
   */
  SaMagickCore.Image ReadStream(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.StreamHandler StreamHandler1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* StreamImage(const ImageInfo*, StreamInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:5</i>
   * <br>
   *
   * @deprecated use the safer method {@link #StreamImage(SaMagickCore.ImageInfo,
   * com.sun.jna.ptr.PointerByReference, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image StreamImage(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer StreamInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* StreamImage(const ImageInfo*, StreamInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:5</i>
   */
  SaMagickCore.Image StreamImage(SaMagickCore.ImageInfo ImageInfoPtr1,
      PointerByReference StreamInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType OpenStream(const ImageInfo*, StreamInfo*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/stream.h:7</i> <br>
   *
   * @deprecated use the safer methods {@link #OpenStream(SaMagickCore.ImageInfo,
   * com.sun.jna.ptr.PointerByReference, java.lang.String, SaMagickCore.ExceptionInfo)} and {@link
   * #OpenStream(SaMagickCore.ImageInfo, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int OpenStream(SaMagickCore.ImageInfo ImageInfoPtr1, Pointer StreamInfoPtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType OpenStream(const ImageInfo*, StreamInfo*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/stream.h:7</i>
   */
  int OpenStream(SaMagickCore.ImageInfo ImageInfoPtr1, PointerByReference StreamInfoPtr1,
      String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType OpenStream(const ImageInfo*, StreamInfo*,
   * const char*, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/stream.h:7</i>
   */
  int OpenStream(SaMagickCore.ImageInfo ImageInfoPtr1, PointerByReference StreamInfoPtr1,
      Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType WriteStream(const ImageInfo*, Image*,
   * StreamHandler, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/stream.h:9</i>
   */
  int WriteStream(SaMagickCore.ImageInfo ImageInfoPtr1, SaMagickCore.Image ImagePtr1,
      SaMagickCore.StreamHandler StreamHandler1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern StreamInfo* AcquireStreamInfo(const ImageInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:11</i>
   */
  PointerByReference AcquireStreamInfo(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern StreamInfo* DestroyStreamInfo(StreamInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:13</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyStreamInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyStreamInfo(Pointer StreamInfoPtr1);

  /**
   * Original signature : <code>extern StreamInfo* DestroyStreamInfo(StreamInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:13</i>
   */
  PointerByReference DestroyStreamInfo(PointerByReference StreamInfoPtr1);

  /**
   * Original signature : <code>extern void SetStreamInfoMap(StreamInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:15</i> <br>
   *
   * @deprecated use the safer methods {@link #SetStreamInfoMap(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #SetStreamInfoMap(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void SetStreamInfoMap(Pointer StreamInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetStreamInfoMap(StreamInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:15</i>
   */
  void SetStreamInfoMap(PointerByReference StreamInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern void SetStreamInfoMap(StreamInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:15</i>
   */
  void SetStreamInfoMap(PointerByReference StreamInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetStreamInfoStorageType(StreamInfo*, const)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:17</i> <br>
   *
   * @deprecated use the safer method {@link #SetStreamInfoStorageType(com.sun.jna.ptr.PointerByReference,
   * int)} instead
   */
  @Deprecated
  void SetStreamInfoStorageType(Pointer StreamInfoPtr1, int StorageType);

  /**
   * Original signature : <code>extern void SetStreamInfoStorageType(StreamInfo*, const)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/stream.h:17</i>
   */
  void SetStreamInfoStorageType(PointerByReference StreamInfoPtr1, int StorageType);

  /**
   * Original signature : <code>extern char* AcquireString(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:9</i> <br>
   *
   * @deprecated use the safer methods {@link #AcquireString(java.lang.String)} and {@link
   * #AcquireString(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer AcquireString(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* AcquireString(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:9</i>
   */
  Pointer AcquireString(String charPtr1);

  /**
   * Original signature : <code>extern char* CloneString(char**, const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:11</i> <br>
   *
   * @deprecated use the safer methods {@link #CloneString(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #CloneString(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer CloneString(PointerByReference charPtrPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern char* CloneString(char**, const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:11</i>
   */
  Pointer CloneString(PointerByReference charPtrPtr1, String charPtr1);

  /**
   * Original signature : <code>extern char* ConstantString(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:13</i> <br>
   *
   * @deprecated use the safer methods {@link #ConstantString(java.lang.String)} and {@link
   * #ConstantString(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer ConstantString(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* ConstantString(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:13</i>
   */
  Pointer ConstantString(String charPtr1);

  /**
   * Original signature : <code>extern char* DestroyString(char*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/string_.h:15</i> <br>
   *
   * @deprecated use the safer methods {@link #DestroyString(java.nio.ByteBuffer)} and {@link
   * #DestroyString(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer DestroyString(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* DestroyString(char*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/string_.h:15</i>
   */
  Pointer DestroyString(ByteBuffer charPtr1);

  /**
   * Original signature : <code>extern char** DestroyStringList(char**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:17</i>
   */
  PointerByReference DestroyStringList(PointerByReference charPtrPtr1);

  /**
   * Original signature : <code>extern char* EscapeString(const char*, const char)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:19</i> <br>
   *
   * @deprecated use the safer methods {@link #EscapeString(java.lang.String, byte)} and {@link
   * #EscapeString(com.sun.jna.Pointer, byte)} instead
   */
  @Deprecated
  Pointer EscapeString(Pointer charPtr1, byte char1);

  /**
   * Original signature : <code>extern char* EscapeString(const char*, const char)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:19</i>
   */
  Pointer EscapeString(String charPtr1, byte char1);

  /**
   * Original signature : <code>extern char* FileToString(const char*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:21</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #FileToString(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.ExceptionInfo)} and {@link
   * #FileToString(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  Pointer FileToString(Pointer charPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char* FileToString(const char*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:21</i>
   */
  Pointer FileToString(String charPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern char* GetEnvironmentValue(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:23</i> <br>
   *
   * @deprecated use the safer methods {@link #GetEnvironmentValue(java.lang.String)} and {@link
   * #GetEnvironmentValue(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetEnvironmentValue(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* GetEnvironmentValue(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:23</i>
   */
  Pointer GetEnvironmentValue(String charPtr1);

  /**
   * Original signature : <code>extern char* SanitizeString(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:25</i> <br>
   *
   * @deprecated use the safer methods {@link #SanitizeString(java.lang.String)} and {@link
   * #SanitizeString(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer SanitizeString(Pointer charPtr1);

  /**
   * Original signature : <code>extern char* SanitizeString(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:25</i>
   */
  Pointer SanitizeString(String charPtr1);

  /**
   * Original signature : <code>extern char* StringInfoToHexString(const StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:27</i>
   */
  Pointer StringInfoToHexString(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern char* StringInfoToString(const StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:29</i>
   */
  Pointer StringInfoToString(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern char** StringToArgv(const char*, int*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:31</i> <br>
   *
   * @deprecated use the safer methods {@link #StringToArgv(java.lang.String, java.nio.IntBuffer)}
   * and {@link #StringToArgv(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
   */
  @Deprecated
  PointerByReference StringToArgv(Pointer charPtr1, IntByReference intPtr1);

  /**
   * Original signature : <code>extern char** StringToArgv(const char*, int*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:31</i>
   */
  PointerByReference StringToArgv(String charPtr1, IntBuffer intPtr1);

  /**
   * Original signature : <code>extern char* StringToken(const char*, char**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:33</i> <br>
   *
   * @deprecated use the safer methods {@link #StringToken(java.lang.String,
   * com.sun.jna.ptr.PointerByReference)} and {@link #StringToken(com.sun.jna.Pointer,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  Pointer StringToken(Pointer charPtr1, PointerByReference charPtrPtr1);

  /**
   * Original signature : <code>extern char* StringToken(const char*, char**)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:33</i>
   */
  Pointer StringToken(String charPtr1, PointerByReference charPtrPtr1);

  /**
   * Original signature : <code>extern char** StringToList(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:35</i> <br>
   *
   * @deprecated use the safer methods {@link #StringToList(java.lang.String)} and {@link
   * #StringToList(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  PointerByReference StringToList(Pointer charPtr1);

  /**
   * Original signature : <code>extern char** StringToList(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:35</i>
   */
  PointerByReference StringToList(String charPtr1);

  /**
   * Original signature : <code>extern char** StringToStrings(const char*, size_t*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:37</i> <br>
   *
   * @deprecated use the safer methods {@link #StringToStrings(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link
   * #StringToStrings(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)}
   * instead
   */
  @Deprecated
  PointerByReference StringToStrings(Pointer charPtr1, NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>extern char** StringToStrings(const char*, size_t*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:37</i>
   */
  PointerByReference StringToStrings(String charPtr1, NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>extern const char* GetStringInfoName(const StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:39</i>
   */
  Pointer GetStringInfoName(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetStringInfoPath(const StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:41</i>
   */
  Pointer GetStringInfoPath(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern double InterpretSiPrefixValue(const char*, char**)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:43</i> <br>
   *
   * @deprecated use the safer methods {@link #InterpretSiPrefixValue(java.lang.String,
   * com.sun.jna.ptr.PointerByReference)} and {@link #InterpretSiPrefixValue(com.sun.jna.Pointer,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  double InterpretSiPrefixValue(Pointer charPtr1, PointerByReference charPtrPtr1);

  /**
   * Original signature : <code>extern double InterpretSiPrefixValue(const char*, char**)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:43</i>
   */
  double InterpretSiPrefixValue(String charPtr1, PointerByReference charPtrPtr1);

  /**
   * Original signature : <code>extern double* StringToArrayOfDoubles(const char*, ssize_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:45</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #StringToArrayOfDoubles(java.lang.String,
   * SaMagickCore.ssize_t, SaMagickCore.ExceptionInfo)} and {@link #StringToArrayOfDoubles(com.sun.jna.Pointer,
   * SaMagickCore.ssize_t, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  DoubleByReference StringToArrayOfDoubles(Pointer charPtr1, SaMagickCore.ssize_t ssize_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern double* StringToArrayOfDoubles(const char*, ssize_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:45</i>
   */
  DoubleByReference StringToArrayOfDoubles(String charPtr1, SaMagickCore.ssize_t ssize_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>int CompareStringInfo(const StringInfo*, const StringInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:47</i>
   */
  int CompareStringInfo(SaMagickCore.StringInfo StringInfoPtr1,
      SaMagickCore.StringInfo StringInfoPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType ConcatenateString(char**, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:49</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ConcatenateString(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #ConcatenateString(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int ConcatenateString(PointerByReference charPtrPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ConcatenateString(char**, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:49</i>
   */
  int ConcatenateString(PointerByReference charPtrPtr1, String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsStringTrue(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:51</i> <br>
   *
   * @deprecated use the safer methods {@link #IsStringTrue(java.lang.String)} and {@link
   * #IsStringTrue(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsStringTrue(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsStringTrue(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:51</i>
   */
  int IsStringTrue(String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsStringFalse(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:53</i> <br>
   *
   * @deprecated use the safer methods {@link #IsStringFalse(java.lang.String)} and {@link
   * #IsStringFalse(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsStringFalse(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsStringFalse(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:53</i>
   */
  int IsStringFalse(String charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType SubstituteString(char**, const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:55</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SubstituteString(com.sun.jna.ptr.PointerByReference,
   * java.lang.String, java.lang.String)} and {@link #SubstituteString(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int SubstituteString(PointerByReference charPtrPtr1, Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType SubstituteString(char**, const char*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:55</i>
   */
  int SubstituteString(PointerByReference charPtrPtr1, String charPtr1, String charPtr2);

  /**
   * Original signature : <code>extern size_t ConcatenateMagickString(char*, const char*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:57</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #ConcatenateMagickString(java.nio.ByteBuffer,
   * java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link
   * #ConcatenateMagickString(com.sun.jna.Pointer, com.sun.jna.Pointer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  NativeSize ConcatenateMagickString(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

  /**
   * Original signature : <code>extern size_t ConcatenateMagickString(char*, const char*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:57</i>
   */
  NativeSize ConcatenateMagickString(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

  /**
   * Original signature : <code>extern size_t CopyMagickString(char*, const char*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:59</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #CopyMagickString(java.nio.ByteBuffer,
   * java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link
   * #CopyMagickString(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)}
   * instead
   */
  @Deprecated
  NativeSize CopyMagickString(Pointer charPtr1, Pointer charPtr2, NativeSize size_t1);

  /**
   * Original signature : <code>extern size_t CopyMagickString(char*, const char*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:59</i>
   */
  NativeSize CopyMagickString(ByteBuffer charPtr1, String charPtr2, NativeSize size_t1);

  /**
   * Original signature : <code>extern size_t GetStringInfoLength(const StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:61</i>
   */
  NativeSize GetStringInfoLength(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern ssize_t FormatMagickSize(const, const MagickBooleanType,
   * const char*, const size_t, char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/string_.h:63</i> <br>
   *
   * @deprecated use the safer methods {@link #FormatMagickSize(int, int, java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.ByteBuffer)} and {@link
   * #FormatMagickSize(int, int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.ssize_t FormatMagickSize(int MagickSizeType, int MagickBooleanType1,
      Pointer charPtr1, NativeSize size_t1, Pointer charPtr2);

  /**
   * Original signature : <code>extern ssize_t FormatMagickSize(const, const MagickBooleanType,
   * const char*, const size_t, char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/string_.h:63</i>
   */
  SaMagickCore.ssize_t FormatMagickSize(int MagickSizeType, int MagickBooleanType1, String charPtr1,
      NativeSize size_t1, ByteBuffer charPtr2);
  /**
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:65</i> <br>
   * Conversion Error : const time_t (Primitive without known type for this runtime: NativeTime)
   */
  /**
   * Original signature : <code>extern StringInfo* AcquireStringInfo(const size_t)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:67</i>
   */
  SaMagickCore.StringInfo AcquireStringInfo(NativeSize size_t1);

  /**
   * Original signature : <code>extern StringInfo* BlobToStringInfo(const void*, const
   * size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:69</i>
   */
  SaMagickCore.StringInfo BlobToStringInfo(Pointer voidPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>extern StringInfo* CloneStringInfo(const StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:71</i>
   */
  SaMagickCore.StringInfo CloneStringInfo(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern StringInfo* ConfigureFileToStringInfo(const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:73</i> <br>
   *
   * @deprecated use the safer methods {@link #ConfigureFileToStringInfo(java.lang.String)} and
   * {@link #ConfigureFileToStringInfo(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.StringInfo ConfigureFileToStringInfo(Pointer charPtr1);

  /**
   * Original signature : <code>extern StringInfo* ConfigureFileToStringInfo(const char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:73</i>
   */
  SaMagickCore.StringInfo ConfigureFileToStringInfo(String charPtr1);

  /**
   * Original signature : <code>extern StringInfo* DestroyStringInfo(StringInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:75</i>
   */
  SaMagickCore.StringInfo DestroyStringInfo(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern StringInfo* FileToStringInfo(const char*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:77</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #FileToStringInfo(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.ExceptionInfo)} and {@link
   * #FileToStringInfo(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.StringInfo FileToStringInfo(Pointer charPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern StringInfo* FileToStringInfo(const char*, const size_t,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:77</i>
   */
  SaMagickCore.StringInfo FileToStringInfo(String charPtr1, NativeSize size_t1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern StringInfo* SplitStringInfo(StringInfo*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:79</i>
   */
  SaMagickCore.StringInfo SplitStringInfo(SaMagickCore.StringInfo StringInfoPtr1,
      NativeSize size_t1);

  /**
   * Original signature : <code>extern StringInfo* StringToStringInfo(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:81</i> <br>
   *
   * @deprecated use the safer methods {@link #StringToStringInfo(java.lang.String)} and {@link
   * #StringToStringInfo(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  SaMagickCore.StringInfo StringToStringInfo(Pointer charPtr1);

  /**
   * Original signature : <code>extern StringInfo* StringToStringInfo(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:81</i>
   */
  SaMagickCore.StringInfo StringToStringInfo(String charPtr1);

  /**
   * Original signature : <code>char* GetStringInfoDatum(const StringInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:83</i>
   */
  Pointer GetStringInfoDatum(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern void ConcatenateStringInfo(StringInfo*, const
   * StringInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:85</i>
   */
  void ConcatenateStringInfo(SaMagickCore.StringInfo StringInfoPtr1,
      SaMagickCore.StringInfo StringInfoPtr2);

  /**
   * Original signature : <code>extern void PrintStringInfo(FILE*, const char*, const
   * StringInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:87</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #PrintStringInfo(com.sun.jna.ptr.PointerByReference,
   * java.lang.String, SaMagickCore.StringInfo)} and {@link #PrintStringInfo(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer, SaMagickCore.StringInfo)} instead
   */
  @Deprecated
  void PrintStringInfo(Pointer file, Pointer charPtr1, SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern void PrintStringInfo(FILE*, const char*, const
   * StringInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:87</i>
   */
  void PrintStringInfo(PointerByReference file, String charPtr1,
      SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern void PrintStringInfo(FILE*, const char*, const
   * StringInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:87</i>
   */
  void PrintStringInfo(PointerByReference file, Pointer charPtr1,
      SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern void ResetStringInfo(StringInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:89</i>
   */
  void ResetStringInfo(SaMagickCore.StringInfo StringInfoPtr1);

  /**
   * Original signature : <code>extern void SetStringInfo(StringInfo*, const StringInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:91</i>
   */
  void SetStringInfo(SaMagickCore.StringInfo StringInfoPtr1,
      SaMagickCore.StringInfo StringInfoPtr2);

  /**
   * Original signature : <code>extern void SetStringInfoDatum(StringInfo*, const unsigned
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:93</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetStringInfoDatum(SaMagickCore.StringInfo, byte[])}
   * and {@link #SetStringInfoDatum(SaMagickCore.StringInfo, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void SetStringInfoDatum(SaMagickCore.StringInfo StringInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetStringInfoDatum(StringInfo*, const unsigned
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:93</i>
   */
  void SetStringInfoDatum(SaMagickCore.StringInfo StringInfoPtr1, byte charPtr1[]);

  /**
   * Original signature : <code>extern void SetStringInfoLength(StringInfo*, const size_t)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:95</i>
   */
  void SetStringInfoLength(SaMagickCore.StringInfo StringInfoPtr1, NativeSize size_t1);

  /**
   * Original signature : <code>extern void SetStringInfoName(StringInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:97</i> <br>
   *
   * @deprecated use the safer methods {@link #SetStringInfoName(SaMagickCore.StringInfo,
   * java.lang.String)} and {@link #SetStringInfoName(SaMagickCore.StringInfo, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  void SetStringInfoName(SaMagickCore.StringInfo StringInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetStringInfoName(StringInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:97</i>
   */
  void SetStringInfoName(SaMagickCore.StringInfo StringInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern void SetStringInfoPath(StringInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:99</i> <br>
   *
   * @deprecated use the safer methods {@link #SetStringInfoPath(SaMagickCore.StringInfo,
   * java.lang.String)} and {@link #SetStringInfoPath(SaMagickCore.StringInfo, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  void SetStringInfoPath(SaMagickCore.StringInfo StringInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern void SetStringInfoPath(StringInfo*, const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/string_.h:99</i>
   */
  void SetStringInfoPath(SaMagickCore.StringInfo StringInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern void StripString(char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/string_.h:101</i> <br>
   *
   * @deprecated use the safer methods {@link #StripString(java.nio.ByteBuffer)} and {@link
   * #StripString(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void StripString(Pointer charPtr1);

  /**
   * Original signature : <code>extern void StripString(char*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/string_.h:101</i>
   */
  void StripString(ByteBuffer charPtr1);

  /**
   * Original signature : <code>Image* AdaptiveThresholdImage(const Image*, const size_t, const
   * size_t, const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/threshold.h:9</i>
   */
  SaMagickCore.Image AdaptiveThresholdImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      NativeSize size_t2, double double1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern ThresholdMap* DestroyThresholdMap(ThresholdMap*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:11</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyThresholdMap(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyThresholdMap(Pointer ThresholdMapPtr1);

  /**
   * Original signature : <code>extern ThresholdMap* DestroyThresholdMap(ThresholdMap*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:11</i>
   */
  PointerByReference DestroyThresholdMap(PointerByReference ThresholdMapPtr1);

  /**
   * Original signature : <code>extern ThresholdMap* GetThresholdMap(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetThresholdMap(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetThresholdMap(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetThresholdMap(Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern ThresholdMap* GetThresholdMap(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:13</i>
   */
  PointerByReference GetThresholdMap(String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType AutoThresholdImage(Image*, const
   * AutoThresholdMethod, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/threshold.h:15</i>
   */
  int AutoThresholdImage(SaMagickCore.Image ImagePtr1, int AutoThresholdMethod1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType BilevelImage(Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:17</i>
   */
  int BilevelImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType BlackThresholdImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:19</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #BlackThresholdImage(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #BlackThresholdImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int BlackThresholdImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType BlackThresholdImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:19</i>
   */
  int BlackThresholdImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ClampImage(Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:21</i>
   */
  int ClampImage(SaMagickCore.Image ImagePtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListThresholdMaps(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:23</i>
   * <br>
   *
   * @deprecated use the safer method {@link #ListThresholdMaps(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListThresholdMaps(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ListThresholdMaps(FILE*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:23</i>
   */
  int ListThresholdMaps(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType OrderedDitherImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:25</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #OrderedDitherImage(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #OrderedDitherImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int OrderedDitherImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType OrderedDitherImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:25</i>
   */
  int OrderedDitherImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType PerceptibleImage(Image*, const double,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:27</i>
   */
  int PerceptibleImage(SaMagickCore.Image ImagePtr1, double double1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType RandomThresholdImage(Image*, const double,
   * const double, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/threshold.h:29</i>
   */
  int RandomThresholdImage(SaMagickCore.Image ImagePtr1, double double1, double double2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType WhiteThresholdImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:31</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #WhiteThresholdImage(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #WhiteThresholdImage(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int WhiteThresholdImage(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType WhiteThresholdImage(Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/threshold.h:31</i>
   */
  int WhiteThresholdImage(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern double GetElapsedTime(TimerInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:18</i>
   */
  double GetElapsedTime(SaMagickCore.TimerInfo TimerInfoPtr1);

  /**
   * Original signature : <code>extern double GetUserTime(TimerInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:20</i>
   */
  double GetUserTime(SaMagickCore.TimerInfo TimerInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ContinueTimer(TimerInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:22</i>
   */
  int ContinueTimer(SaMagickCore.TimerInfo TimerInfoPtr1);

  /**
   * Original signature : <code>extern TimerInfo* AcquireTimerInfo()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:24</i>
   */
  SaMagickCore.TimerInfo AcquireTimerInfo();

  /**
   * Original signature : <code>extern TimerInfo* DestroyTimerInfo(TimerInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:26</i>
   */
  SaMagickCore.TimerInfo DestroyTimerInfo(SaMagickCore.TimerInfo TimerInfoPtr1);

  /**
   * Original signature : <code>extern void GetTimerInfo(TimerInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:28</i>
   */
  void GetTimerInfo(SaMagickCore.TimerInfo TimerInfoPtr1);

  /**
   * Original signature : <code>extern void ResetTimer(TimerInfo*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/timer.h:30</i>
   */
  void ResetTimer(SaMagickCore.TimerInfo TimerInfoPtr1);

  /**
   * Original signature : <code>extern void StartTimer(TimerInfo*, const)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/timer.h:32</i>
   */
  void StartTimer(SaMagickCore.TimerInfo TimerInfoPtr1, int MagickBooleanType);

  /**
   * Original signature : <code>int Tokenizer(TokenInfo*, const unsigned int, char*, const size_t,
   * const char*, const char*, const char*, const char*, const char, char*, int*, char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:4</i> <br>
   *
   * @deprecated use the safer methods {@link #Tokenizer(com.sun.jna.ptr.PointerByReference, int,
   * java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String,
   * java.lang.String, java.lang.String, java.lang.String, byte, java.nio.ByteBuffer,
   * java.nio.IntBuffer, java.nio.ByteBuffer)} and {@link #Tokenizer(com.sun.jna.ptr.PointerByReference,
   * int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer,
   * com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, byte, com.sun.jna.Pointer,
   * com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int Tokenizer(Pointer TokenInfoPtr1, int int1, Pointer charPtr1, NativeSize size_t1,
      Pointer charPtr2, Pointer charPtr3, Pointer charPtr4, Pointer charPtr5, byte char1,
      Pointer charPtr6, IntByReference intPtr1, Pointer charPtr7);

  /**
   * Original signature : <code>int Tokenizer(TokenInfo*, const unsigned int, char*, const size_t,
   * const char*, const char*, const char*, const char*, const char, char*, int*, char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:4</i>
   */
  int Tokenizer(PointerByReference TokenInfoPtr1, int int1, ByteBuffer charPtr1, NativeSize size_t1,
      String charPtr2, String charPtr3, String charPtr4, String charPtr5, byte char1,
      ByteBuffer charPtr6, IntBuffer intPtr1, ByteBuffer charPtr7);

  /**
   * Original signature : <code>int Tokenizer(TokenInfo*, const unsigned int, char*, const size_t,
   * const char*, const char*, const char*, const char*, const char, char*, int*, char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:4</i>
   */
  int Tokenizer(PointerByReference TokenInfoPtr1, int int1, Pointer charPtr1, NativeSize size_t1,
      Pointer charPtr2, Pointer charPtr3, Pointer charPtr4, Pointer charPtr5, byte char1,
      Pointer charPtr6, IntByReference intPtr1, Pointer charPtr7);

  /**
   * Original signature : <code>MagickBooleanType GlobExpression(const char*, const char*, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:6</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GlobExpression(java.lang.String, java.lang.String,
   * int)} and {@link #GlobExpression(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
   */
  @Deprecated
  int GlobExpression(Pointer charPtr1, Pointer charPtr2, int MagickBooleanType1);

  /**
   * Original signature : <code>MagickBooleanType GlobExpression(const char*, const char*, const
   * MagickBooleanType)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:6</i>
   */
  int GlobExpression(String charPtr1, String charPtr2, int MagickBooleanType1);

  /**
   * Original signature : <code>extern TokenInfo* AcquireTokenInfo()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:8</i>
   */
  PointerByReference AcquireTokenInfo();

  /**
   * Original signature : <code>extern TokenInfo* DestroyTokenInfo(TokenInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:10</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyTokenInfo(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyTokenInfo(Pointer TokenInfoPtr1);

  /**
   * Original signature : <code>extern TokenInfo* DestroyTokenInfo(TokenInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:10</i>
   */
  PointerByReference DestroyTokenInfo(PointerByReference TokenInfoPtr1);

  /**
   * Original signature : <code>void GetNextToken(const char*, const char**, const size_t,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:12</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetNextToken(java.lang.String, java.lang.String[],
   * com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.ByteBuffer)} and {@link
   * #GetNextToken(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void GetNextToken(Pointer charPtr1, PointerByReference charPtrPtr1, NativeSize size_t1,
      Pointer charPtr2);

  /**
   * Original signature : <code>void GetNextToken(const char*, const char**, const size_t,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/token.h:12</i>
   */
  void GetNextToken(String charPtr1, String charPtrPtr1[], NativeSize size_t1, ByteBuffer charPtr2);

  /**
   * Original signature : <code>extern Image* AutoOrientImage(const Image*, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:2</i>
   */
  SaMagickCore.Image AutoOrientImage(SaMagickCore.Image ImagePtr1, int OrientationType,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ChopImage(const Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:4</i>
   */
  SaMagickCore.Image ChopImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ConsolidateCMYKImages(const Image*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:6</i>
   */
  SaMagickCore.Image ConsolidateCMYKImages(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* CropImage(const Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:8</i>
   */
  SaMagickCore.Image CropImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* CropImageToTiles(const Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:10</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #CropImageToTiles(SaMagickCore.Image,
   * java.lang.String, SaMagickCore.ExceptionInfo)} and {@link #CropImageToTiles(SaMagickCore.Image,
   * com.sun.jna.Pointer, SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image CropImageToTiles(SaMagickCore.Image ImagePtr1, Pointer charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* CropImageToTiles(const Image*, const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:10</i>
   */
  SaMagickCore.Image CropImageToTiles(SaMagickCore.Image ImagePtr1, String charPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ExcerptImage(const Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:12</i>
   */
  SaMagickCore.Image ExcerptImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ExtentImage(const Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:14</i>
   */
  SaMagickCore.Image ExtentImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* FlipImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:16</i>
   */
  SaMagickCore.Image FlipImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* FlopImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:18</i>
   */
  SaMagickCore.Image FlopImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* RollImage(const Image*, const, const,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:20</i>
   */
  SaMagickCore.Image RollImage(SaMagickCore.Image ImagePtr1, int ssize_t, int ssize_t2,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* ShaveImage(const Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:22</i>
   */
  SaMagickCore.Image ShaveImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* SpliceImage(const Image*, const RectangleInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:24</i>
   */
  SaMagickCore.Image SpliceImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.RectangleInfo RectangleInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* TransposeImage(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:26</i>
   */
  SaMagickCore.Image TransposeImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* TransverseImage(const Image*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:28</i>
   */
  SaMagickCore.Image TransverseImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern Image* TrimImage(const Image*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/transform.h:30</i>
   */
  SaMagickCore.Image TrimImage(SaMagickCore.Image ImagePtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetTypeList(const char*, size_t*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:39</i> <br>
   *
   * @deprecated use the safer methods {@link #GetTypeList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetTypeList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference GetTypeList(Pointer charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char** GetTypeList(const char*, size_t*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:39</i>
   */
  PointerByReference GetTypeList(String charPtr1, NativeSizeByReference size_tPtr1,
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListTypeInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:41</i> <br>
   *
   * @deprecated use the safer method {@link #ListTypeInfo(com.sun.jna.ptr.PointerByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  int ListTypeInfo(Pointer FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>MagickBooleanType ListTypeInfo(FILE*, ExceptionInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:41</i>
   */
  int ListTypeInfo(PointerByReference FILEPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const TypeInfo* GetTypeInfo(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:43</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetTypeInfo(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #GetTypeInfo(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.TypeInfo GetTypeInfo(Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const TypeInfo* GetTypeInfo(const char*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:43</i>
   */
  SaMagickCore.TypeInfo GetTypeInfo(String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const TypeInfo* GetTypeInfoByFamily(const char*, const
   * StyleType, const StretchType, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/type.h:45</i> <br>
   *
   * @deprecated use the safer methods {@link #GetTypeInfoByFamily(java.lang.String, int, int,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.ExceptionInfo)} and {@link
   * #GetTypeInfoByFamily(com.sun.jna.Pointer, int, int, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.TypeInfo GetTypeInfoByFamily(Pointer charPtr1, int StyleType1, int StretchType1,
      NativeSize size_t1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const TypeInfo* GetTypeInfoByFamily(const char*, const
   * StyleType, const StretchType, const size_t, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/type.h:45</i>
   */
  SaMagickCore.TypeInfo GetTypeInfoByFamily(String charPtr1, int StyleType1, int StretchType1,
      NativeSize size_t1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const TypeInfo** GetTypeInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:47</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetTypeInfoList(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, SaMagickCore.ExceptionInfo)} and
   * {@link #GetTypeInfoList(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.TypeInfo.ByReference[] GetTypeInfoList(Pointer charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern const TypeInfo** GetTypeInfoList(const char*, size_t*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/type.h:47</i>
   */
  SaMagickCore.TypeInfo.ByReference[] GetTypeInfoList(String charPtr1,
      NativeSizeByReference size_tPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* Base64Encode(const unsigned char*, const size_t,
   * size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:13</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #Base64Encode(byte[], com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link
   * #Base64Encode(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} instead
   */
  @Deprecated
  Pointer Base64Encode(Pointer charPtr1, NativeSize size_t1, NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>char* Base64Encode(const unsigned char*, const size_t,
   * size_t*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:13</i>
   */
  Pointer Base64Encode(byte charPtr1[], NativeSize size_t1, NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType AcquireUniqueFilename(char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:15</i> <br>
   *
   * @deprecated use the safer methods {@link #AcquireUniqueFilename(java.nio.ByteBuffer)} and
   * {@link #AcquireUniqueFilename(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int AcquireUniqueFilename(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType AcquireUniqueFilename(char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:15</i>
   */
  int AcquireUniqueFilename(ByteBuffer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType AcquireUniqueSymbolicLink(const char*,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:17</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #AcquireUniqueSymbolicLink(java.lang.String,
   * java.nio.ByteBuffer)} and {@link #AcquireUniqueSymbolicLink(com.sun.jna.Pointer,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int AcquireUniqueSymbolicLink(Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType AcquireUniqueSymbolicLink(const char*,
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:17</i>
   */
  int AcquireUniqueSymbolicLink(String charPtr1, ByteBuffer charPtr2);

  /**
   * Original signature : <code>extern MagickBooleanType ExpandFilenames(int*, char***)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:19</i> <br>
   *
   * @deprecated use the safer methods {@link #ExpandFilenames(java.nio.IntBuffer,
   * com.sun.jna.ptr.PointerByReference)} and {@link #ExpandFilenames(com.sun.jna.ptr.IntByReference,
   * com.sun.jna.ptr.PointerByReference)} instead
   */
  @Deprecated
  int ExpandFilenames(IntByReference intPtr1, PointerByReference charPtrPtrPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType ExpandFilenames(int*, char***)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:19</i>
   */
  int ExpandFilenames(IntBuffer intPtr1, PointerByReference charPtrPtrPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetPathAttributes(const char*,
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:21</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetPathAttributes(java.lang.String,
   * com.sun.jna.Pointer)} and {@link #GetPathAttributes(com.sun.jna.Pointer, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  int GetPathAttributes(Pointer charPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType GetPathAttributes(const char*,
   * void*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:21</i>
   */
  int GetPathAttributes(String charPtr1, Pointer voidPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsPathAccessible(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:23</i> <br>
   *
   * @deprecated use the safer methods {@link #IsPathAccessible(java.lang.String)} and {@link
   * #IsPathAccessible(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  int IsPathAccessible(Pointer charPtr1);

  /**
   * Original signature : <code>extern MagickBooleanType IsPathAccessible(const char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:23</i>
   */
  int IsPathAccessible(String charPtr1);

  /**
   * Original signature : <code>size_t MultilineCensus(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:25</i> <br>
   *
   * @deprecated use the safer methods {@link #MultilineCensus(java.lang.String)} and {@link
   * #MultilineCensus(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  NativeSize MultilineCensus(Pointer charPtr1);

  /**
   * Original signature : <code>size_t MultilineCensus(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:25</i>
   */
  NativeSize MultilineCensus(String charPtr1);

  /**
   * Original signature : <code>char* Base64Decode(const char*, size_t*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:27</i> <br>
   *
   * @deprecated use the safer methods {@link #Base64Decode(java.lang.String,
   * com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link
   * #Base64Decode(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)}
   * instead
   */
  @Deprecated
  Pointer Base64Decode(Pointer charPtr1, NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>char* Base64Decode(const char*, size_t*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:27</i>
   */
  Pointer Base64Decode(String charPtr1, NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>extern void AppendImageFormat(const char*, char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:29</i> <br>
   *
   * @deprecated use the safer methods {@link #AppendImageFormat(java.lang.String,
   * java.nio.ByteBuffer)} and {@link #AppendImageFormat(com.sun.jna.Pointer, com.sun.jna.Pointer)}
   * instead
   */
  @Deprecated
  void AppendImageFormat(Pointer charPtr1, Pointer charPtr2);

  /**
   * Original signature : <code>extern void AppendImageFormat(const char*, char*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:29</i>
   */
  void AppendImageFormat(String charPtr1, ByteBuffer charPtr2);

  /**
   * Original signature : <code>extern void GetPathComponent(const char*, PathType, char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:31</i> <br>
   *
   * @deprecated use the safer methods {@link #GetPathComponent(java.lang.String, int,
   * java.nio.ByteBuffer)} and {@link #GetPathComponent(com.sun.jna.Pointer, int,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  void GetPathComponent(Pointer charPtr1, int PathType1, Pointer charPtr2);

  /**
   * Original signature : <code>extern void GetPathComponent(const char*, PathType, char*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/utility.h:31</i>
   */
  void GetPathComponent(String charPtr1, int PathType1, ByteBuffer charPtr2);

  /**
   * Original signature : <code>extern void MagickDelay(const)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/utility.h:33</i>
   */
  void MagickDelay(int MagickSizeType);

  /**
   * Define declarations. <br> Original signature : <code>char* GetMagickHomeURL()</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:5</i>
   */
  Pointer GetMagickHomeURL();

  /**
   * Original signature : <code>extern const char* GetMagickCopyright()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:7</i>
   */
  Pointer GetMagickCopyright();

  /**
   * Original signature : <code>extern const char* GetMagickDelegates()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:9</i>
   */
  Pointer GetMagickDelegates();

  /**
   * Original signature : <code>extern const char* GetMagickFeatures()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:11</i>
   */
  Pointer GetMagickFeatures();

  /**
   * Original signature : <code>extern const char* GetMagickLicense()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:13</i>
   */
  Pointer GetMagickLicense();

  /**
   * Original signature : <code>extern const char* GetMagickPackageName()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:15</i>
   */
  Pointer GetMagickPackageName();

  /**
   * Original signature : <code>extern const char* GetMagickQuantumDepth(size_t*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:17</i>
   */
  Pointer GetMagickQuantumDepth(NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>extern const char* GetMagickQuantumRange(size_t*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:19</i>
   */
  Pointer GetMagickQuantumRange(NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>extern const char* GetMagickReleaseDate()</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:21</i>
   */
  Pointer GetMagickReleaseDate();

  /**
   * Original signature : <code>extern const char* GetMagickVersion(size_t*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/version.h:23</i>
   */
  Pointer GetMagickVersion(NativeSizeByReference size_tPtr1);

  /**
   * Original signature : <code>void ListMagickVersion(FILE*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/version.h:25</i> <br>
   *
   * @deprecated use the safer method {@link #ListMagickVersion(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  void ListMagickVersion(Pointer FILEPtr1);

  /**
   * Original signature : <code>void ListMagickVersion(FILE*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/version.h:25</i>
   */
  void ListMagickVersion(PointerByReference FILEPtr1);

  /**
   * Original signature : <code>Image* ConnectedComponentsImage(const Image*, const size_t,
   * CCObjectInfo**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/vision.h:10</i> <br>
   *
   * @deprecated use the safer method {@link #ConnectedComponentsImage(SaMagickCore.Image,
   * com.ochafik.lang.jnaerator.runtime.NativeSize, SaMagickCore.CCObjectInfo.ByReference[],
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  SaMagickCore.Image ConnectedComponentsImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      PointerByReference CCObjectInfoPtrPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>Image* ConnectedComponentsImage(const Image*, const size_t,
   * CCObjectInfo**, ExceptionInfo*)</code> <br> <i>native declaration :
   * /usr/local/include/ImageMagick-7/MagickCore/vision.h:10</i>
   */
  SaMagickCore.Image ConnectedComponentsImage(SaMagickCore.Image ImagePtr1, NativeSize size_t1,
      SaMagickCore.CCObjectInfo.ByReference CCObjectInfoPtrPtr1[],
      SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>char* XMLTreeInfoToXML(XMLTreeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:3</i> <br>
   *
   * @deprecated use the safer method {@link #XMLTreeInfoToXML(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer XMLTreeInfoToXML(Pointer XMLTreeInfoPtr1);

  /**
   * Original signature : <code>char* XMLTreeInfoToXML(XMLTreeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:3</i>
   */
  Pointer XMLTreeInfoToXML(PointerByReference XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeAttribute(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:5</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetXMLTreeAttribute(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #GetXMLTreeAttribute(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  Pointer GetXMLTreeAttribute(Pointer XMLTreeInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeAttribute(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:5</i>
   */
  Pointer GetXMLTreeAttribute(PointerByReference XMLTreeInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeAttribute(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:5</i>
   */
  Pointer GetXMLTreeAttribute(PointerByReference XMLTreeInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeContent(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:7</i> <br>
   *
   * @deprecated use the safer method {@link #GetXMLTreeContent(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetXMLTreeContent(Pointer XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeContent(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:7</i>
   */
  Pointer GetXMLTreeContent(PointerByReference XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeTag(XMLTreeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:9</i> <br>
   *
   * @deprecated use the safer method {@link #GetXMLTreeTag(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  Pointer GetXMLTreeTag(Pointer XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern const char* GetXMLTreeTag(XMLTreeInfo*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:9</i>
   */
  Pointer GetXMLTreeTag(PointerByReference XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* AddChildToXMLTree(XMLTreeInfo*, const char*,
   * const size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:11</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #AddChildToXMLTree(com.sun.jna.ptr.PointerByReference,
   * java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link
   * #AddChildToXMLTree(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer,
   * com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
   */
  @Deprecated
  PointerByReference AddChildToXMLTree(Pointer XMLTreeInfoPtr1, Pointer charPtr1,
      NativeSize size_t1);

  /**
   * Original signature : <code>extern XMLTreeInfo* AddChildToXMLTree(XMLTreeInfo*, const char*,
   * const size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:11</i>
   */
  PointerByReference AddChildToXMLTree(PointerByReference XMLTreeInfoPtr1, String charPtr1,
      NativeSize size_t1);

  /**
   * Original signature : <code>extern XMLTreeInfo* AddChildToXMLTree(XMLTreeInfo*, const char*,
   * const size_t)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:11</i>
   */
  PointerByReference AddChildToXMLTree(PointerByReference XMLTreeInfoPtr1, Pointer charPtr1,
      NativeSize size_t1);

  /**
   * Original signature : <code>extern XMLTreeInfo* DestroyXMLTree(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:13</i> <br>
   *
   * @deprecated use the safer method {@link #DestroyXMLTree(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference DestroyXMLTree(Pointer XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* DestroyXMLTree(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:13</i>
   */
  PointerByReference DestroyXMLTree(PointerByReference XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetNextXMLTreeTag(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:15</i> <br>
   *
   * @deprecated use the safer method {@link #GetNextXMLTreeTag(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference GetNextXMLTreeTag(Pointer XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetNextXMLTreeTag(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:15</i>
   */
  PointerByReference GetNextXMLTreeTag(PointerByReference XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetXMLTreeChild(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:17</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #GetXMLTreeChild(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #GetXMLTreeChild(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  PointerByReference GetXMLTreeChild(Pointer XMLTreeInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetXMLTreeChild(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:17</i>
   */
  PointerByReference GetXMLTreeChild(PointerByReference XMLTreeInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetXMLTreeChild(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:17</i>
   */
  PointerByReference GetXMLTreeChild(PointerByReference XMLTreeInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetXMLTreeSibling(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:19</i> <br>
   *
   * @deprecated use the safer method {@link #GetXMLTreeSibling(com.sun.jna.ptr.PointerByReference)}
   * instead
   */
  @Deprecated
  PointerByReference GetXMLTreeSibling(Pointer XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* GetXMLTreeSibling(XMLTreeInfo*)</code> <br>
   * <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:19</i>
   */
  PointerByReference GetXMLTreeSibling(PointerByReference XMLTreeInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* NewXMLTree(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:21</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #NewXMLTree(java.lang.String,
   * SaMagickCore.ExceptionInfo)} and {@link #NewXMLTree(com.sun.jna.Pointer,
   * SaMagickCore.ExceptionInfo)} instead
   */
  @Deprecated
  PointerByReference NewXMLTree(Pointer charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* NewXMLTree(const char*, ExceptionInfo*)</code>
   * <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:21</i>
   */
  PointerByReference NewXMLTree(String charPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* NewXMLTreeTag(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:23</i> <br>
   *
   * @deprecated use the safer methods {@link #NewXMLTreeTag(java.lang.String)} and {@link
   * #NewXMLTreeTag(com.sun.jna.Pointer)} instead
   */
  @Deprecated
  PointerByReference NewXMLTreeTag(Pointer charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* NewXMLTreeTag(const char*)</code> <br> <i>native
   * declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:23</i>
   */
  PointerByReference NewXMLTreeTag(String charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* SetXMLTreeContent(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:25</i>
   * <br>
   *
   * @deprecated use the safer methods {@link #SetXMLTreeContent(com.sun.jna.ptr.PointerByReference,
   * java.lang.String)} and {@link #SetXMLTreeContent(com.sun.jna.ptr.PointerByReference,
   * com.sun.jna.Pointer)} instead
   */
  @Deprecated
  PointerByReference SetXMLTreeContent(Pointer XMLTreeInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* SetXMLTreeContent(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:25</i>
   */
  PointerByReference SetXMLTreeContent(PointerByReference XMLTreeInfoPtr1, String charPtr1);

  /**
   * Original signature : <code>extern XMLTreeInfo* SetXMLTreeContent(XMLTreeInfo*, const
   * char*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xml-tree.h:25</i>
   */
  PointerByReference SetXMLTreeContent(PointerByReference XMLTreeInfoPtr1, Pointer charPtr1);

  /**
   * Original signature : <code>Image* XImportImage(const ImageInfo*, XImportInfo*,
   * ExceptionInfo*)</code> <br> <i>native declaration : /usr/local/include/ImageMagick-7/MagickCore/xwindow.h:9</i>
   */
  SaMagickCore.Image XImportImage(SaMagickCore.ImageInfo ImageInfoPtr1,
      SaMagickCore.XImportInfo XImportInfoPtr1, SaMagickCore.ExceptionInfo ExceptionInfoPtr1);

  /**
   * Original signature : <code>void XGetImportInfo(XImportInfo*)</code> <br> <i>native declaration
   * : /usr/local/include/ImageMagick-7/MagickCore/xwindow.h:11</i>
   */
  void XGetImportInfo(SaMagickCore.XImportInfo XImportInfoPtr1);

  public static class RandomInfo extends PointerType {

    public RandomInfo(Pointer address) {
      super(address);
    }

    public RandomInfo() {
      super();
    }
  }

  ;

  public static class LogInfo extends PointerType {

    public LogInfo(Pointer address) {
      super(address);
    }

    public LogInfo() {
      super();
    }
  }

  ;

  public static class LinkedListInfo extends PointerType {

    public LinkedListInfo(Pointer address) {
      super(address);
    }

    public LinkedListInfo() {
      super();
    }
  }

  ;

  public static class MagickCLDevice extends PointerType {

    public MagickCLDevice(Pointer address) {
      super(address);
    }

    public MagickCLDevice() {
      super();
    }
  }

  ;

  public static class PolicyInfo extends PointerType {

    public PolicyInfo(Pointer address) {
      super(address);
    }

    public PolicyInfo() {
      super();
    }
  }

  ;

  public static class ProfileInfo extends PointerType {

    public ProfileInfo(Pointer address) {
      super(address);
    }

    public ProfileInfo() {
      super();
    }
  }

  ;

  public static class BlobInfo extends PointerType {

    public BlobInfo(Pointer address) {
      super(address);
    }

    public BlobInfo() {
      super();
    }
  }

  ;

  public static class SemaphoreInfo extends PointerType {

    public SemaphoreInfo(Pointer address) {
      super(address);
    }

    public SemaphoreInfo() {
      super();
    }
  }

  ;

  public static class CustomStreamInfo extends PointerType {

    public CustomStreamInfo(Pointer address) {
      super(address);
    }

    public CustomStreamInfo() {
      super();
    }
  }

  ;

  public static class Ascii85Info extends PointerType {

    public Ascii85Info(Pointer address) {
      super(address);
    }

    public Ascii85Info() {
      super();
    }
  }

  ;

  public static class MatrixInfo extends PointerType {

    public MatrixInfo(Pointer address) {
      super(address);
    }

    public MatrixInfo() {
      super();
    }
  }

  ;

  public static class CacheView_ extends PointerType {

    public CacheView_(Pointer address) {
      super(address);
    }

    public CacheView_() {
      super();
    }
  }

  ;

  public static class ThresholdMap extends PointerType {

    public ThresholdMap(Pointer address) {
      super(address);
    }

    public ThresholdMap() {
      super();
    }
  }

  ;

  public static class MagickProgressMonitor extends PointerType {

    public MagickProgressMonitor(Pointer address) {
      super(address);
    }

    public MagickProgressMonitor() {
      super();
    }
  }

  ;

  public static class CacheView extends PointerType {

    public CacheView(Pointer address) {
      super(address);
    }

    public CacheView() {
      super();
    }
  }

  ;

  public static class StreamInfo extends PointerType {

    public StreamInfo(Pointer address) {
      super(address);
    }

    public StreamInfo() {
      super();
    }
  }

  ;

  public static class DecodeImageHandler extends PointerType {

    public DecodeImageHandler(Pointer address) {
      super(address);
    }

    public DecodeImageHandler() {
      super();
    }
  }

  ;

  public static class MimeInfo extends PointerType {

    public MimeInfo(Pointer address) {
      super(address);
    }

    public MimeInfo() {
      super();
    }
  }

  ;

  public static class XMLTreeInfo extends PointerType {

    public XMLTreeInfo(Pointer address) {
      super(address);
    }

    public XMLTreeInfo() {
      super();
    }
  }

  ;

  public static class ImageView extends PointerType {

    public ImageView(Pointer address) {
      super(address);
    }

    public ImageView() {
      super();
    }
  }

  ;

  public static class TokenInfo extends PointerType {

    public TokenInfo(Pointer address) {
      super(address);
    }

    public TokenInfo() {
      super();
    }
  }

  ;

  public static class FILE extends PointerType {

    public FILE(Pointer address) {
      super(address);
    }

    public FILE() {
      super();
    }
  }

  ;

  public static class SplayTreeInfo extends PointerType {

    public SplayTreeInfo(Pointer address) {
      super(address);
    }

    public SplayTreeInfo() {
      super();
    }
  }

  ;

  public static class ResampleFilter extends PointerType {

    public ResampleFilter(Pointer address) {
      super(address);
    }

    public ResampleFilter() {
      super();
    }
  }

  ;
}
